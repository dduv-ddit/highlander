/*****************************************************************************************
*
* Highlander - Copyright (C) <2012-2020> <Université catholique de Louvain (UCLouvain)>
* 	
* List of the contributors to the development of Highlander: see LICENSE file.
* Description and complete License: see LICENSE file.
* 	
* This program (Highlander) is free software: 
* you can redistribute it and/or modify it under the terms of the 
* GNU General Public License as published by the Free Software Foundation, 
* either version 3 of the License, or (at your option) any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program (see COPYING file).  If not, 
* see <http://www.gnu.org/licenses/>.
* 
*****************************************************************************************/

/**
*
* @author Raphael Helaers
*
*/

package be.uclouvain.ngs.highlander.database;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

import be.uclouvain.ngs.highlander.Highlander;
import be.uclouvain.ngs.highlander.Parameters;
import be.uclouvain.ngs.highlander.database.Field.Tag;
import be.uclouvain.ngs.highlander.database.HighlanderDatabase.DBMS;
import be.uclouvain.ngs.highlander.database.HighlanderDatabase.Schema;
import be.uclouvain.ngs.highlander.datatype.Analysis;

public class SqlGenerator {

	public static void sqlGenerator() throws Exception {
		File sql = new File("highlander.common.sql");
		try (FileWriter fw = new FileWriter(sql)){

			fw.write("--\n");
			fw.write("-- Table structure for table `main`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createMain().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `main`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `main` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `main` DISABLE KEYS */;\n");
			fw.write(fillMain().toString());
			fw.write("/*!40000 ALTER TABLE `main` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `settings`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createSettings().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `settings`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `settings` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `settings` DISABLE KEYS */;\n");
			fw.write(fillSettings().toString());
			fw.write("/*!40000 ALTER TABLE `settings` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `references`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createReferences().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `references`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `references` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `references` DISABLE KEYS */;\n");
			fw.write(fillReferences().toString());
			fw.write("/*!40000 ALTER TABLE `references` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `reports`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createReports().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `reports`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `reports` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `reports` DISABLE KEYS */;\n");
			fw.write(fillReports().toString());
			fw.write("/*!40000 ALTER TABLE `reports` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `external_links`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createExternalLinks().toString());
			fw.write("\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `pathologies`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createPathologies().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `populations`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createPopulations().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `populations`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `populations` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `populations` DISABLE KEYS */;\n");
			fw.write(fillPopulations().toString());
			fw.write("/*!40000 ALTER TABLE `populations` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `fields_analyses`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createFieldAnalyses().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `fields_tags`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createFieldTags().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `field_categories`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createFieldCategories().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `field_categories`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `field_categories` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `field_categories` DISABLE KEYS */;\n");
			fw.write(fillFieldCategories().toString());
			fw.write("/*!40000 ALTER TABLE `field_categories` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `field_sizes`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createFieldSizes().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `field_sizes`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `field_sizes` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `field_sizes` DISABLE KEYS */;\n");
			fw.write(fillFieldSizes().toString());
			fw.write("/*!40000 ALTER TABLE `field_sizes` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `fields`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createFields().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `fields`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `fields` WRITE;\n");
			fw.write("LOCK TABLES `fields_tags` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `fields` DISABLE KEYS */;\n");
			fw.write("/*!40000 ALTER TABLE `fields_tags` DISABLE KEYS */;\n");
			fw.write(fillFields().toString());
			fw.write("/*!40000 ALTER TABLE `fields` ENABLE KEYS */;\n");
			fw.write("/*!40000 ALTER TABLE `fields_tags` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `projects`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createProjects().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `projects_users`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createProjectsUsers().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `projects_analyses`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createProjectsAnalyses().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `users`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createUsers().toString());
			fw.write("\n");
			fw.write("--\n");
			fw.write("-- Dumping data for table `users`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write("LOCK TABLES `users` WRITE;\n");
			fw.write("/*!40000 ALTER TABLE `users` DISABLE KEYS */;\n");
			fw.write(fillUsers().toString());
			fw.write("/*!40000 ALTER TABLE `users` ENABLE KEYS */;\n");
			fw.write("UNLOCK TABLES;\n");
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `users_data`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createUsersData().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table structure for table `analyses`\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createAnalyses().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Functions\n");
			fw.write("--\n");
			fw.write("\n");
			fw.write(createFunctions().toString());
			fw.write("\n");

			fw.write("--\n");
			fw.write("-- Table permissions\n");
			fw.write("--\n");
			fw.write("\n");
			//TODO LONGTERM - Those GRANTs depends on installed databases, should be handle somewhere else, when *creating users* (and installing annotation DBs)
			fw.write("GRANT SELECT, INSERT, UPDATE, DELETE, CREATE TEMPORARY TABLES, EXECUTE, SHOW VIEW ON `Highlander`.* TO 'ngs_user'@'%';\n");
			fw.write("GRANT SELECT ON `%_%`.* TO 'ngs_user'@'%';\n");
			fw.write("GRANT SELECT ON `cosmic_%`.* TO 'ngs_user'@'%';\n");
			fw.write("GRANT SELECT ON `gnomad_%`.* TO 'ngs_user'@'%';\n");
			fw.write("GRANT SELECT ON `dbNSFP_%`.* TO 'ngs_user'@'%';\n");
			fw.write("GRANT SELECT ON `gonl_%`.* TO 'ngs_user'@'%';\n");
			fw.write("GRANT SELECT ON `exac_%`.* TO 'ngs_user'@'%';\n");
			fw.write("\n");
			fw.write("GRANT ALL PRIVILEGES ON `Highlander`.* TO 'ngs_admin'@'%';\n");
			fw.write("GRANT ALL PRIVILEGES ON `%_%`.* TO 'ngs_admin'@'%';\n");
			fw.write("GRANT ALL PRIVILEGES ON `cosmic_%`.* TO 'ngs_admin'@'%';\n");
			fw.write("GRANT ALL PRIVILEGES ON `gnomad_%`.* TO 'ngs_admin'@'%';\n");
			fw.write("GRANT ALL PRIVILEGES ON `dbNSFP_%`.* TO 'ngs_admin'@'%';\n");
			fw.write("GRANT ALL PRIVILEGES ON `gonl_%`.* TO 'ngs_admin'@'%';\n");
			fw.write("GRANT ALL PRIVILEGES ON `exac_%`.* TO 'ngs_admin'@'%';\n");
		}
	}

	public static StringBuilder createMain(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `main`;\n");
		fw.append("CREATE TABLE `main` (\n");
		fw.append("  `version` VARCHAR(10) NOT NULL COMMENT 'Only the Highlander GUI of this version or higher can connect to this database',\n");
		fw.append("  `update_soft` BOOLEAN DEFAULT FALSE COMMENT 'Set to true when an update of the database or importation of new samples is started on the cluster.',\n");
		fw.append("  `update_hard` BOOLEAN DEFAULT FALSE COMMENT 'Set to true when a table is currently being updated.',\n");
		fw.append("  `beta_functionalities` BOOLEAN DEFAULT FALSE COMMENT 'Set to true to activate functionnalities that still need testing',\n");
		fw.append("  PRIMARY KEY (`version`) \n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder fillMain(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `main` VALUES ('"+Highlander.databaseRequiredVersion+"',0,0,0);\n");
		return fw;
	}

	public static StringBuilder createSettings(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `settings`;\n");
		fw.append("CREATE TABLE `settings` (\n");
		fw.append("  `ordering` INT(10) UNSIGNED NOT NULL,\n");
		fw.append("  `section` VARCHAR(255) NOT NULL,\n");
		fw.append("  `setting` VARCHAR(255) NOT NULL,\n");
		fw.append("  `value` VARCHAR(1500) DEFAULT NULL,\n");
		fw.append("  `description` TEXT NOT NULL,\n");
		fw.append("  PRIMARY KEY (`section`,`setting`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder fillSettings(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (110,'server|files','host','Hostname of the Apache server distributing files such as BAM, VCF, dbSNP and reports. Only give the IP or hostname (don\\'t add http://)');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (120,'server|files','protocol','http','Default value is http, but can be changed to e.g. https if necessary.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (130,'server|files','sql','sql','Path to directory where SQL files are deposited for importation. URL constructed to access SQL files will be [protocol]://[host]/[sql]');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (140,'server|files','php','php','Path to PHP scripts, used for BamCheck and BamOut functionnalities. URL constructed to access PHP scripts will be [protocol]://[host]/[php]');\n");		
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (150,'server|files','dbsnp','dbsnp','Path to dbSNP VCF\\'s, so they can be loaded in IGV. URL constructed to access dbsnp VCFs will be [protocol]://[host]/[dbsnp]');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (160,'server|files','reports','reports','Path to reports like fastQC or result files other than primary bam/vcf (list taken from Reports table in the database). URL constructed to access reports will be [protocol]://[host]/[reports]/[run_id]_[run_date]_[run_name]/[software]/[sample]');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (210,'server|pipeline','host','Only used with administration tools, to launch scripts remotely using SSH (e.g. relaunching pipeline for a batch of runs). Settings.xml in the client must contain username and privatekey settings.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (220,'server|pipeline','protocol','ssh','Default value is ssh, other protocols are not supported.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (230,'server|pipeline','scripts','Full path in the host where scripts running the pipeline can be found.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (310,'email','smtp','SMTP server used to send error reports, and when sending mail to new users and after importation');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (320,'email','admin','Email address of the Highlander administrator. Error reports will be sent to him/her and emails sent by Highlander will use his/her address as the sender.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (410,'http_proxy','host','If the clients need to go though a proxy, set the host here.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (420,'http_proxy','port','If the clients need to go though a proxy, set the port here.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (430,'http_proxy','user','Ommited if your proxy doesn\\'t need authentication.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `description`) VALUES (440,'http_proxy','password','Ommited if your proxy doesn\\'t need authentication.');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (450,'http_proxy','passwordpolicy','from_settings','Ommited if your proxy doesn\\'t need authentication. Values can be \\'ask_at_login\\' (password will be asked at login screen), \\'same_as_highlander\\' (Highlander user password will be used for proxy password) or \\'from_settings\\' (default, you have to set the password in settings file or in the database).');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (460,'http_proxy','bypass','localhost|127.0.0.1','A list of hosts (separeted by \\'|\\') for which to proxy won\\'t be used (they are behind the proxy).');\n");
		fw.append("INSERT INTO `settings` (`ordering`,`section`, `setting`, `value`, `description`) VALUES (510,'external','pavian','https://ccb.jhu.edu/software/pavian/','URL to a Pavian webserver');\n");
		return fw;
	}

	public static StringBuilder createReferences(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `references`;\n");
		fw.append("CREATE TABLE `references` (\n");
		fw.append("  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `reference` VARCHAR(255) NOT NULL,\n");
		fw.append("  `annotation_code` VARCHAR(255) NOT NULL,\n");
		fw.append("  `annotation_schema` VARCHAR(255) NOT NULL,\n");
		fw.append("  `chromosomes` TEXT DEFAULT NULL,\n");
		fw.append("  `description` TEXT DEFAULT NULL,\n");
		fw.append("  PRIMARY KEY (`id`),\n");
		fw.append("  INDEX `id` (`reference`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder fillReferences(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh37','ENSEMBL','homo_sapiens_core_75_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 37');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh37','DBNSFP','dbNSFP_4_1','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 37');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh37','COSMIC','cosmic_92_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 37');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh37','GONL','gonl_r5','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 37');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh37','EXAC','exac_r0_3','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 37');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37','ENSEMBL','homo_sapiens_core_75_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37','DBNSFP','dbNSFP_4_1','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37','COSMIC','cosmic_92_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37','GONL','gonl_r5','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37','EXAC','exac_r0_3','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37_decoy','ENSEMBL','homo_sapiens_core_75_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 decoy provided by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37_decoy','DBNSFP','dbNSFP_4_1','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 decoy provided by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37_decoy','COSMIC','cosmic_92_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 decoy provided by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37_decoy','GONL','gonl_r5','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 decoy provided by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('b37_decoy','EXAC','exac_r0_3','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 decoy provided by GATK');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('hg19','ENSEMBL','homo_sapiens_core_75_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by UCSC');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('hg19','DBNSFP','dbNSFP_4_1','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by UCSC');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('hg19','COSMIC','cosmic_92_37','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by UCSC');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('hg19','GONL','gonl_r5','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by UCSC');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('hg19','EXAC','exac_r0_3','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','GRCh37 modified by UCSC');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCm38','ENSEMBL','mus_musculus_core_97_38','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,X,Y','Genome Reference Consortium Mouse Build 38');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh38','ENSEMBL','homo_sapiens_core_100_38','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 38');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh38','DBNSFP','dbNSFP_4_1','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 38');\n");
		fw.append("INSERT INTO `references` (`reference`, `annotation_code`, `annotation_schema`,`chromosomes`,`description`) VALUES ('GRCh38','COSMIC','cosmic_92_38','1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y','Genome Reference Consortium Human Build 38');\n");
		return fw;
	}
	
	public static StringBuilder createReports(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `reports`;\n");
		fw.append("CREATE TABLE `reports` (\n");
		fw.append("  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `software` VARCHAR(255) NOT NULL,\n");
		fw.append("  `software_description` TEXT DEFAULT NULL,\n");
		fw.append("  `path` VARCHAR(255) NOT NULL,\n");
		fw.append("  `analysis` varchar(255) NOT NULL,\n");
		fw.append("  `file_extension` VARCHAR(255) NOT NULL,\n");
		fw.append("  `file_description` TEXT DEFAULT NULL,\n");
		fw.append("  PRIMARY KEY (`id`),\n");
		fw.append("  INDEX `id` (`software`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder fillReports(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('FastQC','Sequecing quality control','fastqc','','.fastqc.zip','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.normalized.coverage.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.normalized.autosomal.coverage.all.controls.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.best.score.totallist.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.best.score.shortlist.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.best.score.longlist.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.best.score.log','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Convading','CNV call','convading','','.convading.best.match.score.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('ExomeDepth','CNV call','exomedepth','','.exomedepth.vcf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('ExomeDepth','CNV call','exomedepth','','.exomedepth.stats.csv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('ExomeDepth','CNV call','exomedepth','','.exomedepth.rda','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('ExomeDepth','CNV call','exomedepth','','.exomedepth.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('ExomeDepth','CNV call','exomedepth','','.exomedepth.csv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.vcf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.stats.csv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.regions.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.rda','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.csv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.chromosomes.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('cn.Mops','CNV call','cnmops','','.cnmops.bins.csv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('FACETS','Somatic CNV call','facets','','.facets.tsv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('FACETS','Somatic CNV call','facets','','.facets.scores','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('FACETS','Somatic CNV call','facets','','.facets.png','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.segments.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.mutations.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.model_fit.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.genome_view.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.gc_plots.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.confints_CP.txt','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.chromosome_view.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.chromosome_depths.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.CP_contours.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.sequenza.CN_bars.pdf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('Sequenza','Somatic CNV call','sequenza','','.mutations.sequenza.vcf','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('MSISensor','Somatic microsat instability','msisensor','','.tsv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('MSISensor','Somatic microsat instability','msisensor','','_dis_tab.tsv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('MSISensor','Somatic microsat instability','msisensor','','_germline.tsv','');\n");
		fw.append("INSERT INTO `reports` (software, software_description, path, analysis, file_extension, file_description) VALUES ('MSISensor','Somatic microsat instability','msisensor','','_somatic.tsv','');\n");
		return fw;
	}

	public static StringBuilder createExternalLinks(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `external_links`;\n");
		fw.append("CREATE TABLE `external_links` (\n");
		fw.append("  `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `name` VARCHAR(255) NOT NULL,\n");
		fw.append("  `ordering` INT(10) UNSIGNED NOT NULL,\n");
		fw.append("  `description` TEXT NOT NULL,\n");
		fw.append("  `url` VARCHAR(1500) NOT NULL DEFAULT '',\n");
		fw.append("  `url_parameters` VARCHAR(1500) NOT NULL DEFAULT '',\n");
		fw.append("  `url_genome` VARCHAR(1500) NOT NULL DEFAULT '',\n");
		fw.append("  `icon` LONGBLOB DEFAULT NULL,\n");
		fw.append("  `enable` BOOLEAN DEFAULT TRUE,\n");
		fw.append("  PRIMARY KEY (`id`),\n");
		fw.append("  INDEX `id` (`name`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createPathologies(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `pathologies`;\n");
		fw.append("CREATE TABLE `pathologies` (\n");
		fw.append("  `pathology_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `pathology` VARCHAR(1000) NOT NULL,\n");
		fw.append("  `pathology_description` TEXT NOT NULL,\n");
		fw.append("  PRIMARY KEY (`pathology_id`),\n");
		fw.append("	 UNIQUE KEY `pathology_UNIQUE` (`pathology`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createPopulations(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `populations`;\n");
		fw.append("CREATE TABLE `populations` (\n");
		fw.append("  `population_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `population` VARCHAR(1000) NOT NULL,\n");
		fw.append("  `population_description` TEXT NOT NULL,\n");
		fw.append("  PRIMARY KEY (`population_id`),\n");
		fw.append("	 UNIQUE KEY `population_UNIQUE` (`population`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder fillPopulations(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('ACB','African Caribbean in Barbados (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('ASW','African Ancestry in Southwest US (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('BEB','Bengali in Bangladesh (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('CDX','Chinese Dai in Xishuangbanna, China (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('CEU','Utah residents with Northern and Western European ancestry (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('CHB','Han Chinese in Bejing, China (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('CHS','Southern Han Chinese, China (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('CLM','Colombian in Medellin, Colombia (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('ESN','Esan in Nigeria (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('FIN','Finnish in Finland (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('GBR','British in England and Scotland (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('GIH','Gujarati Indian in Houston,TX (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('GWD','Gambian in Western Division, The Gambia (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('IBS','Iberian populations in Spain (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('ITU','Indian Telugu in the UK (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('JPT','Japanese in Tokyo, Japan (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('KHV','Kinh in Ho Chi Minh City, Vietnam (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('LWK','Luhya in Webuye, Kenya (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('MSL','Mende in Sierra Leone (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('MXL','Mexican Ancestry in Los Angeles, California (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('PEL','Peruvian in Lima, Peru (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('PJL','Punjabi in Lahore,Pakistan (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('PUR','Puerto Rican in Puerto Rico (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('STU','Sri Lankan Tamil in the UK (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('TSI','Toscani in Italy (from 1000G)');\n");
		fw.append("INSERT INTO `populations` (`population`,`population_description`) VALUES ('YRI','Yoruba in Ibadan, Nigeria (from 1000G)');\n");
		return fw;
	}
	
	public static StringBuilder createFields(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `fields`;\n");
		fw.append("CREATE TABLE `fields` (\n");
		fw.append("  `field` VARCHAR(255) NOT NULL COMMENT 'exact field name existing in table',\n");
		fw.append("  `table` VARCHAR(255) NOT NULL COMMENT 'table where field can be found. If table starts with _, the analysis name will be added before.',\n");
		fw.append("  `sql_datatype` VARCHAR(1000) NOT NULL COMMENT 'SQL datatype of field, use mainly for generating SQL of custom annotations',\n");
		fw.append("  `json` VARCHAR(255) NOT NULL COMMENT 'Path in a JSON export',\n");
		fw.append("  `description` TEXT NOT NULL COMMENT 'Full description of the field, showed in Highlander tooltips and exportations',\n");
		fw.append("  `annotation_code` VARCHAR(255) NOT NULL COMMENT 'Indicates which annotation source should be used (see Field.Annotation enum)',\n");
		fw.append("  `annotation_header` VARCHAR(255) NOT NULL COMMENT 'Information used by the annotator. Separate levels by | (e.g. INFO|QD). If the same annotation contains different values for reference and alternative alleles, you must add &A (for alternative field) when one value per alternative must be parsed (no value for reference), or &R (for reference field) and &RA (for alternative field) when one value for the reference and one value per alternative allele must be parsed.',\n");
		fw.append("  `source` VARCHAR(255) NOT NULL COMMENT 'Source of the annotation (software, database, ...) and version.',\n");
		fw.append("  `ordering` INT(10) UNSIGNED NOT NULL COMMENT 'field order in its category, for detail boxes and default columns ordering',\n");
		fw.append("  `category` VARCHAR(255) NOT NULL DEFAULT 'miscellaneous' COMMENT 'associated category, found in the field_categories table',\n");
		fw.append("  `size` VARCHAR(45) NOT NULL DEFAULT 'medium' COMMENT 'Width of the column in the GUI, defined in the field_sizes table',\n");
		fw.append("  `alignment` ENUM('LEFT','CENTER','RIGHT') NOT NULL DEFAULT 'CENTER' COMMENT 'Column alignment in the GUI',\n");
		fw.append("  PRIMARY KEY (`field`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder fillFields(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('project_id','projects','INT(10) UNSIGNED','READGROUPSETS','Sample unique identifier in an Highlander project','HIGHLANDER','','Highlander','1','sample details','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sequencing_target','projects','VARCHAR(255)','READGROUPSETS','Target of the sequencing project: WGS (Whole Genome Sequencing), WES (Whole Exome Sequencing), panel, RNAseq, ...','HIGHLANDER','','Highlander','2','sample details','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('platform','projects','VARCHAR(50)','READGROUPSETS','Platform on which the variant has been detected : SOLID_5500_XL (Life Technologies Solid 5500XL), SOLID_5500_WF (Life Technologies Solid 5500 with the WildFire upgrade), HISEQ_2000 (Illumina HiSeq 2000), HISEQ_2500 (Illumina HiSeq 2500), MISEQ (Illumina MiSeq), ION_TORRENT (Life Technologies Ion Torrent) or PROTON (Life Technologies Proton).','HIGHLANDER','','Highlander','3','sample details','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('outsourcing','projects','VARCHAR(50)','READGROUPSETS','Name of the exernal company where the sequencing has been outsourced.','HIGHLANDER','','Highlander','4','sample details','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('family','projects','VARCHAR(50)','READGROUPSETS','Each individual belonging to the same family must have the same \\'family\\' id.','HIGHLANDER','','Highlander','5','sample details','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('individual','projects','VARCHAR(50)','READGROUPSETS','Each sample belonging to the same individual have the same indiviual identifier.','HIGHLANDER','','Highlander','6','sample details','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sample','projects','VARCHAR(50)','READGROUPSETS','Sample identifier.','HIGHLANDER','','Highlander','7','sample details','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('index_case','projects','BOOLEAN','READGROUPSETS','Set to true for an individual when he or she is the index case of his or her family.','HIGHLANDER','','Highlander','8','sample details','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathology','pathologies','VARCHAR(1000)','READGROUPSETS','Pathology code.','HIGHLANDER','','Highlander','9','sample details','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathology_description','pathologies','TEXT','READGROUPSETS','Complete pathology description.','HIGHLANDER','','Highlander','10','sample details','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('population','populations','VARCHAR(1000)','READGROUPSETS','Population code.','HIGHLANDER','','Highlander','11','sample details','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('population_description','populations','TEXT','READGROUPSETS','Complete population description.','HIGHLANDER','','Highlander','12','sample details','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sample_type','projects','ENUM(\\'Germline\\',\\'Somatic\\')','READGROUPSETS','Sample type (Germline or Somatic).','HIGHLANDER','','Highlander','13','sample details','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('kit','projects','VARCHAR(50)','READGROUPSETS','Sequecing capture kit used if any.','HIGHLANDER','','Highlander','14','sample details','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('read_length','projects','VARCHAR(50)','READGROUPSETS','Read length.','HIGHLANDER','','Highlander','15','sample details','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('run_label','projects','VARCHAR(255)','READGROUPSETS','Name of the run (experiment number + date of processing + name)','HIGHLANDER','','Highlander','16','sample details','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_sample_id','_sample_annotations','BIGINT(20) UNSIGNED','INFO','Variant unique identifier in sample annotations.','HIGHLANDER','','Highlander','1','variant annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_static_id','_static_annotations','BIGINT(20) UNSIGNED','INFO','Variant unique identifier in static annotations.','HIGHLANDER','','Highlander','2','variant annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_custom_id','_custom_annotations','BIGINT(20) UNSIGNED','INFO','Variant unique identifier in custom annotations.','HIGHLANDER','','Highlander','3','variant annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('chr','_static_annotations','VARCHAR(50)','VARIANTS','Chromosome : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.','VCF','CHROM','VCF (depends on variant caller)','4','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pos','_static_annotations','INT','VARIANTS','Position : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.','VCF','POS','VCF (depends on variant caller)','5','variant annotations','medium','RIGHT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('length','_static_annotations','INT','VARIANTS','Length of the variant','COMPUTED','','Highlander','6','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('reference','_static_annotations','VARCHAR(300)','VARIANTS','The reference base that vary in the samples, or in the population in general. Note that reference is always given on the forward strand. For small indels the reference bases always include at least one base each (the base before the event). For structural variants, reference is always \\'N\\', and alternative give the type of SV between < >.','VCF','REF','VCF (depends on variant caller)','7','variant annotations','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('alternative','_static_annotations','VARCHAR(500)','VARIANTS','The alternative base that vary in the samples, or in the population in general. Note that alternative is always given on the forward strand. For indels the alternative bases always include at least one base each (the base before the event). For structural variants, reference is always \\'N\\', and alternative give the type of SV between < >.','VCF','ALT&A','VCF (depends on variant caller)','8','variant annotations','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_type','_static_annotations','ENUM(\\'SNV\\',\\'MNV\\',\\'INS\\',\\'DEL\\',\\'SV\\')','INFO','Type of variant : SNV (Single Nucleotide Variant), MNV (Multiple Nucleotides Variant), INS (Small Insertion), DEL (Small Deletion), SV (Structural Variant)','COMPUTED','','Highlander','9','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgvs_dna','_static_annotations','VARCHAR(200)','INFO','HGVS notation (DNA).','VCF','INFO|ANN','snpEff 4.1','11','variant annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgvs_protein','_static_annotations','VARCHAR(100)','INFO','HGVS notation (protein).','VCF','INFO|ANN','snpEff 4.1','12','variant annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgvs_dna_vep','_static_annotations','VARCHAR(200)','INFO','HGVS coding variant presentation from VEP','DBNSFP','chromosome_[chr]|HGVSc_VEP&;Ensembl_transcriptid','dbNSFP 4.1 (Gencode release 29/Ensembl 94, released October, 2018 (hg38))','13','variant annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgvs_protein_vep','_static_annotations','VARCHAR(100)','INFO','HGVS protein variant presentation from VEP','DBNSFP','chromosome_[chr]|HGVSp_VEP&;Ensembl_proteinid','dbNSFP 4.1 (Gencode release 29/Ensembl 94, released October, 2018 (hg38))','14','variant annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cds_strand','_static_annotations','VARCHAR(1)','INFO','coding sequence (CDS) strand (+ or -)','DBNSFP','chromosome_[chr]|cds_strand&;Ensembl_transcriptid','dbNSFP 4.1 (Gencode release 29/Ensembl 94, released October, 2018 (hg38))','15','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('refcodon','_static_annotations','VARCHAR(3)','INFO','reference codon','DBNSFP','chromosome_[chr]|refcodon&;Ensembl_transcriptid','dbNSFP 4.1 (Gencode release 29/Ensembl 94, released October, 2018 (hg38))','16','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('codonpos','_static_annotations','TINYINT','INFO','position on the codon (1, 2 or 3)','DBNSFP','chromosome_[chr]|codonpos&;Ensembl_transcriptid','dbNSFP 4.1 (Gencode release 29/Ensembl 94, released October, 2018 (hg38))','17','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('codon_degeneracy','_static_annotations','TINYINT','INFO','degenerate type (0, 2 or 3)','DBNSFP','chromosome_[chr]|codon_degeneracy','dbNSFP 4.1 (Gencode release 29/Ensembl 94, released October, 2018 (hg38))','18','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exon_intron_rank','_static_annotations','SMALLINT','INFO','Exon/Intron rank number out of total.','VCF','INFO|ANN','snpEff 4.1','19','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exon_intron_total','_static_annotations','SMALLINT','INFO','Total number of exons or introns.','VCF','INFO|ANN','snpEff 4.1','20','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cdna_pos','_static_annotations','MEDIUMINT','INFO','Position in cDNA (one based)','VCF','INFO|ANN','snpEff 4.1','21','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cdna_length','_static_annotations','MEDIUMINT','INFO','trancripts cDNA length (one based)','VCF','INFO|ANN','snpEff 4.1','22','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cds_pos','_static_annotations','MEDIUMINT','INFO','Position of coding bases (one based includes START and STOP codons)','VCF','INFO|ANN','snpEff 4.1','23','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cds_length','_static_annotations','MEDIUMINT','INFO','Number of coding bases (one based includes START and STOP codons)','VCF','INFO|ANN','snpEff 4.1','24','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('protein_pos','_static_annotations','MEDIUMINT','INFO','Position in the protein (one based, including START, but not STOP)','VCF','INFO|ANN','snpEff 4.1','25','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('protein_length','_static_annotations','MEDIUMINT','INFO','Number of amino acids (one based, including START, but not STOP)','VCF','INFO|ANN','snpEff 4.1','26','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_genes','_static_annotations','TINYINT','INFO','Number of genes found at this position. For the rare cases with more than one gene for a given position, remember that only one gene is recorded in the database, so the statistics for the other genes are wrong.','COMPUTED','','Highlander','27','variant annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_start','_custom_annotations','INT','INFO','Starting position of the structural variant in the chromosome','ANNOTSV','split|SV start','AnnotSV 2.5','100','variant annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_end','_custom_annotations','INT','INFO','Ending position of the structural variant in the chromosome','ANNOTSV','split|SV end','AnnotSV 2.5','101','variant annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_type','_custom_annotations','ENUM(\\'INS\\',\\'DEL\\',\\'DUP\\',\\'INV\\',\\'CNV\\',\\'BND\\',\\'LINE1\\',\\'SVA\\',\\'ALU\\')','INFO','Type of structural variant. DEL: Deletion relative to the reference. INS: Insertion of novel sequence relative to the reference. DUP: Region of elevated copy number relative to the reference. INV: Inversion of reference sequence. CNV: Copy number variable region (may be both deletion and duplication). BND: Breakend (e.g. gene fusions). ALU: Alu short interspersed repeat element. SVA: SINE-VNTR-Alu.  LINE1: long interspersed nuclear element-1.','ANNOTSV','split|SV type','AnnotSV 2.5','102','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cnv_nexons','_custom_annotations','INT','INFO','Number of exons included in this CNV','VCF','INFO|NEXONS','ExomeDepth','200','variant annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dbsnp_id','_static_annotations','VARCHAR(255)','INFO','The dbSNP rs identifier of the SNP, based on the contig : position of the call and whether a record exists at this site in dbSNP','VCF','ID','dbSNP 137','1','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cosmic_id','_static_annotations','VARCHAR(25)','INFO','Genomic mutation identifier (COSV) to indicate the definitive position of the variant on the genome. This identifier is trackable and stable between different versions of Cosmic.','COSMIC','mutant_export|genomic_mutation_id','Cosmic 92','50','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cosmic_id_legacy','_static_annotations','VARCHAR(25)','INFO','Legacy mutation identifier (COSM) that will represent existing COSM mutation identifiers in Cosmic.','COSMIC','mutant_export|legacy_mutation_id','Cosmic 92','51','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_id','_static_annotations','INT','INFO','clinvar variation ID','DBNSFP','chromosome_[chr]|clinvar_id','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','2','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_clnsig','_static_annotations','VARCHAR(100)','INFO','clinical significance by clinvar. Possible values: Benign, Likely_benign, Likely_pathogenic, Pathogenic, drug_response, histocompatibility. A negative score means the score is for the ref allele','DBNSFP','chromosome_[chr]|clinvar_clnsig','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','3','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_trait','_static_annotations','TEXT','INFO','the trait/disease the clinvar_clnsig referring to','DBNSFP','chromosome_[chr]|clinvar_trait','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','4','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_review','_static_annotations','VARCHAR(255)','INFO','ClinVar Review Status summary. Possible values:  no assertion criteria provided, criteria provided, single submitter, criteria provided, multiple submitters, no conflicts, reviewed by expert panel, practice guideline','DBNSFP','chromosome_[chr]|clinvar_review','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','5','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_hgvs','_static_annotations','VARCHAR(255)','INFO','variant in HGVS format','DBNSFP','chromosome_[chr]|clinvar_hgvs','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','6','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_var_source','_static_annotations','TEXT','INFO','source of the variant','DBNSFP','chromosome_[chr]|clinvar_var_source','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','7','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_MedGen_id','_static_annotations','VARCHAR(400)','INFO','MedGen ID of the trait/disease the clinvar_trait referring to','DBNSFP','chromosome_[chr]|clinvar_MedGen_id','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','8','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_OMIM_id','_static_annotations','VARCHAR(255)','INFO','OMIM ID of the trait/disease the clinvar_trait referring to','DBNSFP','chromosome_[chr]|clinvar_OMIM_id','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','9','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_Orphanet_id','_static_annotations','VARCHAR(255)','INFO','Orphanet ID of the trait/disease the clinvar_trait referring to','DBNSFP','chromosome_[chr]|clinvar_Orphanet_id','dbNSFP 4.1 (clinvar 20200609 (hg38) ftp://ftp.ncbi.nlm.nih.gov/pub/clinvar/vcf_GRCh38/)','10','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('Interpro_domain','_static_annotations','TEXT','INFO','domain or conserved site on which the variant locates. Domain annotations come from Interpro database. The number in the brackets following a specific domain is the count of times Interpro assigns the variant position to that domain, typically coming from different predicting databases. ','DBNSFP','chromosome_[chr]|Interpro_domain&;Ensembl_proteinid','dbNSFP 4.1 (Interpro v71 http://www.ebi.ac.uk/interpro/)','11','variant annotations (other DB)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('GTEx_V8_gene','_static_annotations','TEXT','INFO','target gene of the (significant) eQTL SNP','DBNSFP','chromosome_[chr]|GTEx_V8_gene','dbNSFP 4.1 (GTEx v8 https://www.gtexportal.org/home/datasets)','12','variant annotations (other DB)','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('GTEx_V8_tissue','_static_annotations','TEXT','INFO','tissue type of the expression data with which the eQTL/gene pair is detected','DBNSFP','chromosome_[chr]|GTEx_V8_tissue','dbNSFP 4.1 (GTEx v8 https://www.gtexportal.org/home/datasets)','13','variant annotations (other DB)','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('Geuvadis_eQTL_target_gene','_static_annotations','VARCHAR(255)','INFO','Ensembl gene ID of the eQTL associated with, from the Geuvadis project','DBNSFP','chromosome_[chr]|Geuvadis_eQTL_target_gene','dbNSFP 4.1 (Geuvadis https://www.ebi.ac.uk/Tools/geuvadis-das/)','14','variant annotations (other DB)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_ids','_custom_annotations','VARCHAR(500)','INFO','ClinVar ids','ALAMUT','','Alamut batch 1.4.2','100','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_origins','_custom_annotations','VARCHAR(500)','INFO','ClinVar origins. Possible values: germline, somatic, de novo, maternal, etc.','ALAMUT','','Alamut batch 1.4.2','101','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_methods','_custom_annotations','VARCHAR(500)','INFO','ClinVar methods. Possible values: clinical testing, research, literature only, etc','ALAMUT','','Alamut batch 1.4.2','102','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_clin_signifs','_custom_annotations','VARCHAR(500)','INFO','ClinVar clinical significances','ALAMUT','','Alamut batch 1.4.2','103','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_review_status','_custom_annotations','VARCHAR(500)','INFO','ClinVar review status. Number of stars (0-4).','ALAMUT','','Alamut batch 1.4.2','104','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinvar_phenotypes','_custom_annotations','VARCHAR(500)','INFO','ClinVar phenotypes','ALAMUT','','Alamut batch 1.4.2','105','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgmd_id','_custom_annotations','VARCHAR(255)','INFO','HGMD mutation id','ALAMUT','','Alamut batch 1.4.2','106','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgmd_phenotype','_custom_annotations','VARCHAR(500)','INFO','HGMD phenotype','ALAMUT','','Alamut batch 1.4.2','107','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgmd_pubmed_id','_custom_annotations','VARCHAR(255)','INFO','HGMD PubMed id','ALAMUT','','Alamut batch 1.4.2','108','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hgmd_sub_category','_custom_annotations','VARCHAR(500)','INFO','HGMD sub-category (DP, DFP, FP, FTV, DM?, DM )','ALAMUT','','Alamut batch 1.4.2','109','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('promoters','_custom_annotations','TEXT','INFO','List of the genes whose promoters are overlapped by the SV. The contribution of SV affecting promoters to disease etiology is well established. Affecting possibly gene expression, understanding the consequences of these regulatory variants on the human transcriptome remains a major challenge. AnnotSV reports the list of the genes whose promoters are overlapped by the SV. Promoters are defined by default as 500 bp upstream from the transcription start sites. A promoter is reported (1) if the SV overlaps at least 70% of this promoter or (2) if the SV is an insertion included in the promoter.','ANNOTSV','split|promoters','AnnotSV 2.5','200','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dbvar_event','_custom_annotations','VARCHAR(100)','INFO','dbVar NR SV event types (e.g. deletion, duplication). dbVar is the NCBI\\'s database of genomic structural variation collecting insertion/deletion/duplications/mobile elements insertions/translocations data from large initiative including also medically relevant variations. A non-redundant version of the database, dbVar non-redundant SV (NR SV) datasets include more than 2.2 million deletions, 1.1 million insertions, and 300,000 duplications. These data are aggregated from over 150 studies including 1000 Genomes Phase 3, Simons Genome Diversity Project, ClinGen, ExAC, and others. By selecting pathogenic SV records from the dbVar NR SV database, AnnotSV obtained a clinically relevant human SV dataset. A pathogenic SV is reported only if the SV overlaps at least 70% of this pathogenic SV.','ANNOTSV','split|dbVar_event','AnnotSV 2.5 (NCBI dbVar 2020-06-29)','210','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dbvar_variant','_custom_annotations','TEXT','INFO','dbVar NR SV accession (e.g. nssv1415016). dbVar is the NCBI\\'s database of genomic structural variation collecting insertion/deletion/duplications/mobile elements insertions/translocations data from large initiative including also medically relevant variations. A non-redundant version of the database, dbVar non-redundant SV (NR SV) datasets include more than 2.2 million deletions, 1.1 million insertions, and 300,000 duplications. These data are aggregated from over 150 studies including 1000 Genomes Phase 3, Simons Genome Diversity Project, ClinGen, ExAC, and others. By selecting pathogenic SV records from the dbVar NR SV database, AnnotSV obtained a clinically relevant human SV dataset. A pathogenic SV is reported only if the SV overlaps at least 70% of this pathogenic SV.','ANNOTSV','split|dbVar_variant','AnnotSV 2.5 (NCBI dbVar 2020-06-29)','211','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dbvar_status','_custom_annotations','VARCHAR(100)','INFO','dbVar NR SV clinical assertion (e.g. pathogenic, likely pathogenic) . dbVar is the NCBI\\'s database of genomic structural variation collecting insertion/deletion/duplications/mobile elements insertions/translocations data from large initiative including also medically relevant variations. A non-redundant version of the database, dbVar non-redundant SV (NR SV) datasets include more than 2.2 million deletions, 1.1 million insertions, and 300,000 duplications. These data are aggregated from over 150 studies including 1000 Genomes Phase 3, Simons Genome Diversity Project, ClinGen, ExAC, and others. By selecting pathogenic SV records from the dbVar NR SV database, AnnotSV obtained a clinically relevant human SV dataset. A pathogenic SV is reported only if the SV overlaps at least 70% of this pathogenic SV.','ANNOTSV','split|dbVar_status','AnnotSV 2.5 (NCBI dbVar 2020-06-29)','212','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('tad_coordinates','_custom_annotations','TEXT','INFO','Coordinates of the TAD whose boundaries overlapped with the annotated SV (boundaries included in the coordinates). The spatial organization of the human genome helps to accommodate the DNA in the nucleus of a cell and plays an important role in the control of the gene expression. In this non-random organization, topologically associating domains (TAD) emerge as a fundamental structural unit able to separate domains and define boundaries. Disruption of these structures especially by SV can result in gene misexpression (Lupiáñez et al., 2016).','ANNOTSV','full|TADcoordinates','AnnotSV 2.5 (2017-10-24)','220','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('encode_experiments','_custom_annotations','TEXT','INFO','ENCODE experiments used to define the TAD. The spatial organization of the human genome helps to accommodate the DNA in the nucleus of a cell and plays an important role in the control of the gene expression. In this non-random organization, topologically associating domains (TAD) emerge as a fundamental structural unit able to separate domains and define boundaries. Disruption of these structures especially by SV can result in gene misexpression (Lupiáñez et al., 2016).','ANNOTSV','full|ENCODEexperiments','AnnotSV 2.5 (2017-10-24)','221','variant annotations (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cosmic_cnv_id','_custom_annotations','TEXT','INFO','COSMIC identifier. COSMIC (Tate et al., 2019), the Catalogue Of Somatic Mutations In Cancer, is the world\\'s largest and most comprehensive resource for exploring the impact of somatic mutations in human cancer.','ANNOTSV','split|COSMIC_ID','AnnotSV 2.5 (COSMIC 92)','230','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cosmic_cnv_mut_typ','_custom_annotations','TEXT','INFO','Defined as Gain or Loss. COSMIC (Tate et al., 2019), the Catalogue Of Somatic Mutations In Cancer, is the world\\'s largest and most comprehensive resource for exploring the impact of somatic mutations in human cancer.','ANNOTSV','split|COSMIC_MUT_TYP','AnnotSV 2.5 (COSMIC 92)','231','variant annotations (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('short_tandem_repeat','_sample_annotations','BOOLEAN','INFO','This flag is set when variant is a short tandem repeat.','VCF','INFO|STR','GATK 3.3','2','variant annotations (variant vicinity)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeat_unit','_sample_annotations','VARCHAR(255)','INFO','Tandem repeat unit (bases).','VCF','INFO|RU','GATK 3.3','3','variant annotations (variant vicinity)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeat_number_ref','_sample_annotations','SMALLINT','INFO','Number of times tandem repeat unit is repeated for the reference allele.','VCF','INFO|RPA&R','GATK 3.3','4','variant annotations (variant vicinity)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeat_number_alt','_sample_annotations','SMALLINT','INFO','Number of times tandem repeat unit is repeated for the alternative allele.','VCF','INFO|RPA&RA','GATK 3.3','5','variant annotations (variant vicinity)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_splice_effect','_custom_annotations','VARCHAR(255)','INFO','Splicing effect in variant vicinity (New Donor Site, New Acceptor Site, Cryptic Donor Strongly Activated, Cryptic Donor Weakly Activated, Cryptic Acceptor Strongly Activated, Cryptic Acceptor Weakly Activated)','ALAMUT','','Alamut batch 1.4.2','10','variant annotations (variant vicinity)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gc_content_left','_custom_annotations','TEXT','INFO','GC content around the left SV breakpoint (+/- 100bp). GC content (as well as repeated sequences, DNA sequence identity and concentration of the PRDM9 homologous recombination hotspot motif 5\\'-CCNCCNTNNCCNC-3\\') is positively correlated with the frequency of nonallelic homologous recombination (NAHR). Indeed, NAHR hot spots have a significantly higher GC content (Dittwald et al, 2013). This information with others could help identifying a novel locus for recurrent NAHR-mediated SV.','ANNOTSV','full|GCcontent_left','AnnotSV 2.5','100','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gc_content_right','_custom_annotations','TEXT','INFO','GC content around the right SV breakpoint (+/- 100bp). GC content (as well as repeated sequences, DNA sequence identity and concentration of the PRDM9 homologous recombination hotspot motif 5\\'-CCNCCNTNNCCNC-3\\') is positively correlated with the frequency of nonallelic homologous recombination (NAHR). Indeed, NAHR hot spots have a significantly higher GC content (Dittwald et al, 2013). This information with others could help identifying a novel locus for recurrent NAHR-mediated SV.','ANNOTSV','full|GCcontent_right','AnnotSV 2.5','101','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeats_coord_left','_custom_annotations','TEXT','INFO','Repeats coordinates around the left SV breakpoint (+/- 100bp). Repeated sequences (as well as GC content, DNA sequence identity and presence of the PRDM9 homologous recombination hotspot motif 5\\'-CCNCCNTNNCCNC-3\\') play a major role in the formation of structural variants.','ANNOTSV','full|Repeats_coord_left','AnnotSV 2.5 (2020-07-16)','102','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeats_type_left','_custom_annotations','TEXT','INFO','Repeats type around the left SV breakpoint (+/- 100bp) e.g. AluSp, L2b, L1PA2, LTR12C, SVA_D, etc. Repeated sequences (as well as GC content, DNA sequence identity and presence of the PRDM9 homologous recombination hotspot motif 5\\'-CCNCCNTNNCCNC-3\\') play a major role in the formation of structural variants.','ANNOTSV','full|Repeats_type_left','AnnotSV 2.5 (2020-07-16)','103','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeats_coord_right','_custom_annotations','TEXT','INFO','Repeats coordinates around the right SV breakpoint (+/- 100bp). Repeated sequences (as well as GC content, DNA sequence identity and presence of the PRDM9 homologous recombination hotspot motif 5\\'-CCNCCNTNNCCNC-3\\') play a major role in the formation of structural variants.','ANNOTSV','full|Repeats_coord_right','AnnotSV 2.5 (2020-07-16)','104','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('repeats_type_right','_custom_annotations','TEXT','INFO','Repeats type around the right SV breakpoint (+/- 100bp) e.g. AluSp, L2b, L1PA2, LTR12C, SVA_D, etc. Repeated sequences (as well as GC content, DNA sequence identity and presence of the PRDM9 homologous recombination hotspot motif 5\\'-CCNCCNTNNCCNC-3\\') play a major role in the formation of structural variants.','ANNOTSV','full|Repeats_type_right','AnnotSV 2.5 (2020-07-16)','105','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('nearest_ss_dist','_custom_annotations','INT','INFO','Absolute distance to nearest splice site after considering exonic and intronic SV breakpoints','ANNOTSV','split|distNearestSS','AnnotSV 2.5 (Ensembl 2020-07-13)','110','variant annotations (variant vicinity)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('nearest_ss_type','_custom_annotations','VARCHAR(2)','INFO','Nearest splice site type: 5\\' (donor) or 3\\' (acceptor)','ANNOTSV','split|nearestSStype','AnnotSV 2.5 (Ensembl 2020-07-13)','111','variant annotations (variant vicinity)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('seg_dup_left','_custom_annotations','TEXT','INFO','Segmental Duplication regions coordinates around the left SV breakpoint (+/- 100bp). Segmental duplications are large duplications of >1Kb of non-RepeatMasked sequence and >= 90% identity normally present in the human genome. They are associated with the non-allelic homologous recombination mechanisms (NAHR). Homologous recombination is thought to be a classical mechanism for promoting either genetic diversity or genomic disease. Moreover, these regions might also cause issues for read-depth SV detection methods. Reads located in a segmental duplication can perfectly map onto two or more genomic positions and lead to a coverage overestimation at these positions. The SV breakpoints overlap with segmental duplications can therefore give a clue to explain the SV mechanism, but also a clue to filter out false positives in case of read-depth SV detection methods.','ANNOTSV','full|SegDup_left','AnnotSV 2.5','112','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('seg_dup_right','_custom_annotations','TEXT','INFO','Segmental Duplication regions coordinates around the right SV breakpoint (+/- 100bp). Segmental duplications are large duplications of >1Kb of non-RepeatMasked sequence and >= 90% identity normally present in the human genome. They are associated with the non-allelic homologous recombination mechanisms (NAHR). Homologous recombination is thought to be a classical mechanism for promoting either genetic diversity or genomic disease. Moreover, these regions might also cause issues for read-depth SV detection methods. Reads located in a segmental duplication can perfectly map onto two or more genomic positions and lead to a coverage overestimation at these positions. The SV breakpoints overlap with segmental duplications can therefore give a clue to explain the SV mechanism, but also a clue to filter out false positives in case of read-depth SV detection methods.','ANNOTSV','full|SegDup_right','AnnotSV 2.5','113','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gap_left','_custom_annotations','TEXT','INFO','Gap regions coordinates around the left SV breakpoint (+/- 100bp). No read can be mapped at GAP positions in the reference sequence. Surprisingly, even if these regions should not be taken into account by callers, some tools call homozygous deletions (false positives) at these regions.','ANNOTSV','full|Gap_left','AnnotSV 2.5 (GAP 2020-10-08)','114','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gap_right','_custom_annotations','TEXT','INFO','Gap regions coordinates around the right SV breakpoint (+/- 100bp). No read can be mapped at GAP positions in the reference sequence. Surprisingly, even if these regions should not be taken into account by callers, some tools call homozygous deletions (false positives) at these regions.','ANNOTSV','full|Gap_right','AnnotSV 2.5 (GAP 2020-10-08)','115','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('encode_blacklist_left','_custom_annotations','VARCHAR(50)','INFO','ENCODE blacklist regions coordinates around the left SV breakpoint (+/- 100bp). The human ENCODE blacklist is a comprehensive set of regions that have anomalous, unstructured, or high signal in next-generation sequencing experiments independent of cell line or experiment. The removal of the ENCODE blacklist is an essential quality measure when analyzing functional genomics data.','ANNOTSV','full|ENCODE_blacklist_left','AnnotSV 2.5 (ENCODE blacklist v2 2018)','120','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('encode_blacklist_characteristics_left','_custom_annotations','VARCHAR(50)','INFO','ENCODE blacklist regions characteristics around the left SV breakpoint (+/- 100bp). The human ENCODE blacklist is a comprehensive set of regions that have anomalous, unstructured, or high signal in next-generation sequencing experiments independent of cell line or experiment. The removal of the ENCODE blacklist is an essential quality measure when analyzing functional genomics data.','ANNOTSV','full|ENCODE_blacklist_characteristics_left','AnnotSV 2.5 (ENCODE blacklist v2 2018)','121','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('encode_blacklist_right','_custom_annotations','VARCHAR(50)','INFO','ENCODE blacklist regions coordinates around the right SV breakpoint (+/- 100bp). The human ENCODE blacklist is a comprehensive set of regions that have anomalous, unstructured, or high signal in next-generation sequencing experiments independent of cell line or experiment. The removal of the ENCODE blacklist is an essential quality measure when analyzing functional genomics data.','ANNOTSV','full|ENCODE_blacklist_right','AnnotSV 2.5 (ENCODE blacklist v2 2018)','122','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('encode_blacklist_characteristics_right','_custom_annotations','VARCHAR(50)','INFO','ENCODE blacklist regions characteristics around the right SV breakpoint (+/- 100bp). The human ENCODE blacklist is a comprehensive set of regions that have anomalous, unstructured, or high signal in next-generation sequencing experiments independent of cell line or experiment. The removal of the ENCODE blacklist is an essential quality measure when analyzing functional genomics data.','ANNOTSV','full|ENCODE_blacklist_characteristics_right','AnnotSV 2.5 (ENCODE blacklist v2 2018)','123','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genehancer_elite','_custom_annotations','TEXT','INFO','List of the GeneHancer (GH) IDs for each elite element overlapped with the annotated SV. Enhancer and promoter genomic aberrations have been reported to underlie genetic diseases. A current challenge when performing medically oriented next generation sequencing is a capacity to tackle regulatory elements affected by SVs. For this aim we include GeneHancer (Fishilevich et al., 2017), an integrated compendium of human promoters, enhancers and their inferred target genes.','ANNOTSV','split|GHid_elite','AnnotSV 2.5 (GeneHancer)','150','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genehancer_not_elite','_custom_annotations','TEXT','INFO','List of the GeneHancer (GH) IDs for each not elite element overlapped with the annotated SV. Enhancer and promoter genomic aberrations have been reported to underlie genetic diseases. A current challenge when performing medically oriented next generation sequencing is a capacity to tackle regulatory elements affected by SVs. For this aim we include GeneHancer (Fishilevich et al., 2017), an integrated compendium of human promoters, enhancers and their inferred target genes.','ANNOTSV','split|GHid_not_elite','AnnotSV 2.5 (GeneHancer)','151','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genehancer_type','_custom_annotations','TEXT','INFO','Type of the overlapped GH element(s) (Enhancer or Promoter). Enhancer and promoter genomic aberrations have been reported to underlie genetic diseases. A current challenge when performing medically oriented next generation sequencing is a capacity to tackle regulatory elements affected by SVs. For this aim we include GeneHancer (Fishilevich et al., 2017), an integrated compendium of human promoters, enhancers and their inferred target genes.','ANNOTSV','split|GHtype','AnnotSV 2.5 (GeneHancer)','152','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genehancer_gene_elite','_custom_annotations','TEXT','INFO','List of the genes for which an elite element-gene relation was identified. Enhancer and promoter genomic aberrations have been reported to underlie genetic diseases. A current challenge when performing medically oriented next generation sequencing is a capacity to tackle regulatory elements affected by SVs. For this aim we include GeneHancer (Fishilevich et al., 2017), an integrated compendium of human promoters, enhancers and their inferred target genes.','ANNOTSV','split|GHgene_elite','AnnotSV 2.5 (GeneHancer)','153','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genehancer_gene_not_elite','_custom_annotations','TEXT','INFO','List of the genes for which a not elite element-gene relation was identified. Enhancer and promoter genomic aberrations have been reported to underlie genetic diseases. A current challenge when performing medically oriented next generation sequencing is a capacity to tackle regulatory elements affected by SVs. For this aim we include GeneHancer (Fishilevich et al., 2017), an integrated compendium of human promoters, enhancers and their inferred target genes.','ANNOTSV','split|GHgene_not_elite','AnnotSV 2.5 (GeneHancer)','154','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genehancer_tissue','_custom_annotations','TEXT','INFO','List of the tissues in which elements were identified. Enhancer and promoter genomic aberrations have been reported to underlie genetic diseases. A current challenge when performing medically oriented next generation sequencing is a capacity to tackle regulatory elements affected by SVs. For this aim we include GeneHancer (Fishilevich et al., 2017), an integrated compendium of human promoters, enhancers and their inferred target genes.','ANNOTSV','split|GHtissue','AnnotSV 2.5 (GeneHancer)','155','variant annotations (variant vicinity)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('filters','_sample_annotations','VARCHAR(255)','VARIANTS','If filtering was performed on the VCF by the pipeline, this field will contain the name of the filter(s) that the variant DIDN\\'T pass, or PASS if the variant passed all filters. e.g. if this field show \\\"lowQual,GATKStandard\\\" it means that this variant doesn\\'t pass \\\"lowQual\\\" and \\\"GATKStandard\\\" filters. If this field is empty or equal to \\'-\\', it means that no filtering was performed by the pipeline. So this field depends heavily on the variant caller used and the pipeline implementation. The following description is for GATK variant caller only: In a perfect world, the Confidence field would be based on a complete model for all error modes present in the data used to call. Unfortunately, we are still far from this ideal, and we have to use orthogonal approaches to determine which called sites, independent of Confidence, are machine errors and which are real variants. Whatever approach is used to filter the variants, the VCFs produced by the GATK carry both the PASSing filter records (the ones that are good have PASS in their FILTER field) as well as those that fail (the filter field is anything but PASS or a dot). A variant won\\'t pass GATK Standard filter if it met at least one of those conditions: - variant_confidence_by_depth < 2. - fisher_strand_bias > 60. - mapping_quality < 40. - haplotype_score > 13. - rank_sum_test_read_mapping_qual < -12.5. - rank_sum_test_read_pos_bias < -8.','VCF','FILTER','VCF (depends on variant caller)','1','confidence','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('confidence','_sample_annotations','DOUBLE','VARIANTS','This field contains the value of the QUAL field from the VCF. So it completely depends on the variant caller used to generated the data, but is always a measure of the quality of the call. As it\\'s generally a score computed with a maximum likehood approach, you should only compare confidence between variants of the SAME sample (when comparing 2 variants of the same sample, a higher score means that the variant is more probable to be true than the other). For GATK specifically, confidence is the Phred scaled probability of probability that reference/alternative polymorphism exists at this site given sequencing data. Because the Phred scale is -10 * log(1-p), a value of 10 indicates a 1 in 10 chance of error, while a 100 indicates a 1 in 10^10 chance. The GATK values can grow very large when lots of NGS data is used to call.','VCF','QUAL','VCF (depends on variant caller)','2','confidence','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_confidence_by_depth','_sample_annotations','DOUBLE','INFO','Variant confidence (given as (AB+BB)/AA from the likelihoods for genotypes) / unfiltered depth. Low scores are indicative of false positive calls and artifacts.','VCF','INFO|QD','GATK 3.3','3','confidence','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fisher_strand_bias','_sample_annotations','DOUBLE','INFO','Phred-scaled p-value using Fisher\\'s exact test to detect strand bias.','VCF','INFO|FS','GATK 3.3','4','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mapping_quality','_sample_annotations','DOUBLE','INFO','RMS Mapping Quality.','VCF','INFO|MQ','GATK 3.3','5','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('symmetric_odds_ratio','_sample_annotations','DOUBLE','INFO','Symmetric Odds Ratio of 2x2 contingency table to detect strand bias','VCF','INFO|SOR','GATK 4.2','6','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('haplotype_score','_sample_annotations','DOUBLE','INFO','Consistency of the site with at most two segregating haplotypes.','VCF','INFO|HaplotypeScore','GATK 3.3','10','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rank_sum_test_read_mapping_qual','_sample_annotations','DOUBLE','INFO','Z-score From Wilcoxon rank sum test of Alt vs. Ref read mapping qualities','VCF','INFO|MQRankSum','GATK 3.3','7','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rank_sum_test_read_pos_bias','_sample_annotations','DOUBLE','INFO','Z-score from Wilcoxon rank sum test of Alt vs. Ref read position bias','VCF','INFO|ReadPosRankSum','GATK 3.3','8','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rank_sum_test_base_qual','_sample_annotations','DOUBLE','INFO','Z-score from Wilcoxon rank sum test of alternative Vs. reference base qualities','VCF','INFO|BaseQRankSum','GATK 3.3','9','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('event_count','_custom_annotations','INT','INFO','Number of events in this haplotype','VCF','INFO|ECNT','Mutect 2.2','101','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('haplotype_count','_custom_annotations','INT','INFO','Number of haplotypes that support this variant','VCF','INFO|HCNT','Mutect 2','102','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('max_events_distance','_custom_annotations','INT','INFO','Maximum distance between events in this active region','VCF','INFO|MAX_ED','Mutect 2','103','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('min_events_distance','_custom_annotations','INT','INFO','Minimum distance between events in this active region','VCF','INFO|MIN_ED','Mutect 2','104','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('normal_lod_score','_custom_annotations','DOUBLE','INFO','Normal log 10 likelihood ratio of diploid het or hom alt genotypes','VCF','INFO|NLOD&A','Mutect 2.2','105','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('tumor_lod_score','_custom_annotations','DOUBLE','INFO','Log 10 likelihood ratio score of variant existing versus not existing','VCF','INFO|TLOD&A','Mutect 2.2','106','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pon_count','_custom_annotations','INT','INFO','Site found in panel of normals','VCF','INFO|PON','Mutect 2.2','107','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allele_fraction_tumor','_custom_annotations','DOUBLE','INFO','Allele fraction of the event in the tumor','VCF','FORMAT|AF','Mutect 2','108','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fraction_oxog','_custom_annotations','DOUBLE','INFO','Fraction of alt reads indicating OxoG error','VCF','FORMAT|FOXOG','Mutect 2','109','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('alternative_F1R2','_custom_annotations','INT','INFO','Count of reads in F1R2 pair orientation supporting the alternate allele','VCF','FORMAT|F1R2&RA','Mutect 2.2','110','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('alternative_F2R1','_custom_annotations','INT','INFO','Count of reads in F2R1 pair orientation supporting the alternate allele','VCF','FORMAT|F2R1&RA','Mutect 2.2','111','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('reference_F1R2','_custom_annotations','INT','INFO','Count of reads in F1R2 pair orientation supporting the reference allele','VCF','FORMAT|F1R2&R','Mutect 2.2','112','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('reference_F2R1','_custom_annotations','INT','INFO','Count of reads in F2R1 pair orientation supporting the reference allele','VCF','FORMAT|F2R1&R','Mutect 2.2','113','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phasing_haplotype','_custom_annotations','VARCHAR(1000)','INFO','Physical phasing haplotype information, describing how the alternate alleles are phased in relation to one another','VCF','FORMAT|PGT','Mutect 2','114','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phasing_id','_custom_annotations','VARCHAR(1000)','INFO','Physical phasing ID information, where each unique ID within a given sample (but not across samples) connects records within a phasing group','VCF','FORMAT|PID','Mutect 2','115','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('quality_score_sum_ref','_custom_annotations','INT','INFO','Sum of base quality scores for reference allele','VCF','FORMAT|QSS&R','Mutect 2','116','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('quality_score_sum_alt','_custom_annotations','INT','INFO','Sum of base quality scores for alternative allele','VCF','FORMAT|QSS&RA','Mutect 2','117','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('unique_alt_read_count','_custom_annotations','INT','INFO','Number of reads with unique start and mate end positions for each alt at a variant site','VCF','INFO|AS_UNIQ_ALT_READ_COUNT&A','Mutect 2.2','118','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('contamination_quality','_custom_annotations','DOUBLE','INFO','Phred-scaled qualities that alt allele are not due to contamination','VCF','INFO|CONTQ','Mutect 2.2','119','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_quality','_custom_annotations','INT','INFO','Phred-scaled quality that alt alleles are not germline variants','VCF','INFO|GERMQ','Mutect 2.2','120','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_base_quality_ref','_custom_annotations','INT','INFO','Median base quality','VCF','INFO|MBQ&R','Mutect 2.2','121','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_base_quality_alt','_custom_annotations','INT','INFO','Median base quality','VCF','INFO|MBQ&RA','Mutect 2.2','122','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_fragment_length_ref','_custom_annotations','INT','INFO','Median fragment length','VCF','INFO|MFRL&R','Mutect 2.2','123','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_fragment_length_alt','_custom_annotations','INT','INFO','Median fragment length','VCF','INFO|MFRL&RA','Mutect 2.2','124','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_mapping_quality_ref','_custom_annotations','INT','INFO','Median mapping quality','VCF','INFO|MMQ&R','Mutect 2.2','125','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_mapping_quality_alt','_custom_annotations','INT','INFO','Median mapping quality','VCF','INFO|MMQ&RA','Mutect 2.2','126','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('median_pos','_custom_annotations','INT','INFO','Median distance from end of read','VCF','INFO|MPOS&A','Mutect 2.2','127','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('neg_artifact_lod','_custom_annotations','DOUBLE','INFO','Negative log 10 odds of artifact in normal with same allele fraction as tumor','VCF','INFO|NALOD&A','Mutect 2.2','128','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('n_count','_custom_annotations','INT','INFO','Count of N bases in the pileup','VCF','INFO|NCount','Mutect 2.2','129','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('original_contig_match','_custom_annotations','INT','INFO','Number of alt reads whose original alignment doesn\\'t match the current contig.','VCF','INFO|OCM','Mutect 2.2','130','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pop_af','_custom_annotations','DOUBLE','INFO','Negative log 10 population allele frequencies of alt alleles','VCF','INFO|POPAF','Mutect 2.2','131','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('read_orientation_quality','_custom_annotations','DOUBLE','INFO','Phred-scaled qualities that alt allele are not due to read orientation artifact','VCF','INFO|ROQ','Mutect 2.2','132','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sequencing_quality','_custom_annotations','INT','INFO','Phred-scaled quality that alt alleles are not sequencing errors','VCF','INFO|SEQQ','Mutect 2.2','133','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('strand_bias_quality','_custom_annotations','INT','INFO','Phred-scaled quality of strand bias artifact','VCF','INFO|STRANDQ','Mutect 2.2','134','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('str_quality','_custom_annotations','INT','INFO','Phred-scaled quality that alt alleles in STRs are not polymerase slippage errors','VCF','INFO|STRQ','Mutect 2.2','135','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_messy_reads_pval','_custom_annotations','DOUBLE','CALLS','Tests if mutant reads contain more alternative alleles than wildtype reads (chi square p-value)','FALSEPOSITIVEEXAMINER','','Highlander','201','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_messy_reads_pred','_custom_annotations','ENUM(\\'SIGNIFICANT\\',\\'NON_SIGNIFICANT\\')','CALLS','Tests if mutant reads contain more alternative alleles than wildtype reads (SIGNIFICANT: p-value < 0.01)','FALSEPOSITIVEEXAMINER','','Highlander','202','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_messy_end_prop','_custom_annotations','DOUBLE','CALLS','Percentage of mutant reads with the variant at the extremity or near messy read-extremity','FALSEPOSITIVEEXAMINER','','Highlander','203','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_messy_end_pred','_custom_annotations','ENUM(\\'SIGNIFICANT\\',\\'NON_SIGNIFICANT\\')','CALLS','SIGNIFICANT if more than 60% of mutant reads have the variant at an extremity or near messy read-extremity','FALSEPOSITIVEEXAMINER','','Highlander','204','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_phred_score_mean','_custom_annotations','DOUBLE','CALLS','Mean of the base quality scores for the variant','FALSEPOSITIVEEXAMINER','','Highlander','205','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_phred_score_median','_custom_annotations','DOUBLE','CALLS','Median of the base quality scores for the variant','FALSEPOSITIVEEXAMINER','','Highlander','206','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_phred_score_prop','_custom_annotations','DOUBLE','CALLS','Percentage of mutant reads with low base quality scores','FALSEPOSITIVEEXAMINER','','Highlander','207','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_phred_score_pred','_custom_annotations','ENUM(\\'SIGNIFICANT\\',\\'NON_SIGNIFICANT\\')','CALLS','SIGNIFICANT if test_low_phred_score_mean < 23, or test_low_phred_score_median < 23, or at least a third of mutant reads with phred score < 20 for the variant','FALSEPOSITIVEEXAMINER','','Highlander','208','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_mapqv_value_mean','_custom_annotations','DOUBLE','CALLS','Mean of the mapping quality scores of the mutant reads','FALSEPOSITIVEEXAMINER','','Highlander','209','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_mapqv_value_median','_custom_annotations','DOUBLE','CALLS','Median of the mapping quality scores of the mutant reads','FALSEPOSITIVEEXAMINER','','Highlander','210','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_mapqv_value_prop','_custom_annotations','DOUBLE','CALLS','Percentage of mutant reads with low mapping quality scores','FALSEPOSITIVEEXAMINER','','Highlander','211','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_low_mapqv_value_pred','_custom_annotations','ENUM(\\'SIGNIFICANT\\',\\'NON_SIGNIFICANT\\')','CALLS','SIGNIFICANT if test_low_mapqv_value_mean < 40, or test_low_mapqv_value_median < 40, or at least a third of mutant reads with MapQV < 30','FALSEPOSITIVEEXAMINER','','Highlander','212','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_strand_bias_pval','_custom_annotations','DOUBLE','CALLS','Tests if mutant reads have greater strand bias than wildtype reads (chi square p-value)','FALSEPOSITIVEEXAMINER','','Highlander','213','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_strand_bias_pred','_custom_annotations','ENUM(\\'SIGNIFICANT\\',\\'NON_SIGNIFICANT\\')','CALLS','Tests if mutant reads have greater strand bias than wildtype reads (SIGNIFICANT: p-value < 0.01)','FALSEPOSITIVEEXAMINER','','Highlander','214','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_under_influence_of_homopolymer','_custom_annotations','BOOLEAN','CALLS','TRUE if the variant is within or near (up to 3 bases from) a homopolymer','FALSEPOSITIVEEXAMINER','','Highlander','215','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_likely_caused_by_homopolymer','_custom_annotations','BOOLEAN','CALLS','TRUE if the variant may be an artifact caused by a homopolymer','FALSEPOSITIVEEXAMINER','','Highlander','216','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_number_of_alternatives','_custom_annotations','INT','CALLS','The number of alternatives at the variant position (including the variant)','FALSEPOSITIVEEXAMINER','','Highlander','217','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_not_in_all_amplicons','_custom_annotations','BOOLEAN','CALLS','TRUE if the variant is not in all amplicons (blocks)','FALSEPOSITIVEEXAMINER','','Highlander','218','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('test_in_repeat','_custom_annotations','BOOLEAN','CALLS','TRUE if the variant is present in a non-homopolymeric repeat of 2-5 bases that occurs 3 or more times','FALSEPOSITIVEEXAMINER','','Highlander','219','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_hom_overlap','_custom_annotations','INT','INFO','Number of homozygous SNV/indel which are presents between start_intersect_tx and end_intersect_tx. These annotations can be used by the user to filter out false positive SV calls or to confirm events as following: - Homozygous deletion can be identified as a false positive by noting the presence of SNV/indel called at the predicted locus of the deletion in a sample. - Heterozygous deletion can be identified as a false positive by noting the presence of heterozygous SNV/indel called at the predicted locus of the deletion in a sample. If no heterozygous SNV/indel are presents, the heterozygous deletion can be confirmed by reporting the presence of homozygous SNV/indel at that locus in the sample.','ANNOTSV','split|#hom([sample])','AnnotSV 2.5','300','confidence','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_het_overlap','_custom_annotations','INT','INFO','Number of heterozygous SNV/indel which are presents between start_intersect_tx and end_intersect_tx. These annotations can be used by the user to filter out false positive SV calls or to confirm events as following: - Homozygous deletion can be identified as a false positive by noting the presence of SNV/indel called at the predicted locus of the deletion in a sample. - Heterozygous deletion can be identified as a false positive by noting the presence of heterozygous SNV/indel called at the predicted locus of the deletion in a sample. If no heterozygous SNV/indel are presents, the heterozygous deletion can be confirmed by reporting the presence of homozygous SNV/indel at that locus in the sample.','ANNOTSV','split|#htz([sample])','AnnotSV 2.5','301','confidence','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ratio_het_hom_overlap','_custom_annotations','DOUBLE','INFO','Ratio for QC filtering: num_het_overlap/num_hom_overlap. These annotations can be used by the user to filter out false positive SV calls or to confirm events as following: - Homozygous deletion can be identified as a false positive by noting the presence of SNV/indel called at the predicted locus of the deletion in a sample. - Heterozygous deletion can be identified as a false positive by noting the presence of heterozygous SNV/indel called at the predicted locus of the deletion in a sample. If no heterozygous SNV/indel are presents, the heterozygous deletion can be confirmed by reporting the presence of homozygous SNV/indel at that locus in the sample.','ANNOTSV','split|#htz/allHom([sample])','AnnotSV 2.5','302','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ratio_het_total_overlap','_custom_annotations','DOUBLE','INFO','Ratio for QC filtering: num_het_overlap/num_total_cohort. These annotations can be used by the user to filter out false positive SV calls or to confirm events as following: - Homozygous deletion can be identified as a false positive by noting the presence of SNV/indel called at the predicted locus of the deletion in a sample. - Heterozygous deletion can be identified as a false positive by noting the presence of heterozygous SNV/indel called at the predicted locus of the deletion in a sample. If no heterozygous SNV/indel are presents, the heterozygous deletion can be confirmed by reporting the presence of homozygous SNV/indel at that locus in the sample.','ANNOTSV','split|#htz/total(cohort)','AnnotSV 2.5','303','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_total_cohort','_custom_annotations','INT','INFO','Total count of SNV/indel called from all the samples of the cohort and present in the interval of the deletion. These annotations can be used by the user to filter out false positive SV calls or to confirm events as following: - Homozygous deletion can be identified as a false positive by noting the presence of SNV/indel called at the predicted locus of the deletion in a sample. - Heterozygous deletion can be identified as a false positive by noting the presence of heterozygous SNV/indel called at the predicted locus of the deletion in a sample. If no heterozygous SNV/indel are presents, the heterozygous deletion can be confirmed by reporting the presence of homozygous SNV/indel at that locus in the sample.','ANNOTSV','split|#total(cohort)','AnnotSV 2.5','304','confidence','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('compound_het','_custom_annotations','TEXT','INFO','List of heterozygous SNV/indel (reported with chrom_position) presents in the gene overlapped by the annotated SV. The user challenge in filtering variants for compound heterozygotes is to know whether the two heterozygous variants (the SNV/indel and the SV) are in cis or in trans. And when sequencing data of more than one family member is available, one can exclude certain variants based on rules of Mendelian inheritance (transmitted in a compound heterozygous mode from parents to the patient(s)).','ANNOTSV','split|compound-htz([sample])','AnnotSV 2.5','305','confidence','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cnv_read_ratio','_custom_annotations','DOUBLE','INFO','Number of reads observed (in this sample) divided by number of reads expected (in reference samples)','VCF','FORMAT|RATIO','ExomeDepth','310','confidence','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('read_depth','_sample_annotations','SMALLINT','CALLS','Approximate read depth. In GATK, reads with MQ=255 or with bad mates are filtered.','VCF','FORMAT|DP','VCF (depends on variant caller)','1','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mapping_quality_zero_reads','_sample_annotations','SMALLINT','INFO','Total mapping quality zero reads.','VCF','INFO|MQ0','GATK 3.3','2','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('downsampled','_sample_annotations','BOOLEAN','INFO','Were any of the samples downsampled because of too much coverage?','VCF','INFO|DS','GATK 3.3','3','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allele_num','_sample_annotations','TINYINT','INFO','Number of alleles found at this position : reference + number of alternative. Note that even if reference is not present, it is counted, so can spot easily tri-allelic cases when this value is equal to 3.','COMPUTED','','Highlander','4','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_depth_ref','_sample_annotations','SMALLINT','CALLS','This and Coverage are complementary fields that are two important ways of thinking about the depth of the data for this sample at this site. The Coverage field describe the total depth of reads that passed the Unified Genotypers internal quality control metrics (like MAPQ > 17, for example), whatever base was present in the read at this site. The allelic depths values (one for each of reference and alternative fields) is the count of all reads that carried with them the reference and alternative alleles. The reason for this distinction is that the coverage is in some sense reflective of the power I have to determine the genotype of the sample at this site, while the allelic depths tells me how many times I saw each of the reference and alternative alleles in the reads, free of any bias potentially introduced by filtering the reads.','VCF','FORMAT|AD','GATK 3.3','5','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_depth_alt','_sample_annotations','SMALLINT','CALLS','This and Coverage are complementary fields that are two important ways of thinking about the depth of the data for this sample at this site. The Coverage field describe the total depth of reads that passed the Unified Genotypers internal quality control metrics (like MAPQ > 17, for example), whatever base was present in the read at this site. The allelic depths values (one for each of reference and alternative fields) is the count of all reads that carried with them the reference and alternative alleles. The reason for this distinction is that the coverage is in some sense reflective of the power I have to determine the genotype of the sample at this site, while the allelic depths tells me how many times I saw each of the reference and alternative alleles in the reads, free of any bias potentially introduced by filtering the reads.','VCF','FORMAT|AD','GATK 3.3','6','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_depth_proportion_ref','_sample_annotations','DOUBLE','CALLS','Allelic depth proportion in regard of total coverage for the reference allele.','COMPUTED','','Highlander','7','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_depth_proportion_alt','_sample_annotations','DOUBLE','CALLS','Allelic depth proportion in regard of total coverage for the alternative allele.','COMPUTED','','Highlander','8','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_unique_starts_ref','_custom_annotations','SMALLINT','INFO','Allelic unique start positions for the reference allele.','VCF','FORMAT|AST&R','LifeScope 2.5','9','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_unique_starts_alt','_custom_annotations','SMALLINT','INFO','Allelic unique start positions for the alternative allele.','VCF','FORMAT|AST&RA','LifeScope 2.5','10','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_qv_ref','_custom_annotations','TINYINT','INFO','Allelic average base qv for the reference allele.','VCF','FORMAT|AMQV&R','LifeScope 2.5','11','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('allelic_qv_alt','_custom_annotations','TINYINT','INFO','Allelic average base qv for the alternative allele.','VCF','FORMAT|AMQV&RA','LifeScope 2.5','12','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mle_allele_count','_sample_annotations','SMALLINT','INFO','Maximum likelihood expectation (MLE) for the allele counts.','VCF','INFO|MLEAC&A','GATK 3.3','13','genotype','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mle_allele_frequency','_sample_annotations','DOUBLE','INFO','Maximum likelihood expectation (MLE) for the allele frequency.','VCF','INFO|MLEAF&A','GATK 3.3','14','genotype','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('zygosity','_sample_annotations','ENUM(\\'Homozygous\\',\\'Heterozygous\\')','CALLS','Is this variant heterozygous or homozygous (alternative). Note that homozygous reference variants are NOT present in Highlander. This field value completely depends on how the variant caller infers it, and you can have other fields with support value for this inference. e.g. GATK variant caller has the fields \\'genotype_quality\\' and \\'genotype_likelihood_xxx\\' that give more information on genotype inference quality.','VCF','FORMAT|GT','VCF (depends on variant caller)','20','genotype','medium','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genotype_quality','_sample_annotations','DOUBLE','CALLS','The Genotype Quality, as a Phred-scaled confidence at the true genotype is the one provided in genotype. In diploid case, if genotype is 0/1, then genotype quality is really L(0/1) / (L(0/0) + L(0/1) + L(1/1)), where L is the likelihood of the NGS sequencing data under the model of that the sample is 0/0, 0/1/, or 1/1.','VCF','FORMAT|GQ','GATK 3.3','21','genotype','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genotype_likelihood_hom_ref','_sample_annotations','MEDIUMINT','CALLS','We provide the allelic depths and coverage fields since this is usually what downstream users want. However, the truly sophisticated users will want to directly use the likelihoods of the three genotypes 0/0, 0/1, and 1/1 provide in the likelihoods for genotypes field. These are normalized, Phred-scaled likelihoods for each of the 0/0, 0/1, and 1/1, without priors. To be concrete, for the het case, this is L(data given that the true genotype is 0/1). The most likely genotype (the one in genotype) is scaled so that it\\'s P = 1.0 (0 when Phred-scaled), and the other likelihoods reflect their Phred-scaled likelihoods relative to this most likely genotype. Currently only provided when the site is biallelic.','VCF','FORMAT|PL&A','GATK 3.3','22','genotype','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genotype_likelihood_het','_sample_annotations','MEDIUMINT','CALLS','We provide the allelic depths and coverage fields since this is usually what downstream users want. However, the truly sophisticated users will want to directly use the likelihoods of the three genotypes 0/0, 0/1, and 1/1 provide in the likelihoods for genotypes field. These are normalized, Phred-scaled likelihoods for each of the 0/0, 0/1, and 1/1, without priors. To be concrete, for the het case, this is L(data given that the true genotype is 0/1). The most likely genotype (the one in genotype) is scaled so that it\\'s P = 1.0 (0 when Phred-scaled), and the other likelihoods reflect their Phred-scaled likelihoods relative to this most likely genotype. Currently only provided when the site is biallelic.','VCF','FORMAT|PL&A','GATK 3.3','23','genotype','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genotype_likelihood_hom_alt','_sample_annotations','MEDIUMINT','CALLS','We provide the allelic depths and coverage fields since this is usually what downstream users want. However, the truly sophisticated users will want to directly use the likelihoods of the three genotypes 0/0, 0/1, and 1/1 provide in the likelihoods for genotypes field. These are normalized, Phred-scaled likelihoods for each of the 0/0, 0/1, and 1/1, without priors. To be concrete, for the het case, this is L(data given that the true genotype is 0/1). The most likely genotype (the one in genotype) is scaled so that it\\'s P = 1.0 (0 when Phred-scaled), and the other likelihoods reflect their Phred-scaled likelihoods relative to this most likely genotype. Currently only provided when the site is biallelic.','VCF','FORMAT|PL&A','GATK 3.3','24','genotype','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('snpeff_effect','_static_annotations','ENUM(\\'EXON_DELETED\\', \\'FRAME_SHIFT\\', \\'STOP_GAINED\\', \\'STOP_LOST\\', \\'START_LOST\\', \\'SPLICE_SITE_ACCEPTOR\\', \\'SPLICE_SITE_DONOR\\', \\'RARE_AMINO_ACID\\', \\'CHROMOSOME_LARGE_DELETION\\', \\'NON_SYNONYMOUS_CODING\\', \\'CODON_INSERTION\\', \\'CODON_CHANGE_PLUS_CODON_INSERTION\\', \\'CODON_DELETION\\', \\'CODON_CHANGE_PLUS_CODON_DELETION\\', \\'UTR_5_DELETED\\', \\'UTR_3_DELETED\\', \\'SPLICE_SITE_REGION\\', \\'SPLICE_SITE_BRANCH_U12\\', \\'CODON_CHANGE\\', \\'NON_SYNONYMOUS_STOP\\', \\'NON_SYNONYMOUS_START\\', \\'SYNONYMOUS_CODING\\', \\'SYNONYMOUS_STOP\\', \\'SYNONYMOUS_START\\', \\'START_GAINED\\', \\'SPLICE_SITE_BRANCH\\', \\'TF_BINDING_SITE\\', \\'SEQUENCE_FEATURE\\', \\'UTR_5_PRIME\\', \\'UTR_3_PRIME\\', \\'UPSTREAM\\', \\'DOWNSTREAM\\', \\'REGULATION\\', \\'MICRO_RNA\\', \\'CUSTOM\\', \\'INTRON_CONSERVED\\', \\'INTRON\\', \\'NON_CODING_EXON\\', \\'INTRAGENIC\\', \\'INTERGENIC_CONSERVED\\', \\'INTERGENIC\\', \\'CDS\\', \\'EXON\\', \\'TRANSCRIPT\\', \\'GENE\\', \\'CHROMOSOME\\', \\'WITHIN_NON_CODING_GENE\\', \\'NONE\\')','INFO','Most damaging effect of this variant predicted by SnpEff.','VCF','INFO|ANN','snpEff 4.1','1','effect prediction','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('snpeff_all_effects','_static_annotations','VARCHAR(400)','INFO','All effects of this variant predicted by SnpEff.','VCF','INFO|ANN','snpEff 5.0e','2','effect prediction','largest','LEFT');\n");		
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('snpeff_impact','_static_annotations','ENUM(\\'HIGH\\',\\'MODERATE\\',\\'LOW\\',\\'MODIFIER\\')','INFO','Impact of the effect predicted by SnpEff. HIGH: FRAME SHIFT, EXON DELETED, STOP GAINED, STOP LOST, START LOST, SPLICE SITE ACCEPTOR, SPLICE SITE DONOR. MODERATE: NON SYNONYMOUS CODING, CODON CHANGE, CODON INSERTION, CODON DELETION, CODON CHANGE PLUS CODON INSERTION, CODON CHANGE PLUS CODON DELETION, UTR 3 DELETED, UTR 5 DELETED. LOW: START GAINED, SYNONYMOUS START, NON SYNONYMOUS START, SYNONYMOUS CODING, SYNONYMOUS STOP, NON SYNONYMOUS STOP. MODIFIER: CDS, GENE, TRANSCRIPT, EXON, INTRON, INTRON CONSERVED, DOWNSTREAM, UPSTREAM, INTERGENIC, INTERGENIC CONSERVED, INTRAGENIC, WITHIN NON CODING GENE, CHROMOSOME, REGULATION, UTR 3 PRIME, UTR 5 PRIME.','VCF','INFO|ANN','snpEff 4.1','2','effect prediction','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('consensus_prediction','_static_annotations','INT','INFO','Consensus between prediction of all available software.  The base score reflects the number software that predict the variant to be damaging:  Each of the following software having a DAMAGING prediction add +1: Mutation Taster, FATHMM, FATHMM-XF, Polyphen2 (HDIV), Provean, SIFT4G, Mutation Assessor, MCAP, LRT, Lists2, Deogen, ClinPred, BayesDel (with MaxMAF), PrimateAI and MetaSVM. Each of the following scores add +1 when above a certain threshold: CADD phred > 20, VEST > 0.5, REVEL > 0.5, MVP > 0.75 and MutPred > 0.75  So max 20 if all software agree.  If the variant could affect splicing, a +1 or +2 could be added to the base score, if ada and/or rf predictions are AFFECTING_SPLICING.  To this, value is added depending on certain variant impact (annotations from SnpEff): +200 if any prediction indicates that splicing is affected. +300 for SPLICE_SITE_ACCEPTOR, SPLICE_SITE_DONOR, the 2 first or 2 last positions of an exon, the 3rd/4th/5th positions in 3\\' intron of an exon (before the STOP). +400 for FRAME_SHIFT, STOP_GAINED, STOP_LOST, START_LOST or RARE_AMINO_ACID. +500 for high impact structural variants. So, filtering on consensus_prediction > 0 should yield variants potentially damaging. Choosing a higher value like consensus_prediction > 5 should yield variants probably damaging.','CONSENSUS','','Highlander','5','effect prediction','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('annotsv_ranking','_custom_annotations','INT','INFO','In order to assist the clinical interpretation of SV, AnnotSV provides on top of the annotations a systematic classification of each SV into one of the 5 classes proposed by the ACMG guidelines using the following data and criteria. Data used for the ranking: - Frequent SV from gnomAD (the ones with a GD_POPMAX_AF > 1%). - Benign SV from the DGV Gold Standard corresponding to a gain (the ones with DGV_GAIN_Frequency>1% and with DGV_GAIN_n_samples_tested>500 (default, see the -minTotalNumber option in USAGE/OPTIONS)). - Benign SV from the DGV Gold Standard corresponding to a loss (the ones with DGV_LOSS_Frequency>1% and with DGV_LOSS_n_samples_tested>500 (default, see the -minTotalNumber option in USAGE/OPTIONS)). - Pathogenic SV from the dbVar NR-SV dataset. - pLI scores of each genes from ExAC. - Haploinsufficiency (HI) and triplosensitivity (TriS) scores from ClinGen. - Morbid genes from OMIM. - Candidate morbid genes from OMIM- Candidate genes provided by the user (see the -candidateGenesFile option in USAGE/OPTIONS). - Enhancer and promoter elements from GeneHancer. Classification are: - Class 1 (benign). The SV overlaps (>70%) with a frequent SV with the same SV type AND the SV does not overlap with a morbid gene (or its enhancer/promoter) AND the SV does not overlap with morbid gene candidate (or its enhancer/promoter) AND the SV does not overlap a candidate gene (or its enhancer/promoter). - Class 2 (likely benign). The SV has no overlap OR an overlap=70% with a benign SV AND the SV does not overlap with a morbid gene (or its enhancer/promoter) AND the SV does not overlap with a morbid gene candidate (or its enhancer/promoter) AND the SV does not overlap with a candidate gene (or its enhancer/promoter). - Class 3 (variant of unknown significance). The SV overlaps a morbid gene candidate (or its enhancer/promoter) (with at least 1bp overlap) OR the SV overlaps a candidate gene (or its enhancer/promoter) (with at least 1bp overlap). - Class 4 (likely pathogenic). The SV overlaps a morbid gene (or its enhancer/promoter) (with at least 1bp) OR for a loss, the SV overlaps a gene (or its enhancer/promoter) with a pLI_ExAC > 0.9 or with a HI_CGscore value of 3 or 2 OR for a gain, the SV overlaps a gene (or its enhancer/promoter) with a TriS_CGscore value of 3 or 2. - Class 5 (pathogenic). The SV overlaps a pathogenic SV (with at least 1bp) with the same SV type.','ANNOTSV','split|AnnotSV ranking','AnnotSV 2.5','10','effect prediction','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_taster_aa','_static_annotations','VARCHAR(20)','INFO','MutationTaster predicted amino acid change.','DBNSFP','chromosome_[chr]|MutationTaster_AAE&;MutationTaster','dbNSFP 4.1 (MutationTaster 2, data retrieved in 2015 http://www.mutationtaster.org/)','20','effect prediction','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_taster_model','_static_annotations','VARCHAR(20)','INFO','MutationTaster prediction models.','DBNSFP','chromosome_[chr]|MutationTaster_model&;MutationTaster','dbNSFP 4.1 (MutationTaster 2, data retrieved in 2015 http://www.mutationtaster.org/)','21','effect prediction','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_mkl_group','_static_annotations','VARCHAR(10)','INFO','The groups of features (labeled A-J) used to obtained the score. (A) 46-Way Sequence Conservation: based on multiple sequence alignment scores, at the nucleotide level, of 46 vertebrate genomes compared with the human genome. (B) Histone Modifications (ChIP-Seq): based on ChIP-Seq peak calls for histone modifications. (C) Transcription Factor Binding Sites (TFBS PeakSeq): based on PeakSeq peak calls for various transcription factors. (D) Open Chromatin (DNase-Seq): based on DNase-Seq peak calls. (E) 100-Way Sequence Conservation: based on multiple sequence alignment scores, at the nucleotide level, of 100 vertebrate genomes compared with the human genome. (F) GC Content: based on a single measure for GC content calculated using a span of five nucleotide bases from the UCSC Genome Browser. (G) Open Chromatin (FAIRE): based on formaldehyde-assisted isolation of regulatory elements (FAIRE) peak calls. (H) Transcription Factor Binding Sites (TFBS SPP): based on SPP peak calls for various transcription factors. (I) Genome Segmentation: based on genome-segmentation states using a consensus merge of segmentations produced by the ChromHMM and Segway software. (J) Footprints: based on annotations describing DNA footprints across cell types from ENCODE. More details can be found in doi: 10.1093/bioinformatics/btv009.','DBNSFP','chromosome_[chr]|fathmm-MKL_coding_group','dbNSFP 4.1 (fathmm-MKL, http://fathmm.biocompute.org.uk/fathmmMKL.htm)','22','effect prediction','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('aloft_fraction_transcripts_affected','_static_annotations','VARCHAR(20)','INFO','the fraction of the transcripts of the gene affected i.e. No. of transcripts affected by the SNP/Total no. of protein_coding transcripts for the gene','DBNSFP','chromosome_[chr]|Aloft_Fraction_transcripts_affected&;Ensembl_proteinid','dbNSFP 4.1 (ALoFT 1.0, http://aloft.gersteinlab.org/)','30','effect prediction','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('aloft_prob_tolerant','_static_annotations','DOUBLE','INFO','Probability of the SNP being classified as benign by ALoFT','DBNSFP','chromosome_[chr]|Aloft_prob_Tolerant&;Ensembl_proteinid','dbNSFP 4.1 (ALoFT 1.0, http://aloft.gersteinlab.org/)','31','effect prediction','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('aloft_prob_recessive','_static_annotations','DOUBLE','INFO','Probability of the SNP being classified as recessive disease-causing by ALoFT','DBNSFP','chromosome_[chr]|Aloft_prob_Recessive&;Ensembl_proteinid','dbNSFP 4.1 (ALoFT 1.0, http://aloft.gersteinlab.org/)','32','effect prediction','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('aloft_prob_dominant','_static_annotations','DOUBLE','INFO',' Probability of the SNP being classified as dominant disease-causing by ALoFT','DBNSFP','chromosome_[chr]|Aloft_prob_Dominant&;Ensembl_proteinid','dbNSFP 4.1 (ALoFT 1.0, http://aloft.gersteinlab.org/)','33','effect prediction','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('aloft_confidence','_static_annotations','VARCHAR(255)','INFO','Confidence level of Aloft_pred; values can be \\\"High Confidence\\\" (p < 0.05) or \\\"Low Confidence\\\" (p > 0.05)','DBNSFP','chromosome_[chr]|Aloft_Confidence&;Ensembl_proteinid','dbNSFP 4.1 (ALoFT 1.0, http://aloft.gersteinlab.org/)','34','effect prediction','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutpred_top5_features','_static_annotations','TEXT','INFO','Top 5 features (molecular mechanisms of disease) as predicted by MutPred with p values. MutPred_score > 0.5 and p < 0.05 are referred to as actionable hypotheses. MutPred_score > 0.75 and p < 0.05 are referred to as confident hypotheses. MutPred_score > 0.75 and p < 0.01 are referred to as very confident hypotheses.','DBNSFP','chromosome_[chr]|MutPred_Top5features','dbNSFP 4.1 (MutPred v1.2, http://mutpred.mutdb.org/)','40','effect prediction','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('meta_reliability_index','_static_annotations','TINYINT','INFO','Number of observed component scores (except the maximum frequency in the 1000 genomes populations) for MetaSVM and MetaLR. Ranges from 1 to 10. As MetaSVM and MetaLR scores are calculated based on imputed data, the less missing component scores, the higher the reliability of the scores and predictions. ','DBNSFP','chromosome_[chr]|Reliability_index','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','50','effect prediction','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('annotsv_ranking_criteria','_custom_annotations','TEXT','INFO','Decision criteria explaining the AnnotSV ranking','ANNOTSV','split|ranking decision criteria','AnnotSV 2.5','100','effect prediction','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('snpeff_other_transcripts','_static_annotations','TEXT','INFO','SnpEff prediction for other transcripts.','VCF','INFO|ANN','snpEff 4.1','500','effect prediction','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_taster_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','MutationTaster prediction, originally \\\"A\\\" (\\\"disease_causing_automatic\\\"), \\\"D\\\" (\\\"disease_causing\\\"), \\\"N\\\" (\\\"polymorphism\\\") or \\\"P\\\" (\\\"polymorphism_automatic\\\"). The score cutoff between \\\"D\\\" and \\\"N\\\" is 0.5 for MTnew and 0.31733 for the rankscore. Highlander displays DAMAGING (for disease_causing_automatic and disease_causing) or TOLERATED (for polymorphism and polymorphism_automatic).','DBNSFP','chromosome_[chr]|MutationTaster_pred&;MutationTaster','dbNSFP 4.1 (MutationTaster 2, data retrieved in 2015 http://www.mutationtaster.org/)','6','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','If a FATHMMori score is <=-1.5 (or rankscore >=0.81332) the corresponding nsSNV is predicted as DAMAGING; otherwise it is predicted as TOLERATED.','DBNSFP','chromosome_[chr]|FATHMM_pred&;Ensembl_proteinid','dbNSFP 4.1 (FATHMM v2.3, http://fathmm.biocompute.org.uk)','11','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_xf_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','If a fathmm-XF_coding_score is >0.5, the corresponding nsSNV is predicted as DAMAGING; otherwise it is predicted as TOLERATED.','DBNSFP','chromosome_[chr]|fathmm-XF_coding_pred','dbNSFP 4.1 (fathmm-XF, http://fathmm.biocompute.org.uk/fathmm-xf/)','14','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_mkl_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','If a fathmm-MKL_coding_score is >0.5 (or rankscore >0.28317) the corresponding nsSNV is predicted as DAMAGING; otherwise it is predicted as TOLERATED.','DBNSFP','chromosome_[chr]|fathmm-MKL_coding_pred','dbNSFP 4.1 (fathmm-MKL, http://fathmm.biocompute.org.uk/fathmmMKL.htm)','17','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('polyphen_hdiv_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Polyphen2 prediction based on HumDiv, \\\"D\\\" (\\\"probably damaging\\\", HDIV score in [0.957,1] or rankscore in [0.55859,0.91137]), \\\"P\\\" (\\\"possibly damaging\\\", HDIV score in [0.454,0.956] or rankscore in [0.37043,0.55681]) and \\\"B\\\" (\\\"benign\\\", HDIV score in [0,0.452] or rankscore in [0.03061,0.36974]). Score cutoff for binary classification is 0.5 for HDIV score or 0.38028 for rankscore, i.e. the prediction is TOLERATED if the HDIV score is smaller than 0.5 (rankscore is smaller than 0.38028), and DAMAGING if the HDIV score is larger than 0.5 (rankscore is larger than 0.38028). Highlander uses the binary classification.','DBNSFP','chromosome_[chr]|Polyphen2_HDIV_pred&;Uniprot_acc','dbNSFP 4.1 (Polyphen-2 v2.2.2, released Feb, 2012 http://genetics.bwh.harvard.edu/pph2/)','21','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('polyphen_hvar_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Polyphen2 prediction based on HumVar, \\\"D\\\" (\\\"probably damaging\\\", HVAR score in [0.909,1] or rankscore in [0.65694,0.97581]), \\\"P\\\" (\\\"possibly damaging\\\", HVAR in [0.447,0.908] or rankscore in [0.47121,0.65622]) and \\\"B\\\" (\\\"benign\\\", HVAR score in [0,0.446] or rankscore in [0.01493,0.47076]). Score cutoff for binary classification is 0.5 for HVAR score or 0.48762 for rankscore, i.e. the prediction is TOLERATED if the HVAR score is smaller than 0.5 (rankscore is smaller than 0.48762), and DAMAGING if the HVAR score is larger than 0.5 (rankscore is larger than 0.48762).  Highlander uses the binary classification.','DBNSFP','chromosome_[chr]|Polyphen2_HVAR_pred&;Uniprot_acc','dbNSFP 4.1 (Polyphen-2 v2.2.2, released Feb, 2012 http://genetics.bwh.harvard.edu/pph2/)','24','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('provean_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','If PROVEANori <= -2.5 (rankscore>=0.54382) the corresponding nsSNV is predicted as DAMAGING; otherwise it is predicted as TOLERATED. ','DBNSFP','chromosome_[chr]|PROVEAN_pred&;Ensembl_proteinid','dbNSFP 4.1 (PROVEAN 1.1 ensembl 66, released Jan, 2015 http://provean.jcvi.org/index.php)','27','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sift_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','If SIFTori is smaller than 0.05 (rankscore>0.39575) the corresponding nsSNV is predicted as DAMAGING; otherwise it is predicted as TOLERATED. ','DBNSFP','chromosome_[chr]|SIFT_pred&;Ensembl_proteinid','dbNSFP 4.1 (SIFT ensembl 66, released Jan, 2015 http://provean.jcvi.org/index.php)','30','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sift_4g_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','If SIFT4G is < 0.05 the corresponding nsSNV is predicted as DAMAGING; otherwise it is predicted as TOLERATED. ','DBNSFP','chromosome_[chr]|SIFT4G_pred&;Ensembl_transcriptid','dbNSFP 4.1 (SIFT4G 2.4, released Nov. 1, 2016 http://sift.bii.a-star.edu.sg/sift4g/public//Homo_sapiens/)','33','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_assessor_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','MutationAssessor\\'s functional impact of a variant -predicted functional, originally high (\\\"H\\\") or medium (\\\"M\\\"), or predicted non-functional, i.e. low (\\\"L\\\") or neutral (\\\"N\\\"). The MAori score cutoffs between \\\"H\\\" and \\\"M\\\", \\\"M\\\" and \\\"L\\\", and \\\"L\\\" and \\\"N\\\", are 3.5, 1.935 and 0.8, respectively. The rankscore cutoffs between \\\"H\\\" and \\\"M\\\", \\\"M\\\" and \\\"L\\\", and \\\"L\\\" and \\\"N\\\", are 0.9307, 0.52043 and 0.19675, respectively. Highlander displays DAMAGING (for high and medium) or TOLERATED (for low and neutral).','DBNSFP','chromosome_[chr]|MutationAssessor_pred&;Uniprot_entry','dbNSFP 4.1 (MutationAssessor release 3, http://mutationassessor.org/)','36','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mcap_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of M-CAP score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.025.','DBNSFP','chromosome_[chr]|M-CAP_pred','dbNSFP 4.1 (M-CAP v1.3, http://bejerano.stanford.edu/MCAP/)','39','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lrt_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','LRT prediction, originally D(eleterious), N(eutral) or U(nknown), which is not solely determined by the score. Highlander displays DAMAGING (for Deleterious) or TOLERATED (for Neutral). Unknown is displays as an \\\"empty\\\" prediction.','DBNSFP','chromosome_[chr]|LRT_pred','dbNSFP 4.1 (LRT, released November, 2009 http://www.genetics.wustl.edu/jflab/lrt_query.html)','42','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lists2_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of LIST-S2 score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.85.','DBNSFP','chromosome_[chr]|LIST-S2_pred&;Uniprot_acc','dbNSFP 4.1 (LIST-S2 Release: 2019_10, https://precomputed.list-s2.msl.ubc.ca/)','46','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('deogen_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of DEOGEN2 score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.5. BayesDel_addAF_score. A deleteriousness preidction meta-score for SNVs and indels with inclusion of MaxAF. See https://doi.org/10.1002/humu.23158 for details. The range of the score in dbNSFP is from -1.11707 to 0.750927. The higher the score, the more likely the variant is pathogenic. The author suggested cutoff between DAMAGING and TOLERATED is 0.0692655.','DBNSFP','chromosome_[chr]|DEOGEN2_pred&;Uniprot_acc','dbNSFP 4.1 (deogen2, https://deogen2.mutaframe.com/)','49','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinpred_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of ClinPred score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.5.','DBNSFP','chromosome_[chr]|ClinPred_pred','dbNSFP 4.1 (ClinPred, https://sites.google.com/site/clinpred/home)','52','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bayesdel_noaf_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of BayesDel_noAF score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is -0.0570105.','DBNSFP','chromosome_[chr]|BayesDel_noAF_pred','dbNSFP 4.1 (BayesDel v1, http://fengbj-laboratory.org/BayesDel/BayesDel.html)','55','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bayesdel_addaf_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of BayesDel_addAF score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.0692655.','DBNSFP','chromosome_[chr]|BayesDel_addAF_pred','dbNSFP 4.1 (BayesDel v1, http://fengbj-laboratory.org/BayesDel/BayesDel.html)','58','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('primate_ai_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of PrimateAI score based on the authors\\' recommendation, TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.803.','DBNSFP','chromosome_[chr]|PrimateAI_pred','dbNSFP 4.1 (PrimateAI, https://github.com/Illumina/PrimateAI)','61','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('aloft_pred','_static_annotations','ENUM(\\'DOMINANT\\',\\'RECESSIVE\\',\\'TOLERANT\\')','INFO','final classification predicted by ALoFT; values can be Tolerant, Recessive or Dominant','DBNSFP','chromosome_[chr]|Aloft_pred&;Ensembl_proteinid','dbNSFP 4.1 (ALoFT 1.0, http://aloft.gersteinlab.org/)','66','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('metasvm_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of DBNSFP SVM based ensemble prediction score,TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0. The rankscore cutoff between DAMAGING and TOLERATED is 0.82257.','DBNSFP','chromosome_[chr]|MetaSVM_pred','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','202','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('metalr_pred','_static_annotations','ENUM(\\'DAMAGING\\',\\'TOLERATED\\')','INFO','Prediction of DBNSFP MetaLR based ensemble prediction score,TOLERATED or DAMAGING. The score cutoff between DAMAGING and TOLERATED is 0.5. The rankscore cutoff between DAMAGING and TOLERATED is 0.81101.','DBNSFP','chromosome_[chr]|MetaLR_pred','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','205','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gevact_first_class','_custom_annotations','VARCHAR(20)','INFO','Initial class allocated to a variant based on gevact_first_score (classes are as defined by Sharon et al, 2008 for variant pathogenic classification)','ALAMUT','','GeVaCT','601','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gevact_final_class','_custom_annotations','VARCHAR(20)','INFO','Final class allocated to a variant based on gevact_final_score (classes are as defined by Sharon et al, 2008 for variant pathogenic classification)','ALAMUT','','GeVaCT','603','effect prediction (classification)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_taster_score','_static_annotations','DOUBLE','INFO','MutationTaster p-value (MTori), ranges from 0 to 1. Information on corresponding transcript(s) can be found by querying http://www.mutationtaster.org/ChrPos.html','DBNSFP','chromosome_[chr]|MutationTaster_score&;MutationTaster','dbNSFP 4.1 (MutationTaster 2, data retrieved in 2015 http://www.mutationtaster.org/)','4','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_score','_static_annotations','DOUBLE','INFO','FATHMM default score (weighted for human inherited-disease mutations with Disease Ontology) (FATHMMori). Scores range from -16.13 to 10.64. The smaller the score the more likely the SNP has damaging effect.','DBNSFP','chromosome_[chr]|FATHMM_score&;Ensembl_proteinid','dbNSFP 4.1 (FATHMM v2.3, http://fathmm.biocompute.org.uk)','9','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_xf_score','_static_annotations','DOUBLE','INFO','fathmm-XF p-values. Scores range from 0 to 1. SNVs with scores >0.5 are predicted to be deleterious, and those <0.5 are predicted to be neutral or benign. Scores close to 0 or 1 are with the highest-confidence. Coding scores are trained using 10 groups of features. More details of the score can be found in doi: 10.1093/bioinformatics/btx536.','DBNSFP','chromosome_[chr]|fathmm-XF_coding_score','dbNSFP 4.1 (fathmm-XF, http://fathmm.biocompute.org.uk/fathmm-xf/)','12','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_mkl_score','_static_annotations','DOUBLE','INFO','fathmm-MKL p-values. Scores range from 0 to 1. SNVs with scores >0.5 are predicted to be deleterious, and those <0.5 are predicted to be neutral or benign. Scores close to 0 or 1 are with the highest-confidence. Coding scores are trained using 10 groups of features. More details of the score can be found in doi: 10.1093/bioinformatics/btv009.','DBNSFP','chromosome_[chr]|fathmm-MKL_coding_score','dbNSFP 4.1 (fathmm-MKL, http://fathmm.biocompute.org.uk/fathmmMKL.htm)','15','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('polyphen_hdiv_score','_static_annotations','DOUBLE','INFO','Polyphen2 score based on HumDiv, i.e. hdiv_prob. The score ranges from 0 to 1. ','DBNSFP','chromosome_[chr]|Polyphen2_HDIV_score&;Uniprot_acc','dbNSFP 4.1 (Polyphen-2 v2.2.2, released Feb, 2012 http://genetics.bwh.harvard.edu/pph2/)','19','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('polyphen_hvar_score','_static_annotations','DOUBLE','INFO','Polyphen2 score based on HumVar, i.e. hvar_prob. The score ranges from 0 to 1. ','DBNSFP','chromosome_[chr]|Polyphen2_HVAR_score&;Uniprot_acc','dbNSFP 4.1 (Polyphen-2 v2.2.2, released Feb, 2012 http://genetics.bwh.harvard.edu/pph2/)','22','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('provean_score','_static_annotations','DOUBLE','INFO','PROVEAN score (PROVEANori). Scores range from -14 to 14. The smaller the score the more likely the SNP has damaging effect. ','DBNSFP','chromosome_[chr]|PROVEAN_score&;Ensembl_proteinid','dbNSFP 4.1 (PROVEAN 1.1 ensembl 66, released Jan, 2015 http://provean.jcvi.org/index.php)','25','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sift_score','_static_annotations','DOUBLE','INFO','SIFT score (SIFTori). Scores range from 0 to 1. The smaller the score the more likely the SNP has damaging effect. ','DBNSFP','chromosome_[chr]|SIFT_score&;Ensembl_proteinid','dbNSFP 4.1 (SIFT ensembl 66, released Jan, 2015 http://provean.jcvi.org/index.php)','28','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sift_4g_score','_static_annotations','DOUBLE','INFO','SIFT 4G score (SIFT4G). Scores range from 0 to 1. The smaller the score the more likely the SNP has damaging effect. ','DBNSFP','chromosome_[chr]|SIFT4G_score&;Ensembl_transcriptid','dbNSFP 4.1 (SIFT4G 2.4, released Nov. 1, 2016 http://sift.bii.a-star.edu.sg/sift4g/public//Homo_sapiens/)','31','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_assessor_score','_static_annotations','DOUBLE','INFO','MutationAssessor functional impact combined score (MAori). The score ranges from -5.17 to 6.49 in dbNSFP. ','DBNSFP','chromosome_[chr]|MutationAssessor_score&;Uniprot_entry','dbNSFP 4.1 (MutationAssessor release 3, http://mutationassessor.org/)','34','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mcap_score','_static_annotations','DOUBLE','INFO','M-CAP is hybrid ensemble score (details in DOI: 10.1038/ng.3703). Scores range from 0 to 1. The larger the score the more likely the SNP has damaging effect. ','DBNSFP','chromosome_[chr]|M-CAP_score','dbNSFP 4.1 (M-CAP v1.3, http://bejerano.stanford.edu/MCAP/)','37','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lrt_score','_static_annotations','DOUBLE','INFO','The original LRT two-sided p-value (LRTori), ranges from 0 to 1.','DBNSFP','chromosome_[chr]|LRT_score','dbNSFP 4.1 (LRT, released November, 2009 http://www.genetics.wustl.edu/jflab/lrt_query.html)','40','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lrt_omega','_static_annotations','DOUBLE','INFO','estimated nonsynonymous-to-synonymous-rate ratio (Omega, reported by LRT)','DBNSFP','chromosome_[chr]|LRT_Omega','dbNSFP 4.1 (LRT, released November, 2009 http://www.genetics.wustl.edu/jflab/lrt_query.html)','43','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lists2_score','_static_annotations','DOUBLE','INFO','A deleteriousness preidction score for nonsynonymous SNVs. See https://doi.org/10.1093/nar/gkaa288. for details. The range of the score in dbNSFP is from 0 to 1. The higher the score, the more likely the variant is pathogenic. The author suggested cutoff between deleterious (\\\"D\\\") and tolerated (\\\"T\\\") is 0.85.','DBNSFP','chromosome_[chr]|LIST-S2_score&;Uniprot_acc','dbNSFP 4.1 (LIST-S2 Release: 2019_10, https://precomputed.list-s2.msl.ubc.ca/)','44','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('deogen_score','_static_annotations','DOUBLE','INFO','A deleteriousness prediction score \\\"which incorporates heterogeneous information about the molecular effects of the variants, the domains involved, the relevance of the gene and the interactions in which it participates\\\". It ranges from 0 to 1. The larger the score, the more likely the variant is deleterious. The authors suggest a threshold of 0.5 for separating damaging vs tolerant variants.','DBNSFP','chromosome_[chr]|DEOGEN2_score&;Uniprot_acc','dbNSFP 4.1 (deogen2, https://deogen2.mutaframe.com/)','47','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinpred_score','_static_annotations','DOUBLE','INFO','A deleteriousness preidction meta-score for nonsynonymous SNVs. See https://doi.org/10.1016/j.ajhg.2018.08.005. for details. The range of the score in dbNSFP is from 0 to 1. The higher the score, the more likely the variant is pathogenic. The author suggested cutoff between deleterious (\\\"D\\\") and tolerated (\\\"T\\\") is 0.5.','DBNSFP','chromosome_[chr]|ClinPred_score','dbNSFP 4.1 (ClinPred, https://sites.google.com/site/clinpred/home)','50','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bayesdel_noaf_score','_static_annotations','DOUBLE','INFO','A deleteriousness preidction meta-score for SNVs and indels without inclusion of MaxAF. See https://doi.org/10.1002/humu.23158 for details. The range of the score in dbNSFP is from -1.31914 to 0.840878. The higher the score, the more likely the variant is pathogenic. The author suggested cutoff between deleterious (\\\"D\\\") and tolerated (\\\"T\\\") is -0.0570105.','DBNSFP','chromosome_[chr]|BayesDel_noAF_score','dbNSFP 4.1 (BayesDel v1, http://fengbj-laboratory.org/BayesDel/BayesDel.html)','53','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bayesdel_addaf_score','_static_annotations','DOUBLE','INFO','A deleteriousness preidction meta-score for SNVs and indels with inclusion of MaxAF. See https://doi.org/10.1002/humu.23158 for details. The range of the score in dbNSFP is from -1.11707 to 0.750927. The higher the score, the more likely the variant is pathogenic. The author suggested cutoff between deleterious (\\\"D\\\") and tolerated (\\\"T\\\") is 0.0692655.','DBNSFP','chromosome_[chr]|BayesDel_addAF_score','dbNSFP 4.1 (BayesDel v1, http://fengbj-laboratory.org/BayesDel/BayesDel.html)','56','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('primate_ai_score','_static_annotations','DOUBLE','INFO','A pathogenicity prediction score for missense variants based on common variants of non-human primate species using a deep neural network. The range of PrimateAI score is 0 to 1. The larger the score, the more likely the variant is pathogenic. The authors suggest a threshold of 0.803 for separating damaging vs tolerant variants. Details see https://doi.org/10.1038/s41588-018-0167-z','DBNSFP','chromosome_[chr]|PrimateAI_score','dbNSFP 4.1 (PrimateAI, https://github.com/Illumina/PrimateAI)','59','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cadd_raw','_static_annotations','DOUBLE','INFO','CADD raw score for funtional prediction of a SNV. Raw CADD scores come straight from the model, and are interpretable as the extent to which the annotation profile for a given variant suggests that that variant is likely to be observed (negative values) vs simulated (positive values). These values have no absolute unit of meaning and are incomparable across distinct annotation combinations, training sets, or model parameters. However, raw values do have relative meaning, with higher values indicating that a variant is more likely to be simulated (or not observed) and therefore more likely to have deleterious effects. Please refer to Kircher et al. (2014) Nature Genetics 46(3):310-5 for details. The larger the score the more likely the SNP has damaging effect. Scores range from -6.458163 to 18.301497 in dbNSFP. Please note the following copyright statement for CADD: \\\"CADD scores (http://cadd.gs.washington.edu/) are Copyright 2013 University of Washington and Hudson-Alpha Institute for Biotechnology (all rights reserved) but are freely available for all academic, non-commercial applications. For commercial licensing information contact Jennifer McCullar (mccullaj@uw.edu).\\\"','DBNSFP','chromosome_[chr]|CADD_raw','dbNSFP 4.1 (CADD v1.6, http://cadd.gs.washington.edu/)','100','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cadd_phred','_static_annotations','DOUBLE','INFO','CADD phred-like score (-10*log10(rank/total)) based on whole genome CADD raw scores. A scaled C-score of greater of equal 10 indicates that these are predicted to be the 10% most deleterious substitutions that you can do to the human genome, a score of greater or equal 20 indicates the 1% most deleterious and so on. If you would like to apply a cutoff on deleteriousness, you should put it somewhere between 10 and 20 (15). Please refer to Kircher et al. (2014) Nature Genetics 46(3):310-5 for details. The larger the score the more likely the SNP has damaging effect. Please note the following copyright statement for CADD: \\\"CADD scores (http://cadd.gs.washington.edu/) are Copyright 2013 University of Washington and Hudson-Alpha Institute for Biotechnology (all rights reserved) but are freely available for all academic, non-commercial applications. For commercial licensing information contact Jennifer McCullar (mccullaj@uw.edu).\\\"','DBNSFP','chromosome_[chr]|CADD_phred','dbNSFP 4.1 (CADD v1.6, http://cadd.gs.washington.edu/)','102','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('vest_score','_static_annotations','DOUBLE','INFO','VEST 4.0 score. Score ranges from 0 to 1. The larger the score the more likely the mutation may cause functional change. ','DBNSFP','chromosome_[chr]|VEST4_score&;Ensembl_transcriptid','dbNSFP 4.1 (VEST v4.0, http://karchinlab.org/apps/appVest.html)','103','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dann_score','_static_annotations','DOUBLE','INFO','DANN is a functional prediction score retrained based on the training data of CADD using deep neural network. Scores range from 0 to 1. A larger number indicate a higher probability to be damaging. More information of this score can be found in doi: 10.1093/bioinformatics/btu703. ','DBNSFP','chromosome_[chr]|DANN_score','dbNSFP 4.1 (DANN, https://cbcl.ics.uci.edu/public_data/DANN/)','105','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('eigen_raw','_static_annotations','DOUBLE','INFO','Eigen score for coding SNVs. A functional prediction score based on conservation, allele frequencies, and deleteriousness prediction using an unsupervised learning method (doi: 10.1038/ng.3477). ','DBNSFP','chromosome_[chr]|Eigen-raw_coding','dbNSFP 4.1 (Eigen & Eigen PC v1.1, http://www.columbia.edu/~ii2135/eigen.html)','107','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('eigen_phred','_static_annotations','DOUBLE','INFO','Eigen score in phred scale.','DBNSFP','chromosome_[chr]|Eigen-phred_coding','dbNSFP 4.1 (Eigen & Eigen PC v1.1, http://www.columbia.edu/~ii2135/eigen.html)','109','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('eigen_pc_raw','_static_annotations','DOUBLE','INFO','Eigen PC score for genome-wide SNVs. A functional prediction score based on conservation, allele frequencies, deleteriousness prediction (for missense SNVs) and epigenomic signals (for synonymous and non-coding SNVs) using an unsupervised learning method (doi: 10.1038/ng.3477). ','DBNSFP','chromosome_[chr]|Eigen-PC-raw_coding','dbNSFP 4.1 (Eigen & Eigen PC v1.1, http://www.columbia.edu/~ii2135/eigen.html)','110','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('eigen_pc_phred','_static_annotations','DOUBLE','INFO','Eigen PC score in phred scale.','DBNSFP','chromosome_[chr]|Eigen-PC-phred_coding','dbNSFP 4.1 (Eigen & Eigen PC v1.1, http://www.columbia.edu/~ii2135/eigen.html)','112','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('revel_score','_static_annotations','DOUBLE','INFO','REVEL is an ensemble score based on 13 individual scores for predicting the pathogenicity of missense variants. Scores range from 0 to 1. The larger the score the more likely the SNP has damaging effect. \\\"REVEL scores are freely available for non-commercial use. For other uses, please contact Weiva Sieh\\\" (weiva.sieh@mssm.edu)','DBNSFP','chromosome_[chr]|REVEL_score','dbNSFP 4.1 (REVEL, https://sites.google.com/site/revelgenomics/)','113','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mpc_score','_static_annotations','DOUBLE','INFO','A deleteriousness prediction score for missense variants based on regional missense constraint. The range of MPC score is 0 to 5. The larger the score, the more likely the variant is pathogenic. Details see doi: http://dx.doi.org/10.1101/148353.','DBNSFP','chromosome_[chr]|MPC_score&;Ensembl_transcriptid','dbNSFP 4.1 (MPC release1, ftp://ftp.broadinstitute.org/pub/ExAC_release/release1/regional_missense_constraint/)','115','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mvp_score','_static_annotations','DOUBLE','INFO','A pathogenicity prediction score for missense variants using deep learning approach. The range of MVP score is from 0 to 1. The larger the score, the more likely the variant is pathogenic. The authors suggest thresholds of 0.7 and 0.75 for separating damaging vs tolerant variants in constrained genes (ExAC pLI >=0.5) and non-constrained genes (ExAC pLI<0.5), respectively. Details see doi: http://dx.doi.org/10.1101/259390','DBNSFP','chromosome_[chr]|MVP_score&;Ensembl_transcriptid','dbNSFP 4.1 (MVP 1.0, https://github.com/ShenLab/missense)','117','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genocanyon_score','_static_annotations','DOUBLE','INFO','A functional prediction score based on conservation and biochemical annotations using an unsupervised statistical learning. (doi:10.1038/srep10576)','DBNSFP','chromosome_[chr]|GenoCanyon_score','dbNSFP 4.1 (GenoCanyon v1.0.3, http://genocanyon.med.yale.edu/index.html)','119','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('linsight_score','_static_annotations','DOUBLE','INFO','The LINSIGHT score measures the probability of negative selection on noncoding sites. Details refer to doi:10.1038/ng.3810. ','DBNSFP','chromosome_[chr]|LINSIGHT','dbNSFP 4.1 (LINSIGHT, http://compgen.cshl.edu/~yihuang/LINSIGHT/)','121','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutpred_score','_static_annotations','DOUBLE','INFO','General MutPred score. Scores range from 0 to 1. The larger the score the more likely the SNP has damaging effect.','DBNSFP','chromosome_[chr]|MutPred_score','dbNSFP 4.1 (MutPred v1.2, http://mutpred.mutdb.org/)','123','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('metasvm_score','_static_annotations','DOUBLE','INFO','DBNSFP support vector machine (SVM) based ensemble prediction score, which incorporated 10 scores (SIFT, PolyPhen-2 HDIV, PolyPhen-2 HVAR, GERP++, MutationTaster, Mutation Assessor, FATHMM, LRT, SiPhy, PhyloP) and the maximum frequency observed in the 1000 genomes populations. Larger value means the SNV is more likely to be damaging. Scores range from -2 to 3 in dbNSFP.','DBNSFP','chromosome_[chr]|MetaSVM_score','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','200','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('metalr_score','_static_annotations','DOUBLE','INFO','DBNSFP regression (LR) based ensemble prediction score, which incorporated 10 scores (SIFT, PolyPhen-2 HDIV, PolyPhen-2 HVAR, GERP++, MutationTaster, Mutation Assessor, FATHMM, LRT, SiPhy, PhyloP) and the maximum frequency observed in the 1000 genomes populations. Larger value means the SNV is more likely to be damaging. Scores range from 0 to 1.','DBNSFP','chromosome_[chr]|MetaLR_score','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','203','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gevact_first_score','_custom_annotations','DOUBLE','INFO','Pre-classification score from the GeVaCT classification tool','ALAMUT','','GeVaCT','600','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gevact_final_score','_custom_annotations','DOUBLE','INFO','Final classification score made by the GeVaCT classification tool, based on gevact_first_score and manual inputs','ALAMUT','','GeVaCT','602','effect prediction (score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_taster_rankscore','_static_annotations','DOUBLE','INFO','The MTori scores were first converted. If the prediction is \\\"A\\\" or \\\"D\\\" MTnew=MTori; if the prediction is \\\"N\\\" or \\\"P\\\", MTnew=1-MTori. Then MTnew scores were ranked among all MTnew scores in dbNSFP. If there are multiple scores of a SNV, only the largest MTnew was used in ranking. The rankscore is the ratio of the rank of the score over the total number of MTnew scores in dbNSFP. The scores range from 0.08979 to 0.81001.','DBNSFP','chromosome_[chr]|MutationTaster_converted_rankscore','dbNSFP 4.1 (MutationTaster 2, data retrieved in 2015 http://www.mutationtaster.org/)','5','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_rankscore','_static_annotations','DOUBLE','INFO','FATHMMori scores were first converted to FATHMMnew=1-(FATHMMori+16.13)/26.77, then ranked among all FATHMMnew scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of FATHMMnew scores in dbNSFP. If there are multiple scores, only the most damaging (largest) rankscore is presented. The scores range from 0 to 1.','DBNSFP','chromosome_[chr]|FATHMM_converted_rankscore','dbNSFP 4.1 (FATHMM v2.3, http://fathmm.biocompute.org.uk)','10','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_xf_rankscore','_static_annotations','DOUBLE','INFO','fathmm-XF coding scores were ranked among all fathmm-XF coding scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of fathmm-XF coding scores in dbNSFP.','DBNSFP','chromosome_[chr]|fathmm-XF_coding_rankscore','dbNSFP 4.1 (fathmm-XF, http://fathmm.biocompute.org.uk/fathmm-xf/)','13','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('fathmm_mkl_rankscore','_static_annotations','DOUBLE','INFO','fathmm-MKL coding scores were ranked among all fathmm-MKL coding scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of fathmm-MKL coding scores in dbNSFP.','DBNSFP','chromosome_[chr]|fathmm-MKL_coding_rankscore','dbNSFP 4.1 (fathmm-MKL, http://fathmm.biocompute.org.uk/fathmmMKL.htm)','16','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('polyphen_hdiv_rankscore','_static_annotations','DOUBLE','INFO','Polyphen2 HDIV scores were first ranked among all HDIV scores in dbNSFP. The rankscore is the ratio of the rank the score over the total number of the scores in dbNSFP. If there are multiple scores, only the most damaging (largest) rankscore is presented. The scores range from 0.03061 to 0.91137.','DBNSFP','chromosome_[chr]|Polyphen2_HDIV_rankscore','dbNSFP 4.1 (Polyphen-2 v2.2.2, released Feb, 2012 http://genetics.bwh.harvard.edu/pph2/)','20','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('polyphen_hvar_rankscore','_static_annotations','DOUBLE','INFO','Polyphen2 HVAR scores were first ranked among all HVAR scores in dbNSFP. The rankscore is the ratio of the rank the score over the total number of the scores in dbNSFP. If there are multiple scores, only the most damaging (largest) rankscore is presented. The scores range from 0.01493 to 0.97581.','DBNSFP','chromosome_[chr]|Polyphen2_HVAR_rankscore','dbNSFP 4.1 (Polyphen-2 v2.2.2, released Feb, 2012 http://genetics.bwh.harvard.edu/pph2/)','23','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('provean_rankscore','_static_annotations','DOUBLE','INFO','PROVEANori were first converted to PROVEANnew=1-(PROVEANori+14)/28, then ranked among all PROVEANnew scores in dbNSFP. The rankscore is the ratio of the rank the PROVEANnew score over the total number of PROVEANnew scores in dbNSFP. If there are multiple scores, only the most damaging (largest) rankscore is presented. The scores range from 0 to 1.','DBNSFP','chromosome_[chr]|PROVEAN_converted_rankscore','dbNSFP 4.1 (PROVEAN 1.1 ensembl 66, released Jan, 2015 http://provean.jcvi.org/index.php)','26','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sift_rankscore','_static_annotations','DOUBLE','INFO','SIFTori scores were first converted to SIFTnew=1-SIFTori, then ranked among all SIFTnew scores in dbNSFP. The rankscore is the ratio of the rank the SIFTnew score over the total number of SIFTnew scores in dbNSFP. If there are multiple scores, only the most damaging (largest) rankscore is presented. The rankscores range from 0.00964 to 0.91255.','DBNSFP','chromosome_[chr]|SIFT_converted_rankscore','dbNSFP 4.1 (SIFT ensembl 66, released Jan, 2015 http://provean.jcvi.org/index.php)','29','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sift_4g_rankscore','_static_annotations','DOUBLE','INFO','SIFT4G scores were first converted to SIFT4Gnew=1-SIFT4G, then ranked among all SIFT4Gnew scores in dbNSFP. The rankscore is the ratio of the rank the SIFT4Gnew score over the total number of SIFT4Gnew scores in dbNSFP. If there are multiple scores, only the most damaging (largest) rankscore is presented.','DBNSFP','chromosome_[chr]|SIFT4G_converted_rankscore','dbNSFP 4.1 (SIFT4G 2.4, released Nov. 1, 2016 http://sift.bii.a-star.edu.sg/sift4g/public//Homo_sapiens/)','32','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutation_assessor_rankscore','_static_annotations','DOUBLE','INFO','MAori scores were ranked among all MAori scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of MAori scores in dbNSFP. The scores range from 0 to 1.','DBNSFP','chromosome_[chr]|MutationAssessor_rankscore','dbNSFP 4.1 (MutationAssessor release 3, http://mutationassessor.org/)','35','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mcap_rankscore','_static_annotations','DOUBLE','INFO','M-CAP scores were ranked among all M-CAP scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of M-CAP scores in dbNSFP.','DBNSFP','chromosome_[chr]|M-CAP_rankscore','dbNSFP 4.1 (M-CAP v1.3, http://bejerano.stanford.edu/MCAP/)','38','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lrt_rankscore','_static_annotations','DOUBLE','INFO','LRTori scores were first converted as LRTnew=1-LRTori*0.5 if Omega<1, or LRTnew=LRTori*0.5 if Omega>=1. Then LRTnew scores were ranked among all LRTnew scores in dbNSFP. The rankscore is the ratio of the rank over the total number of the scores in dbNSFP. The scores range from 0.00162 to 0.8433.','DBNSFP','chromosome_[chr]|LRT_converted_rankscore','dbNSFP 4.1 (LRT, released November, 2009 http://www.genetics.wustl.edu/jflab/lrt_query.html)','41','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lists2_rankscore','_static_annotations','DOUBLE','INFO','LIST-S2 scores were ranked among all LIST-S2 scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of LIST-S2 scores in dbNSFP.','DBNSFP','chromosome_[chr]|LIST-S2_rankscore','dbNSFP 4.1 (LIST-S2 Release: 2019_10, https://precomputed.list-s2.msl.ubc.ca/)','45','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('deogen_rankscore','_static_annotations','DOUBLE','INFO','DEOGEN2 scores were ranked among all DEOGEN2 scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of DEOGEN2 scores in dbNSFP. ','DBNSFP','chromosome_[chr]|DEOGEN2_rankscore','dbNSFP 4.1 (deogen2, https://deogen2.mutaframe.com/)','48','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clinpred_rankscore','_static_annotations','DOUBLE','INFO','ClinPred scores were ranked among all ClinPred scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of ClinPred scores in dbNSFP.','DBNSFP','chromosome_[chr]|ClinPred_rankscore','dbNSFP 4.1 (ClinPred, https://sites.google.com/site/clinpred/home)','51','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bayesdel_noaf_rankscore','_static_annotations','DOUBLE','INFO','BayesDel_noAF scores were ranked among all BayesDel_noAF scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of BayesDel_noAF scores in dbNSFP.','DBNSFP','chromosome_[chr]|BayesDel_noAF_rankscore','dbNSFP 4.1 (BayesDel v1, http://fengbj-laboratory.org/BayesDel/BayesDel.html)','54','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bayesdel_addaf_rankscore','_static_annotations','DOUBLE','INFO','BayesDel_addAF scores were ranked among all BayesDel_addAF scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of BayesDel_addAF scores in dbNSFP. ','DBNSFP','chromosome_[chr]|BayesDel_addAF_rankscore','dbNSFP 4.1 (BayesDel v1, http://fengbj-laboratory.org/BayesDel/BayesDel.html)','57','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('primate_ai_rankscore','_static_annotations','DOUBLE','INFO','PrimateAI scores were ranked among all PrimateAI scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of PrimateAI scores in dbNSFP. ','DBNSFP','chromosome_[chr]|PrimateAI_rankscore','dbNSFP 4.1 (PrimateAI, https://github.com/Illumina/PrimateAI)','60','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('cadd_raw_rankscore','_static_annotations','DOUBLE','INFO','CADD raw scores were ranked among all CADD raw scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of CADD raw scores in dbNSFP. Please note the following copyright statement for CADD: \\\"CADD scores (http://cadd.gs.washington.edu/) are Copyright 2013 University of Washington and Hudson-Alpha Institute for Biotechnology (all rights reserved) but are freely available for all academic, non-commercial applications. For commercial licensing information contact Jennifer McCullar (mccullaj@uw.edu).\\\"','DBNSFP','chromosome_[chr]|CADD_raw_rankscore','dbNSFP 4.1 (CADD v1.6, http://cadd.gs.washington.edu/)','101','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('vest_rankscore','_static_annotations','DOUBLE','INFO','VEST4 scores were ranked among all VEST4 scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of VEST4 scores in dbNSFP. In case there are multiple scores for the same variant, the largest score (most damaging) is presented. The scores range from 0 to 1. ','DBNSFP','chromosome_[chr]|VEST4_rankscore','dbNSFP 4.1 (VEST v4.0, http://karchinlab.org/apps/appVest.html)','104','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dann_rankscore','_static_annotations','DOUBLE','INFO','DANN scores were ranked among all DANN scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of DANN scores in dbNSFP.','DBNSFP','chromosome_[chr]|DANN_rankscore','dbNSFP 4.1 (DANN, https://cbcl.ics.uci.edu/public_data/DANN/)','106','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('eigen_rankscore','_static_annotations','DOUBLE','INFO','Eigen-raw scores were ranked among all Eigen-raw scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of Eigen-raw scores in dbNSFP.','DBNSFP','chromosome_[chr]|Eigen-raw_coding_rankscore','dbNSFP 4.1 (Eigen & Eigen PC v1.1, http://www.columbia.edu/~ii2135/eigen.html)','108','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('eigen_pc_raw_rankscore','_static_annotations','DOUBLE','INFO','Eigen-PC-raw scores were ranked among all Eigen-PC-raw scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of Eigen-PC-raw scores in dbNSFP.','DBNSFP','chromosome_[chr]|Eigen-PC-raw_coding_rankscore','dbNSFP 4.1 (Eigen & Eigen PC v1.1, http://www.columbia.edu/~ii2135/eigen.html)','111','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('revel_rankscore','_static_annotations','DOUBLE','INFO','REVEL scores were ranked among all REVEL scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of REVEL scores in dbNSFP.','DBNSFP','chromosome_[chr]|REVEL_rankscore','dbNSFP 4.1 (REVEL, https://sites.google.com/site/revelgenomics/)','114','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mpc_rankscore','_static_annotations','DOUBLE','INFO','MPC scores were ranked among all MPC scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of MPC scores in dbNSFP. ','DBNSFP','chromosome_[chr]|MPC_rankscore','dbNSFP 4.1 (MPC release1, ftp://ftp.broadinstitute.org/pub/ExAC_release/release1/regional_missense_constraint/)','116','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mvp_rankscore','_static_annotations','DOUBLE','INFO','MVP scores were ranked among all MVP scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of MVP scores in dbNSFP. ','DBNSFP','chromosome_[chr]|MVP_rankscore','dbNSFP 4.1 (MVP 1.0, https://github.com/ShenLab/missense)','118','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('genocanyon_rankscore','_static_annotations','DOUBLE','INFO','GenoCanyon_score scores were ranked among all integrated fitCons scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of GenoCanyon_score scores in dbNSFP.','DBNSFP','chromosome_[chr]|GenoCanyon_score_rankscore','dbNSFP 4.1 (GenoCanyon v1.0.3, http://genocanyon.med.yale.edu/index.html)','120','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('linsight_rankscore','_static_annotations','DOUBLE','INFO','LINSIGHT scores were ranked among all LINSIGHT scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of LINSIGHT scores in dbNSFP.','DBNSFP','chromosome_[chr]|LINSIGHT_rankscore','dbNSFP 4.1 (LINSIGHT, http://compgen.cshl.edu/~yihuang/LINSIGHT/)','122','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mutpred_rankscore','_static_annotations','DOUBLE','INFO','MutPred scores were ranked among all MutPred scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of MutPred scores in dbNSFP.','DBNSFP','chromosome_[chr]|MutPred_rankscore','dbNSFP 4.1 (MutPred v1.2, http://mutpred.mutdb.org/)','124','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('metasvm_rankscore','_static_annotations','DOUBLE','INFO','MetaSVM scores were ranked among all MetaSVM scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of MetaSVM scores in dbNSFP. The scores range from 0 to 1.','DBNSFP','chromosome_[chr]|MetaSVM_rankscore','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','201','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('metalr_rankscore','_static_annotations','DOUBLE','INFO','MetaLR scores were ranked among all MetaLR scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of MetaLR scores in dbNSFP. The scores range from 0 to 1.','DBNSFP','chromosome_[chr]|MetaLR_rankscore','dbNSFP 4.1 (MetaSVM and MetaLR, doi: 10.1093/hmg/ddu733)','204','effect prediction (rank score)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('is_scSNV_RefSeq','_static_annotations','BOOLEAN','INFO','whether the SNV is a scSNV according to RefSeq','DBNSFP','dbscSNV_[chr]|is_scSNV_RefSeq','dbNSFP 4.1 (scSNV database 1.1)','400','effect prediction (splicing)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('is_scSNV_Ensembl','_static_annotations','BOOLEAN','INFO','whether the SNV is a scSNV according to Ensembl','DBNSFP','dbscSNV_[chr]|is_scSNV_Ensembl','dbNSFP 4.1 (scSNV database 1.1)','401','effect prediction (splicing)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('splicing_ada_score','_static_annotations','DOUBLE','INFO','Ensemble prediction score based on ada-boost. Ranges 0 to 1. The larger the score the higher probability the scSNV will affect splicing. The suggested cutoff for a binary prediction (affecting splicing vs. not affecting splicing) is 0.6.','DBNSFP','dbscSNV_[chr]|ada_score','dbNSFP 4.1 (scSNV database 1.1)','402','effect prediction (splicing)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('splicing_ada_pred','_static_annotations','ENUM(\\'AFFECTING_SPLICING\\',\\'SPLICING_UNAFFECTED\\')','INFO','Prediction based on ada-boost (0.6 cutoff).','DBNSFP','','dbNSFP 4.1 (scSNV database 1.1)','403','effect prediction (splicing)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('splicing_rf_score','_static_annotations','DOUBLE','INFO','Ensemble prediction score based on random forests. Ranges 0 to 1. The larger the score the higher probability the scSNV will affect splicing. The suggested cutoff for a binary prediction (affecting splicing vs. not affecting splicing) is 0.6.','DBNSFP','dbscSNV_[chr]|rf_score','dbNSFP 4.1 (scSNV database 1.1)','404','effect prediction (splicing)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('splicing_rf_pred','_static_annotations','ENUM(\\'AFFECTING_SPLICING\\',\\'SPLICING_UNAFFECTED\\')','INFO','Prediction based on random forests (0.6 cutoff)','DBNSFP','','dbNSFP 4.1 (scSNV database 1.1)','405','effect prediction (splicing)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('integrated_fitcons_score','_static_annotations','DOUBLE','INFO','fitCons score predicts the fraction of genomic positions belonging to a specific function class (defined by epigenomic \\\"fingerprint\\\") that are under selective pressure. Scores range from 0 to 1, with a larger score indicating a higher proportion of nucleic sites of the functional class the genomic position belong to are under selective pressure, therefore more likely to be functional important. Integrated (i6) scores are integrated across three cell types (GM12878, H1-hESC and HUVEC). More details can be found in doi:10.1038/ng.3196.','DBNSFP','chromosome_[chr]|integrated_fitCons_score','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','1','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('integrated_fitcons_rankscore','_static_annotations','DOUBLE','INFO','integrated fitCons scores were ranked among all integrated fitCons scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of integrated fitCons scores in dbNSFP.','DBNSFP','chromosome_[chr]|integrated_fitCons_rankscore','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','2','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('integrated_fitcons_pred','_static_annotations','ENUM(\\'HIGHLY_SIGNIFICANT\\',\\'SIGNIFICANT\\',\\'INFORMATIVE\\',\\'OTHER\\')','INFO','0 - highly significant scores (approx. p<.003); 1 - significant scores (approx. p<.05); 2 - informative scores (approx. p<.25); 3 - other scores (approx. p>=.25).','DBNSFP','chromosome_[chr]|integrated_confidence_value','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','3','conservation','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gm12878_fitcons_score','_static_annotations','DOUBLE','INFO','fitCons score predicts the fraction of genomic positions belonging to a specific function class (defined by epigenomic \\\"fingerprint\\\") that are under selective pressure. Scores range from 0 to 1, with a larger score indicating a higher proportion of nucleic sites of the functional class the genomic position belong to are under selective pressure, therefore more likely to be functional important. GM12878 fitCons scores are based on cell type GM12878. More details can be found in doi:10.1038/ng.3196.','DBNSFP','chromosome_[chr]|GM12878_fitCons_score','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','4','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gm12878_fitcons_rankscore','_static_annotations','DOUBLE','INFO','GM12878 fitCons scores were ranked among all GM12878 fitCons scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of GM12878 fitCons scores in dbNSFP.','DBNSFP','chromosome_[chr]|GM12878_fitCons_rankscore','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','5','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gm12878_fitcons_pred','_static_annotations','ENUM(\\'HIGHLY_SIGNIFICANT\\',\\'SIGNIFICANT\\',\\'INFORMATIVE\\',\\'OTHER\\')','INFO','0 - highly significant scores (approx. p<.003); 1 - significant scores (approx. p<.05); 2 - informative scores (approx. p<.25); 3 - other scores (approx. p>=.25).','DBNSFP','chromosome_[chr]|GM12878_confidence_value','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','6','conservation','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('h1_hesc_fitcons_score','_static_annotations','DOUBLE','INFO','fitCons score predicts the fraction of genomic positions belonging to a specific function class (defined by epigenomic \\\"fingerprint\\\") that are under selective pressure. Scores range from 0 to 1, with a larger score indicating a higher proportion of nucleic sites of the functional class the genomic position belong to are under selective pressure, therefore more likely to be functional important. GM12878 fitCons scores are based on cell type H1-hESC. More details can be found in doi:10.1038/ng.3196.','DBNSFP','chromosome_[chr]|H1-hESC_fitCons_score','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','7','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('h1_hesc_fitcons_rankscore','_static_annotations','DOUBLE','INFO','H1-hESC fitCons scores were ranked among all H1-hESC fitCons scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of H1-hESC fitCons scores in dbNSFP.','DBNSFP','chromosome_[chr]|H1-hESC_fitCons_rankscore','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','8','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('h1_hesc_fitcons_pred','_static_annotations','ENUM(\\'HIGHLY_SIGNIFICANT\\',\\'SIGNIFICANT\\',\\'INFORMATIVE\\',\\'OTHER\\')','INFO','0 - highly significant scores (approx. p<.003); 1 - significant scores (approx. p<.05); 2 - informative scores (approx. p<.25); 3 - other scores (approx. p>=.25).','DBNSFP','chromosome_[chr]|H1-hESC_confidence_value','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','9','conservation','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('huvec_fitcons_score','_static_annotations','DOUBLE','INFO','fitCons score predicts the fraction of genomic positions belonging to a specific function class (defined by epigenomic \\\"fingerprint\\\") that are under selective pressure. Scores range from 0 to 1, with a larger score indicating a higher proportion of nucleic sites of the functional class the genomic position belong to are under selective pressure, therefore more likely to be functional important. GM12878 fitCons scores are based on cell type HUVEC. More details can be found in doi:10.1038/ng.3196.','DBNSFP','chromosome_[chr]|HUVEC_fitCons_score','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','10','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('huvec_fitcons_rankscore','_static_annotations','DOUBLE','INFO','HUVEC fitCons scores were ranked among all HUVEC fitCons scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of HUVEC fitCons scores in dbNSFP.','DBNSFP','chromosome_[chr]|HUVEC_fitCons_rankscore','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','11','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('huvec_fitcons_pred','_static_annotations','ENUM(\\'HIGHLY_SIGNIFICANT\\',\\'SIGNIFICANT\\',\\'INFORMATIVE\\',\\'OTHER\\')','INFO','0 - highly significant scores (approx. p<.003); 1 - significant scores (approx. p<.05); 2 - informative scores (approx. p<.25); 3 - other scores (approx. p>=.25).','DBNSFP','chromosome_[chr]|HUVEC_confidence_value','dbNSFP 4.1 (fitCons v1.01, http://compgen.bscb.cornell.edu/fitCons/)','12','conservation','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gerp_nr','_static_annotations','DOUBLE','INFO','GERP++ neutral rate','DBNSFP','chromosome_[chr]|GERP++_NR','dbNSFP 4.1 (GERP++ http://mendel.stanford.edu/SidowLab/downloads/gerp/)','12','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gerp_rs','_static_annotations','DOUBLE','INFO','GERP++ RS score, the larger the score, the more conserved the site. Scores range from -12.3 to 6.17.','DBNSFP','chromosome_[chr]|GERP++_RS','dbNSFP 4.1 (GERP++ http://mendel.stanford.edu/SidowLab/downloads/gerp/)','13','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gerp_rs_rankscore','_static_annotations','DOUBLE','INFO','GERP++ RS scores were ranked among all GERP++ RS scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of GERP++ RS scores in dbNSFP.','DBNSFP','chromosome_[chr]|GERP++_RS_rankscore','dbNSFP 4.1 (GERP++ http://mendel.stanford.edu/SidowLab/downloads/gerp/)','14','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('siphy_29way_pi','_static_annotations','VARCHAR(255)','INFO','The estimated stationary distribution of A, C, G and T at the site, using SiPhy algorithm based on 29 mammals genomes. ','DBNSFP','chromosome_[chr]|SiPhy_29way_pi','dbNSFP 4.1 (SiPhy https://www.broadinstitute.org/mammals-models/29-mammals-project-supplementary-info)','15','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('siphy_29way_logOdds','_static_annotations','DOUBLE','INFO','SiPhy score based on 29 mammals genomes. The larger the score, the more conserved the site. Scores range from 0 to 37.9718 in dbNSFP.','DBNSFP','chromosome_[chr]|SiPhy_29way_logOdds','dbNSFP 4.1 (SiPhy https://www.broadinstitute.org/mammals-models/29-mammals-project-supplementary-info)','16','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('siphy_29way_logOdds_rankscore','_static_annotations','DOUBLE','INFO','SiPhy_29way_logOdds scores were ranked among all SiPhy_29way_logOdds scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of SiPhy_29way_logOdds scores in dbNSFP.','DBNSFP','chromosome_[chr]|SiPhy_29way_logOdds_rankscore','dbNSFP 4.1 (SiPhy https://www.broadinstitute.org/mammals-models/29-mammals-project-supplementary-info)','17','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phylop_17way_primate','_static_annotations','DOUBLE','INFO','a conservation score based on 17way alignment primate set, the higher the more conservative. Scores range from -13.362 to 0.756 in dbNSFP.','DBNSFP','chromosome_[chr]|phyloP17way_primate','dbNSFP 4.1 (phyloP17way_primate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP17way/)','18','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phylop_17way_primate_rankscore','_static_annotations','DOUBLE','INFO','the rank of the phyloP17way_primate score among all phyloP17way_primate scores in dbNSFP.','DBNSFP','chromosome_[chr]|phyloP17way_primate_rankscore','dbNSFP 4.1 (phyloP17way_primate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP17way/)','19','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phylop_30way_mammalian','_static_annotations','DOUBLE','INFO','phyloP (phylogenetic p-values) conservation score based on the multiple alignments of 30 mammalian genomes (including human). The larger the score, the more conserved the site. Scores range from -20 to 1.312 in dbNSFP.','DBNSFP','chromosome_[chr]|phyloP30way_mammalian','dbNSFP 4.1 (phyloP30way_mammalian (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP30way/)','20','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phylop_30way_mammalian_rankscore','_static_annotations','DOUBLE','INFO','phyloP30way_mammalian scores were ranked among all phyloP30way_mammalian scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of phyloP30way_mammalian scores in dbNSFP.','DBNSFP','chromosome_[chr]|phyloP30way_mammalian_rankscore','dbNSFP 4.1 (phyloP30way_mammalian (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP30way/)','21','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phylop_100way_vertebrate','_static_annotations','DOUBLE','INFO','phyloP (phylogenetic p-values) conservation score based on the multiple alignments of 100 vertebrate genomes (including human). The larger the score, the more conserved the site. Scores range from -20.0 to 10.003 in dbNSFP.','DBNSFP','chromosome_[chr]|phyloP100way_vertebrate','dbNSFP 4.1 (phyloP100way_vertebrate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP100way/)','22','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phylop_100way_vertebrate_rankscore','_static_annotations','DOUBLE','INFO','phyloP100way_vertebrate scores were ranked among all phyloP100way_vertebrate scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of phyloP100way_vertebrate scores in dbNSFP.','DBNSFP','chromosome_[chr]|phyloP100way_vertebrate_rankscore','dbNSFP 4.1 (phyloP100way_vertebrate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phyloP100way/)','23','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phastcons_17way_primate','_static_annotations','DOUBLE','INFO','a conservation score based on 17way alignment primate set. The larger the score, the more conserved the site. Scores range from 0 to 1. ','DBNSFP','chromosome_[chr]|phastCons17way_primate','dbNSFP 4.1 (phastCons17way_primate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phastCons17way/)','24','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phastcons_17way_primate_rankscore','_static_annotations','DOUBLE','INFO','the rank of the phastCons17way_primate score among all phastCons17way_primate scores in dbNSFP.','DBNSFP','chromosome_[chr]|phastCons17way_primate_rankscore','dbNSFP 4.1 (phastCons17way_primate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phastCons17way/)','25','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phastcons_30way_mammalian','_static_annotations','DOUBLE','INFO','phastCons conservation score based on the multiple alignments of 30 mammalian genomes (including human). The larger the score, the more conserved the site. Scores range from 0 to 1. ','DBNSFP','chromosome_[chr]|phastCons30way_mammalian','dbNSFP 4.1 (phastCons30way_mammalian (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phastCons30way/)','26','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phastcons_30way_mammalian_rankscore','_static_annotations','DOUBLE','INFO','phastCons30way_mammalian scores were ranked among all phastCons30way_mammalian scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of phastCons30way_mammalian scores in dbNSFP.','DBNSFP','chromosome_[chr]|phastCons30way_mammalian_rankscore','dbNSFP 4.1 (phastCons30way_mammalian (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phastCons30way/)','27','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phastcons_100way_vertebrate','_static_annotations','DOUBLE','INFO','phastCons conservation score based on the multiple alignments of 100 vertebrate genomes (including human). The larger the score, the more conserved the site. Scores range from 0 to 1. ','DBNSFP','chromosome_[chr]|phastCons100way_vertebrate','dbNSFP 4.1 (phastCons100way_vertebrate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phastCons100way/)','28','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('phastcons_100way_vertebrate_rankscore','_static_annotations','DOUBLE','INFO','phastCons100way_vertebrate scores were ranked among all phastCons100way_vertebrate scores in dbNSFP. The rankscore is the ratio of the rank of the score over the total number of phastCons100way_vertebrate scores in dbNSFP.','DBNSFP','chromosome_[chr]|phastCons100way_vertebrate_rankscore','dbNSFP 4.1 (phastCons100way_vertebrate (hg38) http://hgdownload.soe.ucsc.edu/goldenPath/hg38/phastCons100way/)','29','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bstatistic','_static_annotations','DOUBLE','INFO','Background selection (B) value estimates from doi.org/10.1371/journal.pgen.1000471. Ranges from 0 to 1000. It estimates the expected fraction (*1000) of neutral diversity present at a site. Values close to 0 represent near complete removal of diversity as a result of background selection and values near 1000 indicating absent of background selection. Data from CADD v1.4.','DBNSFP','chromosome_[chr]|bStatistic','dbNSFP 4.1 (bStatistic http://cadd.gs.washington.edu/)','30','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('bstatistic_rankscore','_static_annotations','DOUBLE','INFO','bStatistic scores were first converted to -bStatistic, then ranked among all -bStatistic scores in dbNSFP. The rankscore is the ratio of the rank of -bStatistic over the total number of -bStatistic scores in dbNSFP.','DBNSFP','chromosome_[chr]|bStatistic_converted_rankscore','dbNSFP 4.1 (bStatistic http://cadd.gs.washington.edu/)','31','conservation','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_af','_allele_frequencies','DOUBLE','INFO','Alternative allele frequency in this analysis (all samples) at this position.','HIGHLANDER','','Highlander','1','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_ac','_allele_frequencies','INT','INFO','Alternative allele count in this analysis (all samples) at this position.','HIGHLANDER','','Highlander','2','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_an','_allele_frequencies','INT','INFO','Total number of alleles in this analysis (all samples) at this position.','HIGHLANDER','','Highlander','3','allele frequency (Highlander)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_het','_allele_frequencies','INT','INFO','Count of heterozygous individuals in this analysis (all samples) at this position.','HIGHLANDER','','Highlander','4','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_hom','_allele_frequencies','INT','INFO','Count of homozygous individuals in this analysis (all samples) at this position.','HIGHLANDER','','Highlander','5','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('local_pathologies','_allele_frequencies','SMALLINT','INFO','Number of pathologies in this analysis having at least one individual with the SAME variant at same position in any sample.','HIGHLANDER','','Highlander','6','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_af','_allele_frequencies','DOUBLE','INFO','Alternative allele frequency in this analysis (germline samples) at this position.','HIGHLANDER','','Highlander','7','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_ac','_allele_frequencies','INT','INFO','Alternative allele count in this analysis (germline samples) at this position.','HIGHLANDER','','Highlander','8','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_an','_allele_frequencies','INT','INFO','Total number of alleles in this analysis (germline samples) at this position.','HIGHLANDER','','Highlander','9','allele frequency (Highlander)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_het','_allele_frequencies','INT','INFO','Count of heterozygous individuals in this analysis (germline samples) at this position.','HIGHLANDER','','Highlander','10','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_hom','_allele_frequencies','INT','INFO','Count of homozygous individuals in this analysis (germline samples) at this position.','HIGHLANDER','','Highlander','11','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('germline_pathologies','_allele_frequencies','SMALLINT','INFO','Number of pathologies in this analysis having at least one individual with the SAME variant at same position in germline samples.','HIGHLANDER','','Highlander','12','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('somatic_af','_allele_frequencies','DOUBLE','INFO','Alternative allele frequency in this analysis (somatic samples) at this position.','HIGHLANDER','','Highlander','13','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('somatic_ac','_allele_frequencies','INT','INFO','Alternative allele count in this analysis (somatic samples) at this position.','HIGHLANDER','','Highlander','14','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('somatic_an','_allele_frequencies','INT','INFO','Total number of alleles in this analysis (somatic samples) at this position.','HIGHLANDER','','Highlander','15','allele frequency (Highlander)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('somatic_het','_allele_frequencies','INT','INFO','Count of heterozygous individuals in this analysis (somatic samples) at this position.','HIGHLANDER','','Highlander','16','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('somatic_hom','_allele_frequencies','INT','INFO','Count of homozygous individuals in this analysis (somatic samples) at this position.','HIGHLANDER','','Highlander','17','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('somatic_pathologies','_allele_frequencies','SMALLINT','INFO','Number of pathologies in this analysis having at least one individual with the SAME variant at same position in somatic samples.','HIGHLANDER','','Highlander','18','allele frequency (Highlander)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_flag','_static_annotations','VARCHAR(20)','INFO','information from gnomAD genome data indicating whether the variant falling within low-complexity (lcr) or segmental duplication (segdup) or decoy regions. The flag can be either \\\".\\\" for high-quality PASS or not reported/polymorphic in gnomAD exomes, \\\"lcr\\\" for within lcr, \\\"segdup\\\" for within segdup, or \\\"decoy\\\" for with decoy region.','DBNSFP','chromosome_[chr]|gnomAD_genomes_flag','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','300','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_ac','_static_annotations','INT','INFO','Alternative allele count in the whole gnomAD genome samples (71,702 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','301','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_an','_static_annotations','INT','INFO','Total allele count in the whole gnomAD genome samples (71,702 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','302','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the whole gnomAD genome samples (71,702 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','303','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the whole gnomAD genome samples (71,702 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','304','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_afr_ac','_static_annotations','INT','INFO','Alternative allele count in the African/African American gnomAD genome samples (21,042 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AFR_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','305','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_afr_an','_static_annotations','INT','INFO','Total allele count in the African/African American gnomAD genome samples (21,042 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AFR_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','306','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_afr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the African/African American gnomAD genome samples (21,042 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AFR_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','307','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_afr_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the African/African American gnomAD genome samples (21,042 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AFR_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','308','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_ami_ac','_static_annotations','INT','INFO','Alternative allele count in the Amish gnomAD genome samples (450 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMI_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','309','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_ami_an','_static_annotations','INT','INFO','Total allele count in the Amish gnomAD genome samples (450 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMI_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','310','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_ami_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Amish gnomAD genome samples (450 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMI_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','311','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_ami_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Amish gnomAD genome samples (450 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMI_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','312','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_amr_ac','_static_annotations','INT','INFO','Alternative allele count in the Latino gnomAD genome samples (6,835 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMR_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','313','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_amr_an','_static_annotations','INT','INFO','Total allele count in the Latino gnomAD genome samples (6,835 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMR_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','314','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_amr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Latino gnomAD genome samples (6,835 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMR_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','315','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_amr_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Latino gnomAD genome samples (6,835 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_AMR_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','316','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_asj_ac','_static_annotations','INT','INFO','Alternative allele count in the Ashkenazi Jewish gnomAD genome samples (1,662 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_ASJ_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','317','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_asj_an','_static_annotations','INT','INFO','Total allele count in the Ashkenazi Jewish gnomAD genome samples (1,662 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_ASJ_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','318','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_asj_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Ashkenazi Jewish gnomAD genome samples (1,662 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_ASJ_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','319','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_asj_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Ashkenazi Jewish gnomAD genome samples (1,662 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_ASJ_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','320','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_eas_ac','_static_annotations','INT','INFO','Alternative allele count in the East Asian gnomAD genome samples (1,567 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_EAS_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','321','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_eas_an','_static_annotations','INT','INFO','Total allele count in the East Asian gnomAD genome samples (1,567 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_EAS_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','322','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_eas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the East Asian gnomAD genome samples (1,567 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_EAS_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','323','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_eas_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the East Asian gnomAD genome samples (1,567 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_EAS_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','324','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_fin_ac','_static_annotations','INT','INFO','Alternative allele count in the Finnish gnomAD genome samples (5,244 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_FIN_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','325','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_fin_an','_static_annotations','INT','INFO','Total allele count in the Finnish gnomAD genome samples (5,244 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_FIN_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','326','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_fin_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Finnish gnomAD genome samples (5,244 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_FIN_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','327','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_fin_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Finnish gnomAD genome samples (5,244 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_FIN_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','328','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_nfe_ac','_static_annotations','INT','INFO','Alternative allele count in the Non-Finnish European gnomAD genome samples (32,399 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_NFE_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','329','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_nfe_an','_static_annotations','INT','INFO','Total allele count in the Non-Finnish European gnomAD genome samples (32,399 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_NFE_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','330','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_nfe_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Non-Finnish European gnomAD genome samples (32,399 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_NFE_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','331','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_nfe_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Non-Finnish European gnomAD genome samples (32,399 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_NFE_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','332','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_sas_ac','_static_annotations','INT','INFO','Alternative allele count in the South Asian gnomAD genome samples (1,526 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_SAS_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','333','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_sas_an','_static_annotations','INT','INFO','Total allele count in the South Asian gnomAD genome samples (1,526 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_SAS_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','334','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_sas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the South Asian gnomAD genome samples (1,526 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_SAS_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','335','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_sas_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the South Asian gnomAD genome samples (1,526 samples)','DBNSFP','chromosome_[chr]|gnomAD_genomes_SAS_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','336','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_popmax_ac','_static_annotations','INT','INFO','Allele count in the population with the maximum AF','DBNSFP','chromosome_[chr]|gnomAD_genomes_POPMAX_AC','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','337','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_popmax_an','_static_annotations','INT','INFO','Total number of alleles in the population with the maximum AF','DBNSFP','chromosome_[chr]|gnomAD_genomes_POPMAX_AN','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','338','allele frequency (gnomAD Genomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_popmax_af','_static_annotations','DOUBLE','INFO','Maximum allele frequency across populations (excluding samples of Ashkenazi, Finnish, and indeterminate ancestry)','DBNSFP','chromosome_[chr]|gnomAD_genomes_POPMAX_AF','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','339','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wgs_popmax_nhomalt','_static_annotations','INT','INFO','Count of homozygous individuals in the population with the maximum allele frequency','DBNSFP','chromosome_[chr]|gnomAD_genomes_POPMAX_nhomalt','dbNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','340','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_id','_custom_annotations','TEXT','INFO','gnomAD IDs overlapping the annotated SV with the same SV type. A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_ID','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','700','allele frequency (gnomAD Genomes)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_an','_custom_annotations','TEXT','INFO','gnomAD total number of alleles genotyped (for biallelic sites) or individuals with copy-state estimates (for multiallelic sites).  A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_AN','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','701','allele frequency (gnomAD Genomes)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_het','_custom_annotations','TEXT','INFO','gnomAD number of individuals with heterozygous genotypes. A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_N_HET','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','702','allele frequency (gnomAD Genomes)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_nhomalt','_custom_annotations','TEXT','INFO','gnomAD number of individuals with homozygous alternate genotypes.  A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_N_HOMALT','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','703','allele frequency (gnomAD Genomes)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_af','_custom_annotations','DOUBLE','INFO','Maximum of the gnomAD allele frequency (for biallelic sites) and copy-state frequency (for multiallelic sites).  A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_AF','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','704','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_popmax_af','_custom_annotations','DOUBLE','INFO','Maximum of the gnomAD maximum allele frequency across any population.  A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_POPMAX_AF','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','705','allele frequency (gnomAD Genomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_sv_id_others','_custom_annotations','TEXT','INFO','Other gnomAD IDs overlapping the annotated SV (with a different SV type).  A reference atlas of SV from deep WGS of 14,891 individuals across diverse global populations has been constructed as a component of the gnomAD database (Collins et al., 2020). The publicly available SV data represents a relatively diverse collection of unrelated individuals that should have rates of most severe diseases equivalent to, if not lower than, the general population. The DUP, DEL, INV and INS from gnomAD are reported by AnnotSV.','ANNOTSV','split|GD_ID_others','AnnotSV 2.5 (gnomAD 2.1 - 2019-03-06)','706','allele frequency (gnomAD Genomes)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_flag','_static_annotations','VARCHAR(20)','INFO','information from gnomAD exome data indicating whether the variant falling within low-complexity (lcr) or segmental duplication (segdup) or decoy regions. The flag can be either \\\".\\\" for high-quality PASS or not reported/polymorphic in gnomAD exomes, \\\"lcr\\\" for within lcr, \\\"segdup\\\" for within segdup, or \\\"decoy\\\" for with decoy region.','GNOMAD_WES','chromosome_[chr]|gnomad_wes_flag','gnomAD exome 2.1.1','200','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_ac','_static_annotations','INT','INFO','Alternative allele count in the whole gnomAD exome samples (125,748 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_ac','gnomAD exome 2.1.1','201','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_an','_static_annotations','INT','INFO','Total allele count in the whole gnomAD exome samples (125,748 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_an','gnomAD exome 2.1.1','202','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the whole gnomAD exome samples (125,748 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_af','gnomAD exome 2.1.1','203','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the whole gnomAD exome samples (125,748 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_nhomalt','gnomAD exome 2.1.1','204','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_afr_ac','_static_annotations','INT','INFO','Alternative allele count in the African/African American gnomAD exome samples (8,128 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_afr_ac','gnomAD exome 2.1.1','205','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_afr_an','_static_annotations','INT','INFO','Total allele count in the African/African American gnomAD exome samples (8,128 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_afr_an','gnomAD exome 2.1.1','206','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_afr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the African/African American gnomAD exome samples (8,128 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_afr_af','gnomAD exome 2.1.1','207','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_afr_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the African/African American gnomAD exome samples (8,128 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_afr_nhomalt','gnomAD exome 2.1.1','208','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_amr_ac','_static_annotations','INT','INFO','Alternative allele count in the Latino gnomAD exome samples (17,296 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_amr_ac','gnomAD exome 2.1.1','209','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_amr_an','_static_annotations','INT','INFO','Total allele count in the Latino gnomAD exome samples (17,296 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_amr_an','gnomAD exome 2.1.1','210','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_amr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Latino gnomAD exome samples (17,296 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_amr_af','gnomAD exome 2.1.1','211','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_amr_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Latino gnomAD exome samples (17,296 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_amr_nhomalt','gnomAD exome 2.1.1','212','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_asj_ac','_static_annotations','INT','INFO','Alternative allele count in the Ashkenazi Jewish gnomAD exome samples (5,040 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_asj_ac','gnomAD exome 2.1.1','213','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_asj_an','_static_annotations','INT','INFO','Total allele count in the Ashkenazi Jewish gnomAD exome samples (5,040 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_asj_an','gnomAD exome 2.1.1','214','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_asj_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Ashkenazi Jewish gnomAD exome samples (5,040 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_asj_af','gnomAD exome 2.1.1','215','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_asj_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Ashkenazi Jewish gnomAD exome samples (5,040 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_asj_nhomalt','gnomAD exome 2.1.1','216','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_eas_ac','_static_annotations','INT','INFO','Alternative allele count in the East Asian gnomAD exome samples (9,197 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_eas_ac','gnomAD exome 2.1.1','217','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_eas_an','_static_annotations','INT','INFO','Total allele count in the East Asian gnomAD exome samples (9,197 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_eas_an','gnomAD exome 2.1.1','218','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_eas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the East Asian gnomAD exome samples (9,197 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_eas_af','gnomAD exome 2.1.1','219','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_eas_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the East Asian gnomAD exome samples (9,197 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_eas_nhomalt','gnomAD exome 2.1.1','220','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_fin_ac','_static_annotations','INT','INFO','Alternative allele count in the Finnish gnomAD exome samples (10,824 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_fin_ac','gnomAD exome 2.1.1','221','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_fin_an','_static_annotations','INT','INFO','Total allele count in the Finnish gnomAD exome samples (10,824 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_fin_an','gnomAD exome 2.1.1','222','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_fin_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Finnish gnomAD exome samples (10,824 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_fin_af','gnomAD exome 2.1.1','223','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_fin_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Finnish gnomAD exome samples (10,824 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_fin_nhomalt','gnomAD exome 2.1.1','224','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_nfe_ac','_static_annotations','INT','INFO','Alternative allele count in the Non-Finnish European gnomAD exome samples (56,885 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_nfe_ac','gnomAD exome 2.1.1','225','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_nfe_an','_static_annotations','INT','INFO','Total allele count in the Non-Finnish European gnomAD exome samples (56,885 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_nfe_an','gnomAD exome 2.1.1','226','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_nfe_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the Non-Finnish European gnomAD exome samples (56,885 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_nfe_af','gnomAD exome 2.1.1','227','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_nfe_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the Non-Finnish European gnomAD exome samples (56,885 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_nfe_nhomalt','gnomAD exome 2.1.1','228','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_sas_ac','_static_annotations','INT','INFO','Alternative allele count in the South Asian gnomAD exome samples (15,308 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_sas_ac','gnomAD exome 2.1.1','229','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_sas_an','_static_annotations','INT','INFO','Total allele count in the South Asian gnomAD exome samples (15,308 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_sas_an','gnomAD exome 2.1.1','230','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_sas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the South Asian gnomAD exome samples (15,308 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_sas_af','gnomAD exome 2.1.1','231','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_sas_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the South Asian gnomAD exome samples (15,308 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_sas_nhomalt','gnomAD exome 2.1.1','232','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_popmax_ac','_static_annotations','INT','INFO','Allele count in the population with the maximum AF','GNOMAD_WES','chromosome_[chr]|gnomad_wes_popmax_ac','gnomAD exome 2.1.1','233','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_popmax_an','_static_annotations','INT','INFO','Total number of alleles in the population with the maximum AF','GNOMAD_WES','chromosome_[chr]|gnomad_wes_popmax_an','gnomAD exome 2.1.1','234','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_popmax_af','_static_annotations','DOUBLE','INFO','Maximum allele frequency across populations (excluding samples of Ashkenazi, Finnish, and indeterminate ancestry)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_popmax_af','gnomAD exome 2.1.1','235','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_popmax_nhomalt','_static_annotations','INT','INFO','Count of homozygous individuals in the population with the maximum allele frequency','GNOMAD_WES','chromosome_[chr]|gnomad_wes_popmax_nhomalt','gnomAD exome 2.1.1','236','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of whole gnomAD exome samples (54,704 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_ac','gnomAD exome 2.1.1','237','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_an','_static_annotations','INT','INFO','Total allele count in the controls subset of whole gnomAD exome samples (54,704 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_an','gnomAD exome 2.1.1','238','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of whole gnomAD exome samples (54,704 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_af','gnomAD exome 2.1.1','239','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of whole gnomAD exome samples (54,704 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_nhomalt','gnomAD exome 2.1.1','240','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_afr_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of African/African American gnomAD exome samples (3,582 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_afr_ac','gnomAD exome 2.1.1','241','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_afr_an','_static_annotations','INT','INFO','Total allele count in the controls subset of African/African American gnomAD exome samples (3,582 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_afr_an','gnomAD exome 2.1.1','242','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_afr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of African/African American gnomAD exome samples (3,582 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_afr_af','gnomAD exome 2.1.1','243','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_afr_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of African/African American gnomAD exome samples (3,582 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_afr_nhomalt','gnomAD exome 2.1.1','244','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_amr_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of Latino gnomAD exome samples (8,556 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_amr_ac','gnomAD exome 2.1.1','245','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_amr_an','_static_annotations','INT','INFO','Total allele count in the controls subset of Latino gnomAD exome samples (8,556 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_amr_an','gnomAD exome 2.1.1','246','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_amr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of Latino gnomAD exome samples (8,556 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_amr_af','gnomAD exome 2.1.1','247','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_amr_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of Latino gnomAD exome samples (8,556 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_amr_nhomalt','gnomAD exome 2.1.1','248','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_asj_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of Ashkenazi Jewish gnomAD exome samples (1,160 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_asj_ac','gnomAD exome 2.1.1','249','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_asj_an','_static_annotations','INT','INFO','Total allele count in the controls subset of Ashkenazi Jewish gnomAD exome samples (1,160 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_asj_an','gnomAD exome 2.1.1','250','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_asj_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of Ashkenazi Jewish gnomAD exome samples (1,160 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_asj_af','gnomAD exome 2.1.1','251','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_asj_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of Ashkenazi Jewish gnomAD exome samples (1,160 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_asj_nhomalt','gnomAD exome 2.1.1','253','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_eas_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of East Asian gnomAD exome samples (4,523 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_eas_ac','gnomAD exome 2.1.1','255','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_eas_an','_static_annotations','INT','INFO','Total allele count in the controls subset of East Asian gnomAD exome samples (4,523 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_eas_an','gnomAD exome 2.1.1','257','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_eas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of East Asian gnomAD exome samples (4,523 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_eas_af','gnomAD exome 2.1.1','259','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_eas_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of East Asian gnomAD exome samples (4,523 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_eas_nhomalt','gnomAD exome 2.1.1','260','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_fin_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of Finnish gnomAD exome samples (6,697 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_fin_ac','gnomAD exome 2.1.1','261','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_fin_an','_static_annotations','INT','INFO','Total allele count in the controls subset of Finnish gnomAD exome samples (6,697 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_fin_an','gnomAD exome 2.1.1','262','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_fin_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of Finnish gnomAD exome samples (6,697 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_fin_af','gnomAD exome 2.1.1','263','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_fin_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of Finnish gnomAD exome samples (6,697 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_fin_nhomalt','gnomAD exome 2.1.1','264','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_nfe_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of Non-Finnish European gnomAD exome samples (21,384 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_nfe_ac','gnomAD exome 2.1.1','265','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_nfe_an','_static_annotations','INT','INFO','Total allele count in the controls subset of Non-Finnish European gnomAD exome samples (21,384 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_nfe_an','gnomAD exome 2.1.1','266','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_nfe_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of Non-Finnish European gnomAD exome samples (21,384 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_nfe_af','gnomAD exome 2.1.1','267','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_nfe_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of Non-Finnish European gnomAD exome samples (21,384 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_nfe_nhomalt','gnomAD exome 2.1.1','268','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_sas_ac','_static_annotations','INT','INFO','Alternative allele count in the controls subset of South Asian gnomAD exome samples (7,845 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_sas_ac','gnomAD exome 2.1.1','269','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_sas_an','_static_annotations','INT','INFO','Total allele count in the controls subset of South Asian gnomAD exome samples (7,845 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_sas_an','gnomAD exome 2.1.1','270','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_sas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the controls subset of South Asian gnomAD exome samples (7,845 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_sas_af','gnomAD exome 2.1.1','271','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_sas_nhomalt','_static_annotations','INT','INFO','Count of individuals with homozygous alternative allele in the controls subset of South Asian gnomAD exome samples (7,845 samples)','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_sas_nhomalt','gnomAD exome 2.1.1','272','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_popmax_ac','_static_annotations','INT','INFO','Allele count in the controls subset of population with the maximum AF','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_popmax_ac','gnomAD exome 2.1.1','273','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_popmax_an','_static_annotations','INT','INFO','Total number of alleles in the controls subset of population with the maximum AF','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_popmax_an','gnomAD exome 2.1.1','274','allele frequency (gnomAD Exomes)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_popmax_af','_static_annotations','DOUBLE','INFO','Maximum allele frequency across populations (excluding samples of Ashkenazi, Finnish, and indeterminate ancestry) in the controls subset','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_popmax_af','gnomAD exome 2.1.1','275','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_wes_controls_popmax_nhomalt','_static_annotations','INT','INFO','Count of homozygous individuals in the controls subset of population with the maximum allele frequency','GNOMAD_WES','chromosome_[chr]|gnomad_wes_controls_popmax_nhomalt','gnomAD exome 2.1.1','276','allele frequency (gnomAD Exomes)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_ac','_static_annotations','INT','INFO','Allele count in total ExAC samples (60,706 samples)','DBNSFP','chromosome_[chr]|ExAC_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','100','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_af','_static_annotations','DOUBLE','INFO','Allele frequency in total ExAC samples','DBNSFP','chromosome_[chr]|ExAC_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','101','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_adj_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in total ExAC samples','DBNSFP','chromosome_[chr]|ExAC_Adj_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','102','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_adj_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in total ExAC samples','DBNSFP','chromosome_[chr]|ExAC_Adj_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','103','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_afr_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in African & African American ExAC samples','DBNSFP','chromosome_[chr]|ExAC_AFR_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','104','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_afr_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in African & African American ExAC samples','DBNSFP','chromosome_[chr]|ExAC_AFR_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','105','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_amr_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in American ExAC samples','DBNSFP','chromosome_[chr]|ExAC_AMR_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','106','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_amr_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in American ExAC samples','DBNSFP','chromosome_[chr]|ExAC_AMR_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','107','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_eas_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in East Asian ExAC samples','DBNSFP','chromosome_[chr]|ExAC_EAS_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','108','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_eas_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in East Asian ExAC samples','DBNSFP','chromosome_[chr]|ExAC_EAS_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','109','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_fin_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in Finnish ExAC samples','DBNSFP','chromosome_[chr]|ExAC_FIN_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','110','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_fin_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in Finnish ExAC samples','DBNSFP','chromosome_[chr]|ExAC_FIN_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','111','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nfe_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in Non-Finnish European ExAC samples','DBNSFP','chromosome_[chr]|ExAC_NFE_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','112','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nfe_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in Non-Finnish European ExAC samples','DBNSFP','chromosome_[chr]|ExAC_NFE_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','113','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_sas_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in South Asian ExAC samples','DBNSFP','chromosome_[chr]|ExAC_SAS_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','114','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_sas_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in South Asian ExAC samples','DBNSFP','chromosome_[chr]|ExAC_SAS_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','115','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_ac','_static_annotations','INT','INFO','Allele count in total ExAC_nonTCGA samples (53,105 samples)','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','116','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_af','_static_annotations','DOUBLE','INFO','Allele frequency in total ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','117','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_adj_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in total ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_Adj_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','118','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_adj_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in total ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_Adj_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','119','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_afr_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in African & African American ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_AFR_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','120','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_afr_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in African & African American ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_AFR_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','121','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_amr_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in American ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_AMR_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','122','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_amr_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in American ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_AMR_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','123','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_eas_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in East Asian ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_EAS_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','124','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_eas_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in East Asian ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_EAS_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','125','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_fin_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in Finnish ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_FIN_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','126','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_fin_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in Finnish ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_FIN_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','127','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_nfe_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in Non-Finnish European ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_NFE_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','128','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_nfe_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in Non-Finnish European ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_NFE_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','129','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_sas_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in South Asian ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_SAS_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','130','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_sas_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in South Asian ExAC_nonTCGA samples','DBNSFP','chromosome_[chr]|ExAC_nonTCGA_SAS_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','131','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_ac','_static_annotations','INT','INFO','Allele count in total ExAC_nonpsych samples (45,376 samples)','DBNSFP','chromosome_[chr]|ExAC_nonpsych_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','132','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_af','_static_annotations','DOUBLE','INFO','Allele frequency in total ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','133','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_adj_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in total ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_Adj_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','134','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_adj_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in total ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_Adj_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','135','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_afr_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in African & African American ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_AFR_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','136','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_afr_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in African & African American ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_AFR_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','137','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_amr_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in American ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_AMR_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','138','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_amr_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in American ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_AMR_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','139','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_eas_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in East Asian ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_EAS_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','140','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_eas_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in East Asian ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_EAS_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','141','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_fin_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in Finnish ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_FIN_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','142','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_fin_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in Finnish ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_FIN_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','143','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_nfe_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in Non-Finnish European ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_NFE_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','144','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_nfe_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in Non-Finnish European ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_NFE_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','145','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_sas_ac','_static_annotations','INT','INFO','Adjusted Alt allele counts (DP >= 10 & GQ >= 20) in South Asian ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_SAS_AC','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','146','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_sas_af','_static_annotations','DOUBLE','INFO','Adjusted Alt allele frequency (DP >= 10 & GQ >= 20) in South Asian ExAC_nonpsych samples','DBNSFP','chromosome_[chr]|ExAC_nonpsych_SAS_AF','dbNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','147','allele frequency (ExAC)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_ac','_static_annotations','INT','INFO','Alternative allele counts in the whole 1000 genomes phase 3 (1000Gp3) data.','DBNSFP','chromosome_[chr]|1000Gp3_AC','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','400','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the whole 1000Gp3 data.','DBNSFP','chromosome_[chr]|1000Gp3_AF','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','401','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_afr_ac','_static_annotations','INT','INFO','Alternative allele counts in the 1000Gp3 African descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_AFR_AC','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','402','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_afr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the 1000Gp3 African descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_AFR_AF','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','403','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_amr_ac','_static_annotations','INT','INFO','Alternative allele counts in the 1000Gp3 American descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_AMR_AC','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','404','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_amr_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the 1000Gp3 American descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_AMR_AF','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','405','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_eas_ac','_static_annotations','INT','INFO','Alternative allele counts in the 1000Gp3 East Asian descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_EAS_AC','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','406','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_eas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the 1000Gp3 East Asian descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_EAS_AF','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','407','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_eur_ac','_static_annotations','INT','INFO','Alternative allele counts in the 1000Gp3 European descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_EUR_AC','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','408','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_eur_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the 1000Gp3 European descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_EUR_AF','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','409','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_sas_ac','_static_annotations','INT','INFO','Alternative allele counts in the 1000Gp3 South Asian descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_SAS_AC','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','410','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_sas_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the 1000Gp3 South Asian descendent samples.','DBNSFP','chromosome_[chr]|1000Gp3_SAS_AF','dbNSFP 4.1 (1000 Genomes project http://www.1000genomes.org/)','411','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('uk10k_ac','_static_annotations','INT','INFO','Alternative allele count in combined genotypes in UK10K cohort (TWINSUK+ALSPAC).','DBNSFP','chromosome_[chr]|UK10K_AC','dbNSFP 4.1 (UK10K COHORT http://www.uk10k.org/studies/cohorts.html)','500','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('uk10k_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in combined genotypes in UK10K cohort (TWINSUK+ALSPAC).','DBNSFP','chromosome_[chr]|UK10K_AF','dbNSFP 4.1 (UK10K COHORT http://www.uk10k.org/studies/cohorts.html)','501','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('uk10k_alspac_ac','_static_annotations','INT','INFO','Alternative allele count in called genotypes in UK10K ALSPAC cohort.','DBNSFP','chromosome_[chr]|ALSPAC_AC','dbNSFP 4.1 (UK10K COHORT http://www.uk10k.org/studies/cohorts.html)','502','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('uk10k_alspac_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in called genotypes in UK10K ALSPAC cohort.','DBNSFP','chromosome_[chr]|ALSPAC_AF','dbNSFP 4.1 (UK10K COHORT http://www.uk10k.org/studies/cohorts.html)','503','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('uk10k_twins_UK_ac','_static_annotations','INT','INFO','Alternative allele count in called genotypes in UK10K TWINSUK cohort.','DBNSFP','chromosome_[chr]|TWINSUK_AC','dbNSFP 4.1 (UK10K COHORT http://www.uk10k.org/studies/cohorts.html)','504','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('uk10k_twins_UK_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in called genotypes in UK10K TWINSUK cohort.','DBNSFP','chromosome_[chr]|TWINSUK_AF','dbNSFP 4.1 (UK10K COHORT http://www.uk10k.org/studies/cohorts.html)','505','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gonl_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the GoNL database.','GONL','chromosome_[chr]|af','GoNL r5','506','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gonl_ac','_static_annotations','INT','INFO','Alternative allele counts in the GoNL database.','GONL','chromosome_[chr]|ac','GoNL r5','507','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('esp6500_aa_ac','_static_annotations','INT','INFO','Alternative allele count in the African American samples of the NHLBI GO Exome Sequencing Project (ESP6500 data set).','DBNSFP','chromosome_[chr]|ESP6500_AA_AC','dbNSFP 4.1 (ESP http://evs.gs.washington.edu/EVS/)','508','allele frequency (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('esp6500_aa_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the African American samples of the NHLBI GO Exome Sequencing Project (ESP6500 data set).','DBNSFP','chromosome_[chr]|ESP6500_AA_AF','dbNSFP 4.1 (ESP http://evs.gs.washington.edu/EVS/)','509','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('esp6500_ea_ac','_static_annotations','INT','INFO','Alternative allele count in the European American samples of the NHLBI GO Exome Sequencing Project (ESP6500 data set).','DBNSFP','chromosome_[chr]|ESP6500_EA_AC','dbNSFP 4.1 (ESP http://evs.gs.washington.edu/EVS/)','510','allele frequency (other DB)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('esp6500_ea_af','_static_annotations','DOUBLE','INFO','Alternative allele frequency in the European American samples of the NHLBI GO Exome Sequencing Project (ESP6500 data set).','DBNSFP','chromosome_[chr]|ESP6500_EA_AF','dbNSFP 4.1 (ESP http://evs.gs.washington.edu/EVS/)','511','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dbsnp_maf','_custom_annotations','DOUBLE','INFO','dbSNP variant global Minor Allele Frequency','ALAMUT','','Alamut batch 1.4.2','600','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_sv_event','_custom_annotations','VARCHAR(50)','INFO','List of the 1000 genomes events (e.g. DEL, DUP, ALU...) overlapped with the annotated SV. The goal of the 1000 Genomes Project (Sudmant et al., 2015) was to find most genetic variants with frequencies of at least 1% in the populations studied. Analyses were conducted looking at both the short variations (up to 50 base pairs in length) and the SV. AnnotSV report only frequent events from the 1000 genomes database (frequencies of at least 0.5 %) overlapping the SV to annotate. Most of the 1000 genomes data is already included in the gnomAD dataset.','ANNOTSV','split|1000g_event','AnnotSV 2.5 (1000G phase 3 - 2017-05-19)','710','allele frequency (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_sv_af','_custom_annotations','DOUBLE','INFO','1000 genomes allele frequency. The goal of the 1000 Genomes Project (Sudmant et al., 2015) was to find most genetic variants with frequencies of at least 1% in the populations studied. Analyses were conducted looking at both the short variations (up to 50 base pairs in length) and the SV. AnnotSV report only frequent events from the 1000 genomes database (frequencies of at least 0.5 %) overlapping the SV to annotate. Most of the 1000 genomes data is already included in the gnomAD dataset.','ANNOTSV','split|1000g_AF','AnnotSV 2.5 (1000G phase 3 - 2017-05-19)','711','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('p3_1000g_sv_af_max','_custom_annotations','DOUBLE','INFO','Maximum observed allele frequency across the 1000 genomes populations. The goal of the 1000 Genomes Project (Sudmant et al., 2015) was to find most genetic variants with frequencies of at least 1% in the populations studied. Analyses were conducted looking at both the short variations (up to 50 base pairs in length) and the SV. AnnotSV report only frequent events from the 1000 genomes database (frequencies of at least 0.5 %) overlapping the SV to annotate. Most of the 1000 genomes data is already included in the gnomAD dataset.','ANNOTSV','split|1000g_max_AF','AnnotSV 2.5 (1000G phase 3 - 2017-05-19)','712','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_sv','_custom_annotations','TEXT','INFO','List of the DDD SV coordinates from the DDD study (data control sets) overlapping the annotated SV. AnnotSV takes advantage of the DDD study (national blood service controls + generation Scotland controls), representing the 845 samples currently available (an update is planned in the near future).','ANNOTSV','split|DDD_SV','AnnotSV 2.5 (DDD 2019-03-18)','720','allele frequency (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_dup_in','_custom_annotations','INT','INFO','Maximum number of individuals with a shared DDD_DUP (among the DDD_SV). AnnotSV takes advantage of the DDD study (national blood service controls + generation Scotland controls), representing the 845 samples currently available (an update is planned in the near future).','ANNOTSV','split|DDD_DUP_n_samples_with_SV','AnnotSV 2.5 (DDD 2019-03-18)','721','allele frequency (other DB)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_dup_if','_custom_annotations','DOUBLE','INFO','Maximum DUP Frequency (among the DDD_SV). AnnotSV takes advantage of the DDD study (national blood service controls + generation Scotland controls), representing the 845 samples currently available (an update is planned in the near future).','ANNOTSV','split|DDD_DUP_Frequency','AnnotSV 2.5 (DDD 2019-03-18)','722','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_del_in','_custom_annotations','INT','INFO','Maximum number of individuals with a shared DDD_DEL (among the DDD_SV). AnnotSV takes advantage of the DDD study (national blood service controls + generation Scotland controls), representing the 845 samples currently available (an update is planned in the near future).','ANNOTSV','split|DDD_DEL_n_samples_with_SV','AnnotSV 2.5 (DDD 2019-03-18)','723','allele frequency (other DB)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_del_if','_custom_annotations','DOUBLE','INFO','Maximum DEL Frequency (among the DDD_SV). AnnotSV takes advantage of the DDD study (national blood service controls + generation Scotland controls), representing the 845 samples currently available (an update is planned in the near future).','ANNOTSV','split|DDD_DEL_Frequency','AnnotSV 2.5 (DDD 2019-03-18)','724','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_gain_ids','_custom_annotations','TEXT','INFO','DGV Gold Standard GAIN IDs overlapping the annotated SV. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_GAIN_IDs','AnnotSV 2.5 (DGV 2016-05-15)','730','allele frequency (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_gain_in','_custom_annotations','INT','INFO','Number of individuals with a shared DGV_GAIN_ID. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_GAIN_n_samples_with_SV','AnnotSV 2.5 (DGV 2016-05-15)','731','allele frequency (other DB)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_gain_ic','_custom_annotations','INT','INFO','Number of individuals tested. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_GAIN_n_samples_tested','AnnotSV 2.5 (DGV 2016-05-15)','732','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_gain_if','_custom_annotations','DOUBLE','INFO','Relative GAIN frequency = DGV_GAIN_n_samples_with_SV/DGV_GAIN_n_samples_tested. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_GAIN_Frequency','AnnotSV 2.5 (DGV 2016-05-15)','733','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_loss_ids','_custom_annotations','TEXT','INFO','DGV Gold Standard LOSS IDs overlapping the annotated SV. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_LOSS_IDs','AnnotSV 2.5 (DGV 2016-05-15)','734','allele frequency (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_loss_in','_custom_annotations','INT','INFO','Number of individuals with a shared DGV_LOSS_ID. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_LOSS_n_samples_with_SV','AnnotSV 2.5 (DGV 2016-05-15)','735','allele frequency (other DB)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_loss_ic','_custom_annotations','INT','INFO','Number of individuals tested. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_LOSS_n_samples_tested','AnnotSV 2.5 (DGV 2016-05-15)','736','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('dgv_loss_if','_custom_annotations','DOUBLE','INFO','Relative LOSS frequency = DGV_LOSS_n_samples_with_SV/DGV_LOSS_n_samples_tested. The Database of Genomic Variants (DGV) provides SV defined as DNA elements with a size >50 bp. The content of DGV is only representing SV identified in healthy control samples from large cohorts published and integrated by the DGV team. The annotations will give information about whether your SV is a rare or a common variant. Warning: (1) Exceptional overestimation of the relative frequencies. In DGV Gold Standard (March 2016), +/- 10% of the supporting variants are not released with sample information preventing AnnotSV to properly differentiate whether some variation are redundant or not. Consequently, some relative frequencies can be exceptionally overestimated by AnnotSV. (2) Gain/Loss. A SV call in DGV can be relative to a specific reference sample, a pool of reference samples or relative to the reference assembly. Since different reference samples may have been used in different studies, what is called as a gain in one study may actually be called a loss in another.','ANNOTSV','split|DGV_LOSS_Frequency','AnnotSV 2.5 (DGV 2016-05-15)','737','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('imh_id','_custom_annotations','VARCHAR(100)','INFO','Ira M. Hall\\'s lab IDs overlapping the annotated SV. Ira M. Hall\\'s lab characterized SV in 17,795 deeply sequenced human genomes from common disease trait mapping studies (Abel et al., 2020). They publicly released SV frequency annotations to guide SV analysis and interpretation in the era of WGS.','ANNOTSV','split|IMH_ID','AnnotSV 2.5 (Hira M. Hall lab 2018-12-31)','740','allele frequency (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('imh_af','_custom_annotations','DOUBLE','INFO','IMH Allele Frequency. Ira M. Hall\\'s lab characterized SV in 17,795 deeply sequenced human genomes from common disease trait mapping studies (Abel et al., 2020). They publicly released SV frequency annotations to guide SV analysis and interpretation in the era of WGS.','ANNOTSV','split|IMH_AF','AnnotSV 2.5 (Hira M. Hall lab 2018-12-31)','741','allele frequency (other DB)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('imh_id_others','_custom_annotations','TEXT','INFO','Other IMH IDs overlapping the annotated SV (with a different SV type). Ira M. Hall\\'s lab characterized SV in 17,795 deeply sequenced human genomes from common disease trait mapping studies (Abel et al., 2020). They publicly released SV frequency annotations to guide SV analysis and interpretation in the era of WGS.','ANNOTSV','split|IMH_ID_others','AnnotSV 2.5 (Hira M. Hall lab 2018-12-31)','742','allele frequency (other DB)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_id','_gene_annotations','INT(10) UNSIGNED','INFO','gene unique identifier in gene annotations.','HIGHLANDER','','Highlander','0','gene annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_symbol','_gene_annotations','VARCHAR(50)','INFO','Gene symbol.','VCF','INFO|ANN','snpEff 4.1','1','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_old_names','_gene_annotations','TEXT','INFO','Old gene symbol (from HGNC)','DBNSFP','genes|Gene_old_names','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','2','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_other_names','_gene_annotations','TEXT','INFO','Other gene names (from HGNC)','DBNSFP','genes|Gene_other_names','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','3','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('biotype','_gene_annotations','VARCHAR(40)','INFO','BioType, as reported by ENSEMBL.','VCF','INFO|ANN','snpEff 4.1','4','gene annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_ensembl','_gene_annotations','VARCHAR(25)','INFO','Gene ID (usually ENSEMBL)','VCF','INFO|ANN','snpEff 4.1','5','gene annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('transcript_ensembl','_gene_annotations','VARCHAR(40)','INFO','Ensembl ID of the canonical transcript.','ENSEMBL','','Ensembl','6','gene annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('transcript_uniprot_id','_gene_annotations','VARCHAR(255)','INFO','UniProt ID of the canonical transcript.','ENSEMBL','','Ensembl','7','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('transcript_refseq_prot','_gene_annotations','VARCHAR(255)','INFO','RefSeq Protein ID of the canonical transcript.','ENSEMBL','','Ensembl','8','gene annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('transcript_refseq_mrna','_gene_annotations','VARCHAR(255)','INFO','RefSeq mRNA ID of the canonical transcript.','ENSEMBL','','Ensembl','9','gene annotations','moderate','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('entrez_gene_id','_gene_annotations','INT','INFO','Entrez gene id (from HGNC)','DBNSFP','genes|Entrez_gene_id','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','13','gene annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ccds_id','_gene_annotations','TEXT','INFO','CCDS id (from HGNC)','DBNSFP','genes|CCDS_id','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','14','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ucsc_id','_gene_annotations','VARCHAR(50)','INFO','UCSC gene id (from HGNC)','DBNSFP','genes|ucsc_id','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','16','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mim_id','_gene_annotations','INT','INFO','MIM gene id (from HGNC)','DBNSFP','genes|MIM_id','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','17','gene annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('omim_id','_gene_annotations','INT','INFO','MIM gene id from OMIM','DBNSFP','genes|OMIM_id','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','18','gene annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_full_name','_gene_annotations','TEXT','INFO','Gene full name (from HGNC)','DBNSFP','genes|Gene_full_name','dbNSFP 4.1 (HGNC, downloaded on October 21, 2018)','19','gene annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_cds_length','_custom_annotations','INT','INFO','Length of the CoDing Sequence (CDS) (bp) overlapping the SV','ANNOTSV','split|CDS length','AnnotSV 2.5 (Ensembl 2020-07-13)','200','gene annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_tx_length','_custom_annotations','INT','INFO','Length of the transcript (bp) overlapping with the SV','ANNOTSV','split|tx length','AnnotSV 2.5 (Ensembl 2020-07-13)','201','gene annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_location','_custom_annotations','VARCHAR(50)','INFO','SV location in the gene\\'s (e.g. \\\"txStart-exon1\\\") ','ANNOTSV','split|location','AnnotSV 2.5 (Ensembl 2020-07-13)','202','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_location_cds','_custom_annotations','VARCHAR(50)','INFO','SV location in the gene\\'s coding regions (e.g. \\\"3\\'UTR-CDS\\\") ','ANNOTSV','split|location2','AnnotSV 2.5 (Ensembl 2020-07-13)','203','gene annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('start_intersect_tx','_custom_annotations','INT','INFO','Start position of the intersection between the SV and a transcript ','ANNOTSV','split|intersectStart','AnnotSV 2.5 (Ensembl 2020-07-13)','204','gene annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('end_intersect_tx','_custom_annotations','INT','INFO','End position of the intersection between the SV and a transcript ','ANNOTSV','split|intersectEnd','AnnotSV 2.5 (Ensembl 2020-07-13)','205','gene annotations','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sv_frame_shift','_custom_annotations','BOOLEAN','INFO','Indicates if the CDS length is not divisible by three (yes or no)','ANNOTSV','split|frameshift','AnnotSV 2.5 (Ensembl 2020-07-13)','206','gene annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('acmg_genes','_custom_annotations','VARCHAR(255)','INFO','ACMG genes. The American College of Medical Genetics and Genomics has published recommendations for reporting incidental or secondary findings in genes with a medical benefit. The most recent version of the recommendations is the ACMG SF v2.0 including 59 genes.','ANNOTSV','split|ACMG','AnnotSV 2.5 (ACMG SF 2.0)','220','gene annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_pli','_gene_annotations','DOUBLE','INFO','the probability of being loss-of-function intolerant (intolerant of both heterozygous and homozygous lof variants) based on ExAC r0.3 data. pLI indicates the probability that a gene is intolerant to a loss of function mutation. ExAC consider pLI>= 0.9 as an extremely LoF intolerant set of genes.','DBNSFP','genes|ExAC_pLI','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','1','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_prec','_gene_annotations','DOUBLE','INFO','the probability of being intolerant of homozygous, but not heterozygous lof variants based on ExAC r0.3 data','DBNSFP','genes|ExAC_pRec','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','2','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_pnull','_gene_annotations','DOUBLE','INFO','the probability of being tolerant of both heterozygous and homozygous lof variants based on ExAC r0.3 data','DBNSFP','genes|ExAC_pNull','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','3','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_pli','_gene_annotations','DOUBLE','INFO','the probability of being loss-of-function intolerant (intolerant of both heterozygous and homozygous lof variants) based on ExAC r0.3 nonTCGA subset. pLI indicates the probability that a gene is intolerant to a loss of function mutation. ExAC consider pLI>= 0.9 as an extremely LoF intolerant set of genes.','DBNSFP','genes|ExAC_nonTCGA_pLI','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','4','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_prec','_gene_annotations','DOUBLE','INFO','the probability of being intolerant of homozygous, but not heterozygous lof variants based on ExAC r0.3 nonTCGA subset','DBNSFP','genes|ExAC_nonTCGA_pRec','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','5','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nontcga_pnull','_gene_annotations','DOUBLE','INFO','the probability of being tolerant of both heterozygous and homozygous lof variants based on ExAC r0.3 nonTCGA subset','DBNSFP','genes|ExAC_nonTCGA_pNull','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','6','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_pli','_gene_annotations','DOUBLE','INFO','the probability of being loss-of-function intolerant (intolerant of both heterozygous and homozygous lof variants) based on ExAC r0.3 nonpsych subset. pLI indicates the probability that a gene is intolerant to a loss of function mutation. ExAC consider pLI>= 0.9 as an extremely LoF intolerant set of genes.','DBNSFP','genes|ExAC_nonpsych_pLI','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','7','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_prec','_gene_annotations','DOUBLE','INFO','the probability of being intolerant of homozygous, but not heterozygous lof variants based on ExAC r0.3 nonpsych subset','DBNSFP','genes|ExAC_nonpsych_pRec','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','8','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_nonpsych_pnull','_gene_annotations','DOUBLE','INFO','the probability of being tolerant of both heterozygous and homozygous lof variants based on ExAC r0.3 nonpsych subset','DBNSFP','genes|ExAC_nonpsych_pNull','DBNSFP 4.1 (ExAC v0.3 http://exac.broadinstitute.org/)','9','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_pli','_gene_annotations','DOUBLE','INFO','the probability of being loss-of-function intolerant (intolerant of both heterozygous and homozygous lof variants) based on gnomAD 2.1 data. pLI indicates the probability that a gene is intolerant to a loss of function mutation. ExAC consider pLI>= 0.9 as an extremely LoF intolerant set of genes.','DBNSFP','genes|gnomAD_pLI','DBNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','10','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_prec','_gene_annotations','DOUBLE','INFO','the probability of being intolerant of homozygous, but not heterozygous lof variants based on gnomAD 2.1 data','DBNSFP','genes|gnomAD_pRec','DBNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','11','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gnomad_pnull','_gene_annotations','DOUBLE','INFO','the probability of being tolerant of both heterozygous and homozygous lof variants based on gnomAD 2.1 data','DBNSFP','genes|gnomAD_pNull','DBNSFP 4.1 (gnomAD genome 3.0 http://gnomad.broadinstitute.org/downloads)','12','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_del_score','_gene_annotations','DOUBLE','INFO','Winsorised deletion intolerance z-score based on ExAC r0.3.1 CNV data. Higher positive values indicate greater intolerance (a lower than expected rate of CNVs for that gene).','DBNSFP','genes|ExAC_del.score','dbNSFP 4.1 (ExAC Functional Gene Constraint, from release0.3.1)','20','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_dup_score','_gene_annotations','DOUBLE','INFO','Winsorised duplication intolerance z-score based on ExAC r0.3.1 CNV data. Higher positive values indicate greater intolerance (a lower than expected rate of CNVs for that gene).','DBNSFP','genes|ExAC_dup.score','dbNSFP 4.1 (ExAC Functional Gene Constraint, from release0.3.1)','21','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_cnv_score','_gene_annotations','DOUBLE','INFO','Winsorised cnv intolerance z-score based on ExAC r0.3.1 CNV data. Higher positive values indicate greater intolerance (a lower than expected rate of CNVs for that gene).','DBNSFP','genes|ExAC_cnv.score','dbNSFP 4.1 (ExAC CNV gene score, from release0.3.1)','22','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_cnv_flag','_gene_annotations','BOOLEAN','INFO','Gene is in a known region of recurrent CNVs mediated by tandem segmental duplications and intolerance scores are more likely to be biased or noisy. from ExAC r0.3.1 CNV release','DBNSFP','genes|ExAC_cnv_flag','dbNSFP 4.1 (ExAC CNV gene score, from release0.3.1)','23','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_synonymous_score','_custom_annotations','DOUBLE','INFO','Positive synZ_ExAC (Z score) from ExAC indicate gene intolerance to synonymous variation. Gene intolerance annotations from the ExAC give the significance deviation from the observed and the expected number of variants for each gene. Positive Z scores indicate gene intolerance to synonymous variation.','ANNOTSV','split|synZ_ExAC','AnnotSV 2.5 (ExAC 2016-01-14)','24','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exac_missense_score','_custom_annotations','DOUBLE','INFO','Positive misZ_ExAC (Z score) from ExAC indicate gene intolerance to missense variation. Gene intolerance annotations from the ExAC give the significance deviation from the observed and the expected number of variants for each gene. Positive Z scores indicate gene intolerance to missense variation.','ANNOTSV','split|misZ_ExAC','AnnotSV 2.5 (ExAC 2016-01-14)','25','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rvis_evs','_gene_annotations','DOUBLE','INFO','Residual Variation Intolerance Score, a measure of intolerance of mutational burden, the higher the score the more tolerant to mutational burden the gene is. Based on EVS (ESP6500) data. from doi:10.1371/journal.pgen.1003709','DBNSFP','genes|RVIS_EVS','dbNSFP 4.1 (Residual Variation Intolerance Score (RVIS), v3  http://genic-intolerance.org/)','30','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rvis_percentile_evs','_gene_annotations','DOUBLE','INFO','The percentile rank of the gene based on RVIS, the higher the percentile the more tolerant to mutational burden the gene is. Based on EVS (ESP6500) data.','DBNSFP','genes|RVIS_percentile_EVS','dbNSFP 4.1 (Residual Variation Intolerance Score (RVIS), v3  http://genic-intolerance.org/)','31','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('lof_fdr_exac','_gene_annotations','DOUBLE','INFO','A gene\\'s corresponding FDR p-value for preferential LoF depletion among the ExAC population. Lower FDR corresponds with genes that are increasingly depleted of LoF variants. cited from RVIS document.','DBNSFP','genes|LoF-FDR_ExAC','dbNSFP 4.1 (Residual Variation Intolerance Score (RVIS), v3  http://genic-intolerance.org/)','32','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rvis_exac','_gene_annotations','DOUBLE','INFO','ExAC-based RVIS; setting \\'common\\' MAF filter at 0.05% in at least one of the six individual ethnic strata from ExAC. cited from RVIS document.','DBNSFP','genes|RVIS_ExAC','dbNSFP 4.1 (Residual Variation Intolerance Score (RVIS), v3  http://genic-intolerance.org/)','33','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('rvis_percentile_exac','_gene_annotations','DOUBLE','INFO','Genome-Wide percentile for the new ExAC-based RVIS; setting \\'common\\' MAF filter at 0.05% in at least one of the six individual ethnic strata from ExAC. cited from RVIS document.','DBNSFP','genes|RVIS_percentile_ExAC','dbNSFP 4.1 (Residual Variation Intolerance Score (RVIS), v3  http://genic-intolerance.org/)','34','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gdi_score','_gene_annotations','DOUBLE','INFO','gene damage index score, \\\"a genome-wide, gene-level metric of the mutational damage that has accumulated in the general population\\\" from doi: 10.1073/pnas.1518646112. The higher the score the less likely the gene is to be responsible for monogenic diseases.','DBNSFP','genes|GDI','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','40','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gdi_phred','_gene_annotations','DOUBLE','INFO','Phred-scaled GDI scores','DBNSFP','genes|GDI-Phred','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','41','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_all','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for all diseases','DBNSFP','genes|Gene_damage_prediction_all','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','42','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_all_mendelian','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for all Mendelian diseases','DBNSFP','genes|Gene_damage_prediction_all_Mendelian','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','43','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_mendelian_ad','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for Mendelian autosomal dominant diseases','DBNSFP','genes|Gene_damage_prediction_Mendelian_AD','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','44','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_mendelian_ar','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for Mendelian autosomal recessive diseases','DBNSFP','genes|Gene_damage_prediction_Mendelian_AR','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','45','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_all_pid','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for all primary immunodeficiency diseases','DBNSFP','genes|Gene_damage_prediction_all_PID','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','46','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_pid_ad','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for primary immunodeficiency autosomal dominant diseases','DBNSFP','genes|Gene_damage_prediction_PID_AD','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','47','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_pid_ar','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for primary immunodeficiency autosomal recessive diseases','DBNSFP','genes|Gene_damage_prediction_PID_AR','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','48','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_all_cancer','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for all cancer disease','DBNSFP','genes|Gene_damage_prediction_all_cancer','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','49','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_cancer_recessive','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for cancer recessive disease','DBNSFP','genes|Gene_damage_prediction_cancer_recessive','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','50','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_damage_prediction_cancer_dominant','_gene_annotations','VARCHAR(10)','INFO','gene damage prediction (low/medium/high) by GDI for cancer dominant disease','DBNSFP','genes|Gene_damage_prediction_cancer_dominant','dbNSFP 4.1 (GDI, from doi: 10.1073/pnas.1518646112)','51','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('loftool_score','_gene_annotations','DOUBLE','INFO','a percentile score for gene intolerance to functional change. The lower the score the higher gene intolerance to functional change. For details see doi: 10.1093/bioinformatics/btv602.','DBNSFP','genes|LoFtool_score','dbNSFP 4.1 (LoFtool, from DOI:10.1093/bioinformatics/btv602)','60','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_lof_maf005_hetorhom','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Heterozygote or Homozygote of LOF SNVs whose MAF<0.005. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOF_MAF0.005_HetOrHom','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','70','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_lof_maf005_homorcompoundhet','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Compound Heterozygote or Homozygote of LOF SNVs whose MAF<0.005. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOF_MAF0.005_HomOrCompoundHet','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','71','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_lof_maf001_hetorhom','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Heterozygote or Homozygote of LOF SNVs whose MAF<0.001. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOF_MAF0.001_HetOrHom','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','72','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_lof_maf001_homorcompoundhet','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Compound Heterozygote or Homozygote of LOF SNVs whose MAF<0.001. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOF_MAF0.001_HomOrCompoundHet','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','73','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_loformissense_maf005_hetorhom','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.005. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOForMissense_MAF0.005_HetOrHom','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','74','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_loformissense_maf005_homorcompoundhet','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Compound Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.005. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOForMissense_MAF0.005_HomOrCompoundHet','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','75','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_loformissense_maf001_hetorhom','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.001. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOForMissense_MAF0.001_HetOrHom','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','76','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sorva_loformissense_maf001_homorcompoundhet','_gene_annotations','DOUBLE','INFO','the fraction of individuals in the 1000 Genomes Project data (N=2504) who are either Compound Heterozygote or Homozygote of LOF or missense SNVs whose MAF<0.001. This fraction is from a method for ranking genes based on mutational burden called SORVA (Significance Of Rare VAriants). Please see doi: 10.1101/103218 for details.','DBNSFP','genes|SORVA_LOForMissense_MAF0.001_HomOrCompoundHet','dbNSFP 4.1 (SORVA, from doi: 10.1101/103218)','77','gene annotations (mutation tolerance)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('essential_gene','_gene_annotations','VARCHAR(1)','INFO','Essential (\\\"E\\\") or Non-essential phenotype-changing (\\\"N\\\") based on Mouse Genome Informatics database. from doi:10.1371/journal.pgen.1003484','DBNSFP','genes|Essential_gene','dbNSFP 4.1 (Essential genes, from doi:10.1371/journal.pgen.1003484, doi: 10.1126/science.aac7041, doi: 10.1016/j.cell.2015.11.015, doi: 10.1126/science.aac7557, doi:10.1371/journal.pcbi.1002886)','80','gene annotations (mutation tolerance)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('essential_gene_crispr','_gene_annotations','VARCHAR(1)','INFO','Essential (\\\"E\\\") or Non-essential phenotype-changing (\\\"N\\\") based on large scale CRISPR experiments. from doi: 10.1126/science.aac7041','DBNSFP','genes|Essential_gene_CRISPR','dbNSFP 4.1 (Essential genes, from doi:10.1371/journal.pgen.1003484, doi: 10.1126/science.aac7041, doi: 10.1016/j.cell.2015.11.015, doi: 10.1126/science.aac7557, doi:10.1371/journal.pcbi.1002886)','81','gene annotations (mutation tolerance)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('essential_gene_crispr2','_gene_annotations','VARCHAR(1)','INFO','Essential (\\\"E\\\"), context-Specific essential (\\\"S\\\"), or Non-essential phenotype-changing (\\\"N\\\") based on large scale CRISPR experiments. from http://dx.doi.org/10.1016/j.cell.2015.11.015','DBNSFP','genes|Essential_gene_CRISPR2','dbNSFP 4.1 (Essential genes, from doi:10.1371/journal.pgen.1003484, doi: 10.1126/science.aac7041, doi: 10.1016/j.cell.2015.11.015, doi: 10.1126/science.aac7557, doi:10.1371/journal.pcbi.1002886)','82','gene annotations (mutation tolerance)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('essential_gene_gene_trap','_gene_annotations','VARCHAR(1)','INFO','Essential (\\\"E\\\"), HAP1-Specific essential (\\\"H\\\"), KBM7-Specific essential (\\\"K\\\"), or Non-essential phenotype-changing (\\\"N\\\"), based on large scale mutagenesis experiments. from doi: 10.1126/science.aac7557','DBNSFP','genes|Essential_gene_gene-trap','dbNSFP 4.1 (Essential genes, from doi:10.1371/journal.pgen.1003484, doi: 10.1126/science.aac7041, doi: 10.1016/j.cell.2015.11.015, doi: 10.1126/science.aac7557, doi:10.1371/journal.pcbi.1002886)','83','gene annotations (mutation tolerance)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_indispensability_score','_gene_annotations','DOUBLE','INFO','A probability prediction of the gene being essential. From doi:10.1371/journal.pcbi.1002886','DBNSFP','genes|Gene_indispensability_score','dbNSFP 4.1 (Essential genes, from doi:10.1371/journal.pgen.1003484, doi: 10.1126/science.aac7041, doi: 10.1016/j.cell.2015.11.015, doi: 10.1126/science.aac7557, doi:10.1371/journal.pcbi.1002886)','90','gene annotations (mutation tolerance)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_indispensability_pred','_gene_annotations','VARCHAR(1)','INFO','Essential (\\\"E\\\") or loss-of-function tolerant (\\\"N\\\") based on Gene_indispensability_score.','DBNSFP','genes|Gene_indispensability_pred','dbNSFP 4.1 (Essential genes, from doi:10.1371/journal.pgen.1003484, doi: 10.1126/science.aac7041, doi: 10.1016/j.cell.2015.11.015, doi: 10.1126/science.aac7557, doi:10.1371/journal.pcbi.1002886)','91','gene annotations (mutation tolerance)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('haploinsufficiency_probability','_gene_annotations','DOUBLE','INFO','Estimated probability of haploinsufficiency of the gene (from doi:10.1371/journal.pgen.1001154)','DBNSFP','genes|P(HI)','dbNSFP 4.1 (Haploinsufficiency probability data, from doi:10.1371/journal.pgen.1001154)','1','gene annotations (transmission)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('haploinsufficiency_score','_gene_annotations','DOUBLE','INFO','Estimated probability of haploinsufficiency of the gene (from doi:10.1093/bioinformatics/btx028)','DBNSFP','genes|HIPred_score','dbNSFP 4.1 (HIPred, from doi:10.1093/bioinformatics/btx028)','2','gene annotations (transmission)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('haploinsufficiency','_gene_annotations','BOOLEAN','INFO','HIPred prediction of haploinsufficiency of the gene. Y(es) or N(o). (from doi:10.1093/bioinformatics/btx028)','DBNSFP','genes|HIPred','dbNSFP 4.1 (HIPred, from doi:10.1093/bioinformatics/btx028)','3','gene annotations (transmission)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('haploinsufficiency_ghis','_gene_annotations','DOUBLE','INFO','A score predicting the gene haploinsufficiency. The higher the score the more likely the gene is haploinsufficient. (from doi: 10.1093/nar/gkv474) ','DBNSFP','genes|GHIS','dbNSFP 4.1 (Genome-wide haploinsufficiency score (GHIS), from doi: 10.1093/nar/gkv474)','4','gene annotations (transmission)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clingen_haploinsufficiency_score','_custom_annotations','INT','INFO','ClinGen Haploinsufficiency Score. The ClinGen Consortium Rating System is curating genes and regions of the genome to assess whether there is evidence to support that these genes/regions are dosage sensitive. Haploinsufficiency and triplosensitivity scorings are ranged as follow: (3) Sufficient evidence for dosage pathogenicity. (2) Some evidence for dosage pathogenicity. (1) Little evidence for dosage pathogenicity. (0) No evidence for dosage pathogenicity. (40) Evidence suggests the gene is not dosage sensitive. (30) Gene associated with autosomal recessive phenotype.','ANNOTSV','split|HI_CGscore','AnnotSV 2.5 (ClinGen Consortium Rating System 2020-07-13)','5','gene annotations (transmission)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('clingen_triplosensitivity_score','_custom_annotations','INT','INFO','ClinGen Triplosensitivity Score. The ClinGen Consortium Rating System is curating genes and regions of the genome to assess whether there is evidence to support that these genes/regions are dosage sensitive. Haploinsufficiency and triplosensitivity scorings are ranged as follow: (3) Sufficient evidence for dosage pathogenicity. (2) Some evidence for dosage pathogenicity. (1) Little evidence for dosage pathogenicity. (0) No evidence for dosage pathogenicity. (40) Evidence suggests the gene is not dosage sensitive. (30) Gene associated with autosomal recessive phenotype.','ANNOTSV','split|TriS_CGscore','AnnotSV 2.5 (ClinGen Consortium Rating System 2020-07-13)','6','gene annotations (transmission)','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('recessive_probability','_gene_annotations','DOUBLE','INFO','Estimated probability that gene is a recessive disease gene (from DOI:10.1126/science.1215040)','DBNSFP','genes|P(rec)','dbNSFP 4.1 (Recessive probability data, from DOI:10.1126/science.1215040)','10','gene annotations (transmission)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('recessive_know_info','_gene_annotations','VARCHAR(20)','INFO','Known recessive status of the gene (from DOI:10.1126/science.1215040) \\\"lof-tolerant = seen in homozygous state in at least one 1000G individual\\\" \\\"recessive = known OMIM recessive disease\\\" (original annotations from DOI:10.1126/science.1215040)','DBNSFP','genes|Known_rec_info','dbNSFP 4.1 (Recessive probability data, from DOI:10.1126/science.1215040)','11','gene annotations (transmission)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_function_description','_gene_annotations','TEXT','INFO','Function description of the gene (from Uniprot)','DBNSFP','genes|Function_description','dbNSFP 4.1 (Uniprot, Release 2019_01)','1','gene annotations (function)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('go_biological_process','_gene_annotations','TEXT','INFO','GO terms for biological process','DBNSFP','genes|GO_biological_process','dbNSFP 4.1 (GO, downloaded on December 6, 2018)','10','gene annotations (function)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('go_cellular_component','_gene_annotations','TEXT','INFO','GO terms for cellular component','DBNSFP','genes|GO_cellular_component','dbNSFP 4.1 (GO, downloaded on December 6, 2018)','11','gene annotations (function)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('go_molecular_function','_gene_annotations','TEXT','INFO','GO terms for molecular function','DBNSFP','genes|GO_molecular_function','dbNSFP 4.1 (GO, downloaded on December 6, 2018)','12','gene annotations (function)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathway_uniprot','_gene_annotations','TEXT','INFO','Pathway description from Uniprot','DBNSFP','genes|Pathway(Uniprot)','dbNSFP 4.1 (Uniprot, Release 2019_01)','1','gene annotations (pathway)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathway_biocarta_short','_gene_annotations','TEXT','INFO','Short name of the Pathway(s) the gene belongs to (from BioCarta)','DBNSFP','genes|Pathway(BioCarta)_short','dbNSFP 4.1 (BioCarta pathway, from http://www.openbioinformatics.org/gengen/tutorial_calculate_gsea.html)','2','gene annotations (pathway)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathway_biocarta_full','_gene_annotations','TEXT','INFO','Full name(s) of the Pathway(s) the gene belongs to (from BioCarta)','DBNSFP','genes|Pathway(BioCarta)_full','dbNSFP 4.1 (BioCarta pathway, from http://www.openbioinformatics.org/gengen/tutorial_calculate_gsea.html)','3','gene annotations (pathway)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathway_consensuspathdb','_gene_annotations','TEXT','INFO','Pathway(s) the gene belongs to (from ConsensusPathDB)','DBNSFP','genes|Pathway(ConsensusPathDB)','dbNSFP 4.1 (ConsensusPathDB, Release 33)','4','gene annotations (pathway)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathway_kegg_id','_gene_annotations','TEXT','INFO','ID(s) of the Pathway(s) the gene belongs to (from KEGG)','DBNSFP','genes|Pathway(KEGG)_id','dbNSFP 4.1 (KEGG pathway, from http://www.openbioinformatics.org/gengen/tutorial_calculate_gsea.html)','5','gene annotations (pathway)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('pathway_kegg_full','_gene_annotations','TEXT','INFO','Full name(s) of the Pathway(s) the gene belongs to (from KEGG)','DBNSFP','genes|Pathway(KEGG)_full','dbNSFP 4.1 (KEGG pathway, from http://www.openbioinformatics.org/gengen/tutorial_calculate_gsea.html)','6','gene annotations (pathway)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('interactions_intact','_gene_annotations','LONGTEXT','INFO','The number of other genes this gene interacting with (from IntAct). Full information (gene name followed by Pubmed id in \\\"[]\\\") can be found in the \\\".complete\\\" table','DBNSFP','genes|Interactions(IntAct)','dbNSFP 4.1 (IntAct, downloaded on November 30, 2018)','10','gene annotations (pathway)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('interactions_biogrid','_gene_annotations','LONGTEXT','INFO','The number of other genes this gene interacting with (from BioGRID). Full information (gene name followed by Pubmed id in \\\"[]\\\") can be found in the \\\".complete\\\" table','DBNSFP','genes|Interactions(BioGRID)','dbNSFP 4.1 (BioGRID, version 3.5.167)','11','gene annotations (pathway)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('interactions_consensuspathdb','_gene_annotations','LONGTEXT','INFO','The number of other genes this gene interacting with (from ConsensusPathDB). Full information (gene name followed by interaction confidence in \\\"[]\\\") can be found in the \\\".complete\\\" table','DBNSFP','genes|Interactions(ConsensusPathDB)','dbNSFP 4.1 (ConsensusPathDB, Release 33)','12','gene annotations (pathway)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hpo_id','_gene_annotations','TEXT','INFO','ID of the mapped Human Phenotype Ontology. Multiple IDs are separated by \\\";\\\"','DBNSFP','genes|HPO_id','dbNSFP 4.1 (HPO, data release 20200608, https://hpo.jax.org/app/download/annotation)','1','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('hpo_name','_gene_annotations','TEXT','INFO','Name of the mapped Human Phenotype Ontology. Multiple names are separated by \\\";\\\"','DBNSFP','genes|HPO_name','dbNSFP 4.1 (HPO, data release 20200608, https://hpo.jax.org/app/download/annotation)','2','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mgi_mouse_gene','_gene_annotations','VARCHAR(50)','INFO','Homolog mouse gene name from MGI','DBNSFP','genes|MGI_mouse_gene','dbNSFP 4.1 (Mouse genes, from Mouse Genome Informatics (MGI), 6.13)','10','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mgi_mouse_phenotype','_gene_annotations','TEXT','INFO','Phenotype description for the homolog mouse gene from MGI','DBNSFP','genes|MGI_mouse_phenotype','dbNSFP 4.1 (Mouse genes, from Mouse Genome Informatics (MGI), 6.13)','11','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('zfin_zebrafish_gene','_gene_annotations','VARCHAR(50)','INFO','Homolog zebrafish gene name from ZFIN','DBNSFP','genes|ZFIN_zebrafish_gene','dbNSFP 4.1 (Zebrafish genes, from The Zebrafish Information Network (ZFIN), downloaded on December 7,2018)','20','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('zfin_zebrafish_structure','_gene_annotations','TEXT','INFO','Affected structure of the homolog zebrafish gene from ZFIN','DBNSFP','genes|ZFIN_zebrafish_structure','dbNSFP 4.1 (Zebrafish genes, from The Zebrafish Information Network (ZFIN), downloaded on December 7,2018)','21','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('zfin_zebrafish_phenotype_quality','_gene_annotations','TEXT','INFO','Phenotype description for the homolog zebrafish gene from ZFIN','DBNSFP','genes|ZFIN_zebrafish_phenotype_quality','dbNSFP 4.1 (Zebrafish genes, from The Zebrafish Information Network (ZFIN), downloaded on December 7,2018)','22','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('zfin_zebrafish_phenotype_tag','_gene_annotations','TEXT','INFO','Phenotype tag for the homolog zebrafish gene from ZFIN','DBNSFP','genes|ZFIN_zebrafish_phenotype_tag','dbNSFP 4.1 (Zebrafish genes, from The Zebrafish Information Network (ZFIN), downloaded on December 7,2018)','23','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exomiser_gene_pheno_score','_custom_annotations','DOUBLE','INFO','Exomiser score for how close each overlapped gene is to the phenotype. To score genes overlapped with a SV on biological relevance to the individual phenotype, AnnotSV takes use of Exomiser. For a given phenotype, a HPO-based score corresponding to a damaging probability is provided for each gene overlapped with an SV so that: - Genes previously associated with disease can be highlighted easily. - Genes not previously associated with disease can be highlighted. - Genes associated with diseases that have little or no similarity to the observed phenotypes can be removed along. AnnotSV uses the Human Phenotype Ontology (version reported in the AnnotSV output). Find out more at http://www.human-phenotype-ontology.org','ANNOTSV','split|EXOMISER_GENE_PHENO_SCORE','AnnotSV 2.5 (Exomiser 2020-03-18)','30','gene annotations (phenotype)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exomiser_human_evidence','_custom_annotations','TEXT','INFO','Phenotypic evidence from Human model.  To score genes overlapped with a SV on biological relevance to the individual phenotype, AnnotSV takes use of Exomiser. For a given phenotype, a HPO-based score corresponding to a damaging probability is provided for each gene overlapped with an SV so that: - Genes previously associated with disease can be highlighted easily. - Genes not previously associated with disease can be highlighted. - Genes associated with diseases that have little or no similarity to the observed phenotypes can be removed along. AnnotSV uses the Human Phenotype Ontology (version reported in the AnnotSV output). Find out more at http://www.human-phenotype-ontology.org','ANNOTSV','split|HUMAN_PHENO_EVIDENCE','AnnotSV 2.5 (Exomiser 2020-03-18)','31','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exomiser_mouse_evidence','_custom_annotations','TEXT','INFO','Phenotypic evidence from Mouse model.  To score genes overlapped with a SV on biological relevance to the individual phenotype, AnnotSV takes use of Exomiser. For a given phenotype, a HPO-based score corresponding to a damaging probability is provided for each gene overlapped with an SV so that: - Genes previously associated with disease can be highlighted easily. - Genes not previously associated with disease can be highlighted. - Genes associated with diseases that have little or no similarity to the observed phenotypes can be removed along. AnnotSV uses the Human Phenotype Ontology (version reported in the AnnotSV output). Find out more at http://www.human-phenotype-ontology.org','ANNOTSV','split|MOUSE_PHENO_EVIDENCE','AnnotSV 2.5 (Exomiser 2020-03-18)','32','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('exomiser_fish_evidence','_custom_annotations','TEXT','INFO','Phenotypic evidence from Fish model.  To score genes overlapped with a SV on biological relevance to the individual phenotype, AnnotSV takes use of Exomiser. For a given phenotype, a HPO-based score corresponding to a damaging probability is provided for each gene overlapped with an SV so that: - Genes previously associated with disease can be highlighted easily. - Genes not previously associated with disease can be highlighted. - Genes associated with diseases that have little or no similarity to the observed phenotypes can be removed along. AnnotSV uses the Human Phenotype Ontology (version reported in the AnnotSV output). Find out more at http://www.human-phenotype-ontology.org','ANNOTSV','split|FISH_PHENO_EVIDENCE','AnnotSV 2.5 (Exomiser 2020-03-18)','33','gene annotations (phenotype)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('disease_description','_gene_annotations','TEXT','INFO','Disease(s) the gene caused or associated with (from Uniprot)','DBNSFP','genes|Disease_description','dbNSFP 4.1 (Uniprot, Release 2019_01)','1','gene annotations (diseases)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mim_phenotype_id','_gene_annotations','TEXT','INFO','MIM id(s) of the phenotype the gene caused or associated with (from Uniprot)','DBNSFP','genes|MIM_phenotype_id','dbNSFP 4.1 (Uniprot, Release 2019_01)','10','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('mim_disease','_gene_annotations','TEXT','INFO','MIM disease name(s) with MIM id(s) in \\\"[]\\\" (from Uniprot)','DBNSFP','genes|MIM_disease','dbNSFP 4.1 (Uniprot, Release 2019_01)','11','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('omim_phenotypes','_custom_annotations','TEXT','INFO','OMIM (Online Mendelian Inheritance in Man) (Hamosh et al., 2000) focuses on the relationship between phenotype and genotype. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version). Moreover, a morbid genes list is provided.','ANNOTSV','split|Phenotypes','AnnotSV 2.5 (OMIM 2020-05-28)','12','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('omim_inheritance','_custom_annotations','VARCHAR(30)','INFO','Modes of inheritance for single-gene diseases: autosomal dominant (AD), autosomal recessive (AR), X-linked dominant (XLD), X-linked recessive (XLR), X-linked (XL), Y-linked dominant (YLD), Y-linked recessive (YLR),  Y-linked (YL). OMIM (Online Mendelian Inheritance in Man) (Hamosh et al., 2000) focuses on the relationship between phenotype and genotype. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version). Moreover, a morbid genes list is provided.','ANNOTSV','split|Inheritance','AnnotSV 2.5 (OMIM 2020-05-28)','13','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('omim_morbidgenes','_custom_annotations','BOOLEAN','INFO','True if the SV overlaps an OMIM morbid gene. OMIM (Online Mendelian Inheritance in Man) (Hamosh et al., 2000) focuses on the relationship between phenotype and genotype. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version). Moreover, a morbid genes list is provided.','ANNOTSV','split|morbidGenes','AnnotSV 2.5 (OMIM 2020-05-28)','14','gene annotations (diseases)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('omim_morbidgenes_candidates','_custom_annotations','BOOLEAN','INFO','True if the SV overlaps an OMIM morbid gene candidate. OMIM (Online Mendelian Inheritance in Man) (Hamosh et al., 2000) focuses on the relationship between phenotype and genotype. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version). Moreover, a morbid genes list is provided.','ANNOTSV','split|morbidGenesCandidates','AnnotSV 2.5 (OMIM 2020-05-28)','15','gene annotations (diseases)','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('orphanet_disorder_id','_gene_annotations','TEXT','INFO','Orphanet Number of the disorder the gene caused or associated with','DBNSFP','genes|Orphanet_disorder_id','dbNSFP 4.1','20','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('orphanet_disorder','_gene_annotations','TEXT','INFO','Disorder name from Orphanet','DBNSFP','genes|Orphanet_disorder','dbNSFP 4.1','21','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('orphanet_association_type','_gene_annotations','TEXT','INFO','the type of association beteen the gene and the disorder','DBNSFP','genes|Orphanet_association_type','dbNSFP 4.1','22','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('trait_association_gwas','_gene_annotations','TEXT','INFO','Trait(s) the gene associated with (from GWAS catalog)','DBNSFP','genes|Trait_association(GWAS)','dbNSFP 4.1 (GWAS catalog, r2018-11-26)','30','gene annotations (diseases)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_status','_custom_annotations','VARCHAR(200)','INFO','DDD category: e.g. confirmed, probable, possible, etc. The Deciphering Developmental Disorders (DDD) Study (Firth et al., 2011) has recruited nearly 14,000 children with severe undiagnosed developmental disorders, and their parents from around the UK and Ireland. The patients have been deeply phenotyped by their referring clinician via DECIPHER using the Human Phenotype Ontology. The DNA from these children have been explored using high-resolution exon-array CGH and exome sequencing (trio) to investigate the genetic causes of their abnormal development. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version).','ANNOTSV','split|DDD_status','AnnotSV 2.5 (DDD 2020-07-13)','40','gene annotations (diseases)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_mode','_custom_annotations','VARCHAR(200)','INFO','DDD allelic requirement: e.g. biallelic, hemizygous, etc. The Deciphering Developmental Disorders (DDD) Study (Firth et al., 2011) has recruited nearly 14,000 children with severe undiagnosed developmental disorders, and their parents from around the UK and Ireland. The patients have been deeply phenotyped by their referring clinician via DECIPHER using the Human Phenotype Ontology. The DNA from these children have been explored using high-resolution exon-array CGH and exome sequencing (trio) to investigate the genetic causes of their abnormal development. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version).','ANNOTSV','split|DDD_mode','AnnotSV 2.5 (DDD 2020-07-13)','41','gene annotations (diseases)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_consequence','_custom_annotations','VARCHAR(200)','INFO','DDD mutation consequence: e.g. \\\"loss of function\\\", uncertain, etc. The Deciphering Developmental Disorders (DDD) Study (Firth et al., 2011) has recruited nearly 14,000 children with severe undiagnosed developmental disorders, and their parents from around the UK and Ireland. The patients have been deeply phenotyped by their referring clinician via DECIPHER using the Human Phenotype Ontology. The DNA from these children have been explored using high-resolution exon-array CGH and exome sequencing (trio) to investigate the genetic causes of their abnormal development. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version).','ANNOTSV','split|DDD_consequence','AnnotSV 2.5 (DDD 2020-07-13)','42','gene annotations (diseases)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_disease','_custom_annotations','VARCHAR(750)','INFO','DDD disease name: e.g. \\\"OCULOAURICULAR SYNDROME\\\". The Deciphering Developmental Disorders (DDD) Study (Firth et al., 2011) has recruited nearly 14,000 children with severe undiagnosed developmental disorders, and their parents from around the UK and Ireland. The patients have been deeply phenotyped by their referring clinician via DECIPHER using the Human Phenotype Ontology. The DNA from these children have been explored using high-resolution exon-array CGH and exome sequencing (trio) to investigate the genetic causes of their abnormal development. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version).','ANNOTSV','split|DDD_disease','AnnotSV 2.5 (DDD 2020-07-13)','43','gene annotations (diseases)','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_pmids','_custom_annotations','VARCHAR(200)','INFO','DDD Pubmed Id. The Deciphering Developmental Disorders (DDD) Study (Firth et al., 2011) has recruited nearly 14,000 children with severe undiagnosed developmental disorders, and their parents from around the UK and Ireland. The patients have been deeply phenotyped by their referring clinician via DECIPHER using the Human Phenotype Ontology. The DNA from these children have been explored using high-resolution exon-array CGH and exome sequencing (trio) to investigate the genetic causes of their abnormal development. These annotations give additional information on each gene overlapped by a SV (independently of the genome build version).','ANNOTSV','split|DDD_pmids','AnnotSV 2.5 (DDD 2020-07-13)','44','gene annotations (diseases)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ddd_haploinsufficiency','_custom_annotations','DOUBLE','INFO','Haploinsufficiency ranks from DDD. Haploinsufficiency, wherein a single functional copy of a gene is insufficient to maintain normal function, is a major cause of dominant disease. As detailed in DECIPHER, over 17,000 protein coding genes have been scored according to their predicted probability of exhibiting haploinsufficiency: High ranks (e.g. 0-10%) indicate a gene is more likely to exhibit haploinsufficiency. Low ranks (e.g. 90-100%) indicate a gene is more likely to NOT exhibit haploinsufficiency. This annotation give additional information on each gene overlapped by a SV (independently of the genome build version).','ANNOTSV','split|HI_DDDpercent','AnnotSV 2.5 (DDD 2020-07-13)','45','gene annotations (diseases)','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('tissue_specificity_uniprot','_gene_annotations','TEXT','INFO','Tissue specificity description from Uniprot','DBNSFP','genes|Tissue_specificity(Uniprot)','dbNSFP 4.1 (Uniprot, Release 2019_01)','1','gene annotations (expression)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('expression_egenetics','_gene_annotations','TEXT','INFO','Tissues/organs the gene expressed in (egenetics data from BioMart)','DBNSFP','genes|Expression(egenetics)','dbNSFP 4.1 (egenetics and GNF/Atlas expression data, downloaded from BioMart on Oct. 1, 2013)','10','gene annotations (expression)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('expression_gnf_atlas','_gene_annotations','TEXT','INFO','Tissues/organs the gene expressed in (GNF/Atlas data from BioMart)','DBNSFP','genes|Expression(GNF/Atlas)','dbNSFP 4.1 (egenetics and GNF/Atlas expression data, downloaded from BioMart on Oct. 1, 2013)','20','gene annotations (expression)','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ancestral_allele','_static_annotations','VARCHAR(1)','INFO','ancestral allele based on 8 primates EPO. Ancestral alleles by Ensembl 84. The following comes from its original README file: ACTG - high-confidence call, ancestral state supported by the other two sequences. actg - low-confidence call, ancestral state supported by one sequence only. N    - failure, the ancestral state is not supported by any other sequence. -    - the extant species contains an insertion at this position.','DBNSFP','chromosome_[chr]|Ancestral_allele','dbNSFP 4.1 (Ancestral alleles (hg38) ftp://ftp.ensembl.org/pub/release-93/fasta/ancestral_alleles/homo_sapiens_ancestor_GRCh38.tar.gz)','1','ancestral alleles','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ancestral_allele_altai_neandertal','_static_annotations','VARCHAR(3)','INFO','genotype of a deep sequenced Altai Neanderthal','DBNSFP','chromosome_[chr]|AltaiNeandertal','dbNSFP 4.1 (Altai Neanderthal genotypes: http://cdna.eva.mpg.de/neandertal/Vindija/VCF/Altai/)','2','ancestral alleles','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ancestral_allele_denisova','_static_annotations','VARCHAR(3)','INFO','genotype of a deep sequenced Denisova','DBNSFP','chromosome_[chr]|Denisova','dbNSFP 4.1 (Denisova genotypes: http://cdna.eva.mpg.de/neandertal/Vindija/VCF/Denisova/)','3','ancestral alleles','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('ancestral_allele_vindijia_neandertal','_static_annotations','VARCHAR(3)','INFO','genotype of a deep sequenced Vindijia Neandertal','DBNSFP','chromosome_[chr]|VindijiaNeandertal','dbNSFP 4.1 (Vindija33.19 genotypes: http://cdna.eva.mpg.de/neandertal/Vindija/VCF/Vindija33.19/)','4','ancestral alleles','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('grantham_dist','_custom_annotations','DOUBLE','INFO','Grantham distance','ALAMUT','','Alamut batch 1.4.2','100','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('agvgd_class','_custom_annotations','VARCHAR(255)','INFO','AlignGVGD class','ALAMUT','','Alamut batch 1.4.2','101','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('blosum62','_custom_annotations','DOUBLE','INFO','BLOSUM62','ALAMUT','','Alamut batch 1.4.2','102','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('wt_ssf_score','_custom_annotations','DOUBLE','INFO','WT seq. SpliceSiteFinder score','ALAMUT','','Alamut batch 1.4.2','103','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('wt_maxent_score','_custom_annotations','DOUBLE','INFO','WT seq. MaxEntScan score','ALAMUT','','Alamut batch 1.4.2','104','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('wt_nns_score','_custom_annotations','DOUBLE','INFO','WT seq. NNSPLICE score','ALAMUT','','Alamut batch 1.4.2','105','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('wt_gs_score','_custom_annotations','DOUBLE','INFO','WT seq. GeneSplicer score','ALAMUT','','Alamut batch 1.4.2','106','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('wt_hsf_score','_custom_annotations','DOUBLE','INFO','WT seq. HSF score','ALAMUT','','Alamut batch 1.4.2','107','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('var_ssf_score','_custom_annotations','DOUBLE','INFO','Variant seq. SpliceSiteFinder score','ALAMUT','','Alamut batch 1.4.2','108','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('var_maxent_score','_custom_annotations','DOUBLE','INFO','Variant seq. MaxEntScan score','ALAMUT','','Alamut batch 1.4.2','109','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('var_nns_score','_custom_annotations','DOUBLE','INFO','Variant seq. NNSPLICE score','ALAMUT','','Alamut batch 1.4.2','110','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('var_gs_score','_custom_annotations','DOUBLE','INFO','Variant seq. GeneSplicer score','ALAMUT','','Alamut batch 1.4.2','111','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('var_hsf_score','_custom_annotations','DOUBLE','INFO','Variant seq. HSF score ','ALAMUT','','Alamut batch 1.4.2','112','other scores','small','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_of_interest','_user_annotations_variants','BOOLEAN','INFO','Comments about the variant (whatever the sample), either visible only by username, or visible and modifiable by all users if username is set to PUBLIC.','HIGHLANDER','','Highlander users','1','user annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_comments_private','_user_annotations_variants','LONGTEXT','INFO','Private comments about the variant (whatever the sample), only visible by you.','HIGHLANDER','','Highlander users','2','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('variant_comments_public','_user_annotations_variants','LONGTEXT','INFO','Public comments about the variant (whatever the sample), visible and modifiable by all users.','HIGHLANDER','','Highlander users','3','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_of_interest','_user_annotations_genes','BOOLEAN','INFO','You can set this flag to true if the gene is of interest for you, or to false otherwise.','HIGHLANDER','','Highlander users','4','user annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_comments_private','_user_annotations_genes','LONGTEXT','INFO','Private comments about the gene, visible only by you.','HIGHLANDER','','Highlander users','5','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('gene_comments_public','_user_annotations_genes','LONGTEXT','INFO','Public comments about the gene, visible and modifiable by all users.','HIGHLANDER','','Highlander users','6','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sample_of_interest','_user_annotations_samples','BOOLEAN','INFO','You can set this flag to true if the sample is of interest for you, or to false otherwise.','HIGHLANDER','','Highlander users','7','user annotations','small','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sample_comments_private','_user_annotations_samples','LONGTEXT','INFO','Private comments about the sample, visible only by you.','HIGHLANDER','','Highlander users','8','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('sample_comments_public','_user_annotations_samples','LONGTEXT','INFO','Public comments about the sample, visible and modifiable by all users.','HIGHLANDER','','Highlander users','9','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('evaluation','_user_annotations_evaluations','TINYINT','INFO','This field can be used to assign an evaluation class to a variant: I - Benign - Polymorphism. II - Variant Likely Benign. III - Variant of Unknown Significance. IV - Variant Likely Pathogenic. V - Pathogenic Mutation. A value of zero means that this variant has not been evaluated. Only users associated with the given sample can change this flag, but any user can see the assigned value.','HIGHLANDER','','Highlander users','10','user annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('evaluation_username','_user_annotations_evaluations','VARCHAR(16)','INFO','User who has set the evaluation field.','HIGHLANDER','','Highlander users','11','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('evaluation_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the evaluation field.','HIGHLANDER','','Highlander users','12','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_evaluated_as_type_1','_user_annotations_num_evaluations','INT','INFO','Number of samples in which this variant has been evaluated as \\'I - Benign\\'','HIGHLANDER','','Highlander users','13','user annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_evaluated_as_type_2','_user_annotations_num_evaluations','INT','INFO','Number of samples in which this variant has been evaluated as \\'II - Variant Likely Benign\\'','HIGHLANDER','','Highlander users','14','user annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_evaluated_as_type_3','_user_annotations_num_evaluations','INT','INFO','Number of samples in which this variant has been evaluated as \\'III - Variant of Unknown Significance\\'','HIGHLANDER','','Highlander users','15','user annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_evaluated_as_type_4','_user_annotations_num_evaluations','INT','INFO','Number of samples in which this variant has been evaluated as \\'IV - Variant Likely Pathogenic\\'','HIGHLANDER','','Highlander users','16','user annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('num_evaluated_as_type_5','_user_annotations_num_evaluations','INT','INFO','Number of samples in which this variant has been evaluated as \\'V - Pathogenic Mutation\\'','HIGHLANDER','','Highlander users','17','user annotations','smallest','CENTER');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_insilico','_user_annotations_evaluations','ENUM(\\'NOT_CHECKED\\',\\'OK\\',\\'SUSPECT\\',\\'NOT_OK\\')','INFO','This field can be used if this variant has been evaluated insilico (e.g. by looking at the alignment): OK (it\\'s likely a real variant), NOT_OK (it\\'s likely a sequencing error, e.g. alternative allele not specific to pathology), SUSPECT (checked insilico but not sure if it\\'s real or not) or NOT_CHECKED (Not checked insilico, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.','HIGHLANDER','','Highlander users','18','user annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_insilico_username','_user_annotations_evaluations','VARCHAR(16)','INFO','User who has set the check_insilico field.','HIGHLANDER','','Highlander users','19','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_insilico_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the check_insilico field.','HIGHLANDER','','Highlander users','20','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('reporting','_user_annotations_evaluations','ENUM(\\'NOT_CHECKED\\',\\'YES\\',\\'NO\\')','INFO','This field can be used to record reporting to the patient: NOT_CHECKED (variant has not been checked), YES (variant has been checked and needs to be reported to the patient), NO (variant has been checked and doesnt need to be reported to the patient). Only users associated with the given sample can change this field, but any user can see the assigned value.','HIGHLANDER','','Highlander users','21','user annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('reporting_username','_user_annotations_evaluations','VARCHAR(16)','INFO','User who has set the reporting field.','HIGHLANDER','','Highlander users','22','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('reporting_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the reporting field.','HIGHLANDER','','Highlander users','23','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_validated_variant','_user_annotations_evaluations','ENUM(\\'NOT_CHECKED\\',\\'VALIDATED\\',\\'SUSPECT\\',\\'INVALIDATED\\')','INFO','This field can be used if this variant has been tested in the lab: VALIDATED (the variant has been confirmed with another lab technique, e.g. by Sanger sequencing), INVALIDATED (the variant has been invalidated and is not real), SUSPECT (the variant has been checked with another technique, but cannot be confirmed or invalidate) or NOT_CHECKED (Not checked with another lab technique, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.','HIGHLANDER','','Highlander users','24','user annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_validated_variant_username','_user_annotations_evaluations','VARCHAR(16)','INFO','User who has set the check_validated_variant field.','HIGHLANDER','','Highlander users','25','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_validated_variant_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the check_validated_variant field.','HIGHLANDER','','Highlander users','26','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_somatic_variant','_user_annotations_evaluations','ENUM(\\'NOT_CHECKED\\',\\'SOMATIC\\',\\'DUBIOUS\\',\\'GERMLINE\\')','INFO','This field can be used if this variant has been evaluated for mosaicism: SOMATIC (it\\'s likely a somatic variant), GERMLINE (it\\'s likely a germline variant), DUBIOUS (checked for mosaicism, but impossible to differenciate between somatic or germline) or NOT_CHECKED (Not checked for mosaicism, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.','HIGHLANDER','','Highlander users','27','user annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_somatic_variant_username','_user_annotations_evaluations','VARCHAR(16)','INFO','User who has set the check_somatic_variant field.','HIGHLANDER','','Highlander users','28','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_somatic_variant_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the check_somatic_variant field.','HIGHLANDER','','Highlander users','29','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_segregation','_user_annotations_evaluations','ENUM(\\'NOT_CHECKED\\',\\'SINGLE\\',\\'COSEG\\',\\'CARRIERS\\',\\'NO_COSEG\\',\\'NO_COSEG_OTHER\\')','INFO','This field can be used if this variant has been evaluated for segregation: SINGLE (No other sample in family), COSEG (Variant cosegregates), CARRIERS (Some unaffected carrier(s)), NO_COSEG (Not in other affected(s)), NO_COSEG_OTHER (Does not cosegregate in other families) or NOT_CHECKED (Not checked for segregation, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.','HIGHLANDER','','Highlander users','30','user annotations','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_segregation_username','_user_annotations_evaluations','VARCHAR(16)','INFO','User who has set the check_segregation field.','HIGHLANDER','','Highlander users','31','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('check_segregation_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the check_segregation field.','HIGHLANDER','','Highlander users','32','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('evaluation_comments','_user_annotations_evaluations','LONGTEXT','INFO','Comments visible to all users but modifiable only by users associated with the sample.','HIGHLANDER','','Highlander users','33','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('evaluation_comments_username','_user_annotations_evaluations','VARCHAR(16)','INFO','Last user who has modified the evaluation_comments field.','HIGHLANDER','','Highlander users','34','user annotations','medium','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('evaluation_comments_date','_user_annotations_evaluations','DATETIME','INFO','Date and time of the last change to the evaluation_comments field.','HIGHLANDER','','Highlander users','35','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('history','_user_annotations_evaluations','LONGTEXT','INFO','History of evaluation modifications, including username and date.','HIGHLANDER','','Highlander users','36','user annotations','largest','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('insert_date_sample','_sample_annotations','TIMESTAMP','INFO','Time of insertion of this variant in the database.','HIGHLANDER','','Highlander','1','miscellaneous','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('insert_date_static','_static_annotations','TIMESTAMP','INFO','Time of insertion of this variant in the database.','HIGHLANDER','','Highlander','2','miscellaneous','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('insert_date_custom','_custom_annotations','TIMESTAMP','INFO','Time of insertion of this variant in the database.','HIGHLANDER','','Highlander','3','miscellaneous','large','LEFT');\n");
		fw.append("INSERT INTO `fields` (`field`,`table`,`sql_datatype`,`json`,`description`,`annotation_code`,`annotation_header`,`source`,`ordering`,`category`,`size`,`alignment`) VALUES ('insert_date_gene','_gene_annotations','TIMESTAMP','INFO','Time of insertion of this gene in the database.','HIGHLANDER','','Highlander','4','miscellaneous','large','LEFT');\n");
		//Set tags
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('allelic_depth_proportion_ref','"+Tag.FORMAT_PERCENT_0+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('allelic_depth_proportion_alt','"+Tag.FORMAT_PERCENT_0+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('test_messy_end_prop','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('test_low_phred_score_prop','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('test_low_mapqv_value_prop','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('aloft_prob_tolerant','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('aloft_prob_recessive','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('aloft_prob_dominant','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('local_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('germline_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('somatic_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_adj_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_fin_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nfe_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_adj_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_fin_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_nfe_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nontcga_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_adj_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_fin_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_nfe_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('exac_nonpsych_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_asj_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_fin_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_nfe_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_popmax_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_asj_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_fin_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_nfe_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wes_controls_popmax_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_ami_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_asj_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_fin_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_nfe_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_wgs_popmax_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_afr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_amr_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_eas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_eur_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_sas_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('uk10k_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('uk10k_alspac_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('uk10k_twins_UK_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gonl_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('esp6500_aa_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('esp6500_ea_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('dbsnp_maf','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('recessive_probability','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_lof_maf005_hetorhom','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_lof_maf005_homorcompoundhet','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_lof_maf001_hetorhom','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_lof_maf001_homorcompoundhet','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_loformissense_maf005_hetorhom','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_loformissense_maf005_homorcompoundhet','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_loformissense_maf001_hetorhom','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sorva_loformissense_maf001_homorcompoundhet','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('dgv_gain_if','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('dgv_loss_if','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_sv_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gnomad_sv_popmax_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('ddd_dup_if','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('ddd_del_if','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_sv_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('p3_1000g_sv_af_max','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('imh_af','"+Tag.FORMAT_PERCENT_2+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mutation_taster_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('fathmm_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('fathmm_xf_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('fathmm_mkl_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('polyphen_hdiv_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('polyphen_hvar_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('provean_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sift_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sift_4g_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mutation_assessor_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mcap_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('lrt_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('lists2_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('deogen_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('clinpred_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('bayesdel_noaf_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('bayesdel_addaf_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('primate_ai_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('cadd_raw_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('vest_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('dann_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('eigen_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('eigen_pc_raw_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('revel_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mpc_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mvp_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('genocanyon_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('linsight_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mutpred_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('metasvm_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('metalr_rankscore','"+Tag.IMPACT_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mutation_taster_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('fathmm_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('fathmm_xf_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('polyphen_hdiv_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('provean_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('sift_4g_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mutation_assessor_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('mcap_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('lrt_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('lists2_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('deogen_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('clinpred_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('bayesdel_addaf_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('primate_ai_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('metasvm_pred','"+Tag.IMPACT_PREDICTION+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('integrated_fitcons_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gm12878_fitcons_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('h1_hesc_fitcons_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('huvec_fitcons_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('gerp_rs_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('siphy_29way_logOdds_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('phylop_17way_primate_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('phylop_30way_mammalian_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('phylop_100way_vertebrate_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('phastcons_17way_primate_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('phastcons_30way_mammalian_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('phastcons_100way_vertebrate_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		fw.append("INSERT INTO `fields_tags` (`field`,`tag`) VALUES ('bstatistic_rankscore','"+Tag.CONSERVATION_RANKSCORE+"');\n");
		return fw;
	}

	public static StringBuilder createFieldAnalyses(){
			StringBuilder fw = new StringBuilder();
			fw.append("DROP TABLE IF EXISTS `fields_analyses`;\n");
			fw.append("CREATE TABLE `fields_analyses` (\n");
			fw.append("  `field` VARCHAR(255) NOT NULL,\n");
			fw.append("  `analysis` varchar(255) NOT NULL,\n");
			fw.append("  PRIMARY KEY (`field`, `analysis`) \n");
			fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
			return fw;
		}
	
	public static StringBuilder createFieldTags(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `fields_tags`;\n");
		fw.append("CREATE TABLE `fields_tags` (\n");
		fw.append("  `field` VARCHAR(255) NOT NULL,\n");
		fw.append("  `tag` varchar(255) NOT NULL,\n");
		fw.append("  PRIMARY KEY (`field`, `tag`) \n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createFieldCategories(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `field_categories`;\n");
		fw.append("CREATE TABLE `field_categories` (\n");
		fw.append("  `category` VARCHAR(255) NOT NULL COMMENT 'Name of the category, all in small letters',\n");
		fw.append("  `ordering` INT(10) UNSIGNED NOT NULL COMMENT 'Category ordering for detail boxes and default columns ordering',\n");
		fw.append("  `has_generic_detail_box` BOOLEAN NOT NULL DEFAULT TRUE COMMENT 'If a generic detail box must be shown in the GUI',\n");
		fw.append("  `color` ENUM('Amber','Blue','BlueGray','Brown','Cyan','DeepOrange','DeepPurple','Gray','Green','Indigo','LightBlue','LightGreen','Lime','Orange','Pink','Purple','Red','Teal','Yellow') NOT NULL DEFAULT 'Gray' COMMENT 'Color of the category e.g. in detail boxes',\n");
		fw.append("  PRIMARY KEY (`category`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder fillFieldCategories(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `field_categories` VALUES ('allele frequency (ExAC)',16,TRUE,'Amber');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('allele frequency (gnomAD Exomes)',15,TRUE,'Amber');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('allele frequency (gnomAD Genomes)',14,TRUE,'Amber');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('allele frequency (Highlander)',13,TRUE,'Amber');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('allele frequency (other DB)',17,TRUE,'Amber');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('ancestral alleles',26,TRUE,'LightGreen');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('confidence',5,TRUE,'DeepOrange');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('conservation',12,TRUE,'DeepPurple');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('effect prediction',7,TRUE,'DeepPurple');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('effect prediction (classification)',8,TRUE,'DeepPurple');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('effect prediction (rank score)',10,TRUE,'DeepPurple');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('effect prediction (score)',9,TRUE,'DeepPurple');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('effect prediction (splicing)',11,TRUE,'DeepPurple');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations',18,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (diseases)',24,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (expression)',25,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (function)',21,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (mutation tolerance)',19,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (pathway)',22,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (phenotype)',23,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('gene annotations (transmission)',20,TRUE,'Pink');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('genotype',6,TRUE,'DeepOrange');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('miscellaneous',29,FALSE,'Gray');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('other scores',27,TRUE,'Indigo');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('sample details',1,TRUE,'Brown');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('user annotations',28,FALSE,'Teal');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('variant annotations',2,TRUE,'Blue');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('variant annotations (other DB)',3,TRUE,'Blue');\n");
		fw.append("INSERT INTO `field_categories` VALUES ('variant annotations (variant vicinity)',4,TRUE,'Blue');\n");
		return fw;
	}

	public static StringBuilder createFieldSizes(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `field_sizes`;\n");
		fw.append("CREATE TABLE `field_sizes` (\n");
		fw.append("  `size` VARCHAR(45) NOT NULL,\n");
		fw.append("  `width` INT(11) NOT NULL,\n");
		fw.append("  PRIMARY KEY (`size`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder fillFieldSizes(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `field_sizes` VALUES ('huge',300);\n");
		fw.append("INSERT INTO `field_sizes` VALUES ('large',160);\n");
		fw.append("INSERT INTO `field_sizes` VALUES ('largest',200);\n");
		fw.append("INSERT INTO `field_sizes` VALUES ('medium',100);\n");
		fw.append("INSERT INTO `field_sizes` VALUES ('moderate',130);\n");
		fw.append("INSERT INTO `field_sizes` VALUES ('small',85);\n");
		fw.append("INSERT INTO `field_sizes` VALUES ('smallest',70);\n");
		return fw;
	}

	public static StringBuilder createProjects(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `projects`;\n");
		fw.append("CREATE TABLE `projects` (\n");
		fw.append("  `project_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `sequencing_target` VARCHAR(255) DEFAULT NULL COMMENT 'WGS, WES, panel, RNAseq, ...',\n");
		fw.append("  `platform` VARCHAR(50) DEFAULT NULL COMMENT 'Platform on which the variant has been detected.',\n");
		fw.append("  `outsourcing` VARCHAR(50) DEFAULT NULL COMMENT 'Name of the external company where the sequencing has been outsourced if relevant (Note that this differenciation is important for machine specific errors).',\n");
		fw.append("  `family` VARCHAR(50) NOT NULL COMMENT 'Each individual belonging to the same family must have the same \\'family\\' id',\n");
		fw.append("  `individual` VARCHAR(50) NOT NULL COMMENT 'Each sample belonging to the same individual must have the same \\'individual\\' id',\n");
		fw.append("  `sample` VARCHAR(50) NOT NULL COMMENT 'Sample identifier.',\n");
		fw.append("  `index_case` BOOLEAN NOT NULL DEFAULT FALSE COMMENT 'Set to true for an individual when he or she is the index case of his or her family',\n");
		fw.append("  `pathology_id` INT(10) UNSIGNED DEFAULT NULL,\n");
		fw.append("  `population_id` INT(10) UNSIGNED DEFAULT NULL,\n");
		fw.append("  `sample_type` ENUM('Germline','Somatic') NOT NULL DEFAULT 'Germline' COMMENT 'Sample type (Germline or Somatic).',\n");
		fw.append("  `normal_id` INT(10) UNSIGNED DEFAULT NULL COMMENT 'project id of the NORMAL sample for NORMAL/TUMOR pairs',\n");
		fw.append("  `barcode` TINYINT DEFAULT NULL,\n");
		fw.append("  `kit` VARCHAR(50) DEFAULT NULL COMMENT 'Sequence capture kit',\n");
		fw.append("  `read_length` VARCHAR(50) DEFAULT NULL,\n");
		fw.append("  `pair_end` BOOLEAN DEFAULT NULL,\n");
		fw.append("  `trim` BOOLEAN DEFAULT FALSE,\n");
		fw.append("  `remove_duplicates` BOOLEAN DEFAULT TRUE,\n");
		fw.append("  `run_id` SMALLINT DEFAULT NULL,\n");
		fw.append("  `run_date` DATE DEFAULT NULL,\n");
		fw.append("  `run_name` varchar(255) DEFAULT NULL,\n");
		fw.append("  `run_label` VARCHAR(255) DEFAULT NULL COMMENT 'Name of the run (experiment number + date of run processing + name)',\n");
		fw.append("  `per_base_sequence_quality` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `per_tile_sequence_quality` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `per_sequence_quality_scores` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `per_base_GC_content` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `per_sequence_GC_content` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `per_base_N_content` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `sequence_length_distribution` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `sequence_duplication_levels` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `sequence_duplication_prop` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `over-represented_sequences` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `adapter_content` ENUM('pass','warn','fail') DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_1X` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_5X` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_10X` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_20X` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `average_depth_of_target_coverage` INT DEFAULT NULL,\n");
		fw.append("  `coverage_wo_dup` INT DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_1X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_5X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_10X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_20X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_target_covered_meq_30X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `coverage_exome_wo_dup` INT DEFAULT NULL,\n");
		fw.append("  `percent_of_exome_covered_meq_1X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_exome_covered_meq_5X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_exome_covered_meq_10X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_exome_covered_meq_20X_wo_dup` decimal(5,2) DEFAULT NULL,\n");
		fw.append("  `percent_of_exome_covered_meq_30X_wo_dup` decimal(5,2) DEFAULT NULL,\n");		
		fw.append("  `percent_duplicates_picard` DECIMAL(5,2) DEFAULT NULL,\n");
		fw.append("  `comments` TEXT NOT NULL,\n");
		fw.append("  PRIMARY KEY  (`project_id`),\n");
		fw.append("  INDEX `individual` (`individual`(25)),\n");
		fw.append("  INDEX `sample` (`sample`(25)),\n");
		fw.append("  INDEX `pathology_id` (`pathology_id`),\n");
		fw.append("  INDEX `population_id` (`population_id`),\n");
		fw.append("  INDEX `run_label` (`run_label`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createProjectsUsers(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `projects_users`;\n");
		fw.append("CREATE TABLE `projects_users` (\n");
		fw.append("  `project_id` INT NOT NULL,\n");
		fw.append("  `username` VARCHAR(16) NOT NULL,\n");
		fw.append("  PRIMARY KEY (`project_id`, `username`) \n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createProjectsAnalyses(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `projects_analyses`;\n");
		fw.append("CREATE TABLE `projects_analyses` (\n");
		fw.append("  `project_id` INT NOT NULL,\n");
		fw.append("  `analysis` varchar(255) NOT NULL,\n");
		fw.append("  `run_path` varchar(255) DEFAULT NULL,\n");
		fw.append("  `ti_tv_ratio_all` DOUBLE DEFAULT NULL,\n");
		fw.append("  `ti_tv_ratio_known` DOUBLE DEFAULT NULL,\n");
		fw.append("  `ti_tv_ratio_novel` DOUBLE DEFAULT NULL,\n");
		fw.append("  `het_hom_ratio_all` DOUBLE DEFAULT NULL,\n");
		fw.append("  `het_hom_ratio_known` DOUBLE DEFAULT NULL,\n");
		fw.append("  `het_hom_ratio_novel` DOUBLE DEFAULT NULL,\n");
		fw.append("  `variant_count_all` INT DEFAULT NULL,\n");
		fw.append("  `variant_count_known` INT DEFAULT NULL,\n");
		fw.append("  `variant_count_novel` INT DEFAULT NULL,\n");
		fw.append("  `variant_count_pass_filters_all` INT DEFAULT NULL,\n");
		fw.append("  `variant_count_pass_filters_known` INT DEFAULT NULL,\n");
		fw.append("  `variant_count_pass_filters_novel` INT DEFAULT NULL,\n");
		fw.append("  `SNV_count_all` INT DEFAULT NULL,\n");
		fw.append("  `SNV_count_known` INT DEFAULT NULL,\n");
		fw.append("  `SNV_count_novel` INT DEFAULT NULL,\n");
		fw.append("  `SNV_count_pass_filters_all` INT DEFAULT NULL,\n");
		fw.append("  `SNV_count_pass_filters_known` INT DEFAULT NULL,\n");
		fw.append("  `SNV_count_pass_filters_novel` INT DEFAULT NULL,\n");
		fw.append("  `INDEL_count_all` INT DEFAULT NULL,\n");
		fw.append("  `INDEL_count_known` INT DEFAULT NULL,\n");
		fw.append("  `INDEL_count_novel` INT DEFAULT NULL,\n");
		fw.append("  `INDEL_count_pass_filters_all` INT DEFAULT NULL,\n");
		fw.append("  `INDEL_count_pass_filters_known` INT DEFAULT NULL,\n");
		fw.append("  `INDEL_count_pass_filters_novel` INT DEFAULT NULL,\n");
		fw.append("  `gene_coverage_ratio_chr_xy` DOUBLE DEFAULT NULL,\n");
		fw.append("  `users_warned` BOOLEAN DEFAULT FALSE,\n");
		fw.append("  PRIMARY KEY (`project_id`, `analysis`), \n");
		fw.append("  INDEX `run_path` (`run_path`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createUsers(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `users`;\n");
		fw.append("CREATE TABLE `users` (\n");
		fw.append("  `username` varchar(16) NOT NULL,\n");
		fw.append("  `password` varchar(32) NOT NULL,\n");
		fw.append("  `first_name` varchar(45) NOT NULL,\n");
		fw.append("  `last_name` varchar(45) NOT NULL,\n");
		fw.append("  `email` varchar(45) NOT NULL,\n");
		fw.append("  `rights` ENUM('user','administrator','inactive') NOT NULL DEFAULT 'user',\n");
		fw.append("  `group` varchar(255) NOT NULL DEFAULT 'Main',\n");
		fw.append("  PRIMARY KEY  (`username`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder fillUsers(){
		StringBuilder fw = new StringBuilder();
		fw.append("INSERT INTO `users` VALUES ('Administrator','7B7BC2512EE1FEDCD76BDC68926D4F7B','Administrator','Administrator','admin@highlander.com','administrator','Main');\n");
		return fw;
	}

	public static StringBuilder createUsersData(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `users_data`;\n");
		fw.append("CREATE TABLE `users_data` (\n");
		fw.append("  `id` INT NOT NULL AUTO_INCREMENT,\n");
		fw.append("  `username` VARCHAR(16) NOT NULL,\n");
		fw.append("  `type` VARCHAR(50) NOT NULL,\n");
		fw.append("  `analysis` VARCHAR(45) NULL,\n");
		fw.append("  `key` VARCHAR(500) NOT NULL,\n");
		fw.append("  `value` TEXT NOT NULL,\n");
		fw.append("	 PRIMARY KEY (`id`),\n");
		fw.append("	 INDEX `type` (`type`),\n");
		fw.append("	 INDEX `key` (`key`(5))\n");

		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createAnalyses(){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `analyses`;\n");
		fw.append("CREATE TABLE `analyses` (\n");
		fw.append("  `analysis` varchar(255) NOT NULL,\n");
		fw.append("  `icon` LONGBLOB NOT NULL,\n");
		fw.append("  `ordering` INT NOT NULL DEFAULT 0 COMMENT 'Ordering of the analyses icons in Highlander',\n");
		fw.append("  `sequencing_target` VARCHAR(255) DEFAULT NULL COMMENT 'WGS, WES, panel, RNAseq, ...',\n");
		fw.append("  `reference` VARCHAR(255) DEFAULT NULL COMMENT 'Reference genome. Please ALWAYS use GRC notation, like GRCh37 (even if you use hg19).',\n");
		fw.append("  `bam_url` VARCHAR(1000) NOT NULL,\n");
		fw.append("  `vcf_url` VARCHAR(1000) NOT NULL,\n");
		fw.append("  `bam_dir` VARCHAR(1000) NOT NULL,\n");
		fw.append("  `vcf_dir` VARCHAR(1000) NOT NULL,\n");
		fw.append("  `vcf_extension` VARCHAR(255) NOT NULL,\n");
		fw.append("  `variant_caller` ENUM('GATK', 'MUTECT', 'TORRENT', 'LIFESCOPE', 'SV', 'OTHER') NOT NULL DEFAULT 'OTHER',\n");
		fw.append("  PRIMARY KEY (`analysis`) \n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	//Tables supporting an analysis
	
	public static StringBuilder createStaticAnnotations(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_static_annotations`;\n");
		fw.append("CREATE TABLE `"+analysis+"_static_annotations` (\n");
		fw.append("	`variant_static_id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL,\n");
		fw.append("	`pos` INT NOT NULL,\n");
		fw.append("	`length` INT NOT NULL,\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL,\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL,\n");
		fw.append("	`gene_symbol` VARCHAR(50) NOT NULL DEFAULT '',\n");
		fw.append("	`variant_type` ENUM('SNV','MNV','INS','DEL','SV') DEFAULT NULL,\n");
		fw.append("	`hgvs_dna` VARCHAR(200) DEFAULT NULL,\n");
		fw.append("	`hgvs_protein` VARCHAR(100) DEFAULT NULL,\n");
		fw.append(" `hgvs_dna_vep` VARCHAR(200) DEFAULT NULL,\n");
		fw.append(" `hgvs_protein_vep` VARCHAR(100) DEFAULT NULL,\n");
		fw.append(" `cds_strand` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `refcodon` VARCHAR(3) DEFAULT NULL,\n");
		fw.append(" `codonpos` TINYINT DEFAULT NULL,\n");
		fw.append(" `codon_degeneracy` TINYINT DEFAULT NULL,\n");
		fw.append("	`exon_intron_rank` SMALLINT DEFAULT NULL,\n");
		fw.append("	`exon_intron_total` SMALLINT DEFAULT NULL,\n");
		fw.append("	`cdna_pos` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`cdna_length` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`cds_pos` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`cds_length` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`protein_pos` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`protein_length` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`num_genes` TINYINT NOT NULL DEFAULT 1,\n");
		fw.append("	`dbsnp_id` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `cosmic_id` VARCHAR(25) DEFAULT NULL,\n");
		fw.append(" `cosmic_id_legacy` VARCHAR(25) DEFAULT NULL,\n");
		fw.append(" `clinvar_id` INT DEFAULT NULL,\n");
		fw.append(" `clinvar_clnsig` VARCHAR(100) DEFAULT NULL,\n");
		fw.append(" `clinvar_trait` TEXT DEFAULT NULL,\n");
		fw.append(" `clinvar_review` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `clinvar_hgvs` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `clinvar_var_source` TEXT DEFAULT NULL,\n");
		fw.append(" `clinvar_MedGen_id` VARCHAR(400) DEFAULT NULL,\n");
		fw.append(" `clinvar_OMIM_id` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `clinvar_Orphanet_id` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `Interpro_domain` TEXT DEFAULT NULL,\n");
		fw.append(" `GTEx_V8_gene` TEXT DEFAULT NULL,\n");
		fw.append(" `GTEx_V8_tissue` TEXT DEFAULT NULL,\n");
		fw.append(" `Geuvadis_eQTL_target_gene` VARCHAR(255) DEFAULT NULL,\n");
		fw.append("	`snpeff_effect` ENUM('EXON_DELETED', 'FRAME_SHIFT', 'STOP_GAINED', 'STOP_LOST', 'START_LOST', 'SPLICE_SITE_ACCEPTOR', 'SPLICE_SITE_DONOR', 'RARE_AMINO_ACID', 'CHROMOSOME_LARGE_DELETION', 'NON_SYNONYMOUS_CODING', 'CODON_INSERTION', 'CODON_CHANGE_PLUS_CODON_INSERTION', 'CODON_DELETION', 'CODON_CHANGE_PLUS_CODON_DELETION', 'UTR_5_DELETED', 'UTR_3_DELETED', 'SPLICE_SITE_REGION', 'SPLICE_SITE_BRANCH_U12', 'CODON_CHANGE', 'NON_SYNONYMOUS_STOP', 'NON_SYNONYMOUS_START', 'SYNONYMOUS_CODING', 'SYNONYMOUS_STOP', 'SYNONYMOUS_START', 'START_GAINED', 'SPLICE_SITE_BRANCH', 'TF_BINDING_SITE', 'SEQUENCE_FEATURE', 'UTR_5_PRIME', 'UTR_3_PRIME', 'UPSTREAM', 'DOWNSTREAM', 'REGULATION', 'MICRO_RNA', 'CUSTOM', 'INTRON_CONSERVED', 'INTRON', 'NON_CODING_EXON', 'INTRAGENIC', 'INTERGENIC_CONSERVED', 'INTERGENIC', 'CDS', 'EXON', 'TRANSCRIPT', 'GENE', 'CHROMOSOME', 'WITHIN_NON_CODING_GENE', 'NONE') DEFAULT NULL,\n");
		fw.append(" `snpeff_all_effects` VARCHAR(400) DEFAULT NULL,\n");
		fw.append("	`snpeff_impact` ENUM('HIGH','MODERATE','LOW','MODIFIER') DEFAULT NULL,\n");
		fw.append("	`snpeff_other_transcripts` TEXT DEFAULT NULL,\n");
		fw.append(" `mutation_taster_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutation_taster_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutation_taster_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `mutation_taster_aa` VARCHAR(20) DEFAULT NULL,\n");
		fw.append(" `mutation_taster_model` VARCHAR(20) DEFAULT NULL,\n");
		fw.append(" `fathmm_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `fathmm_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `fathmm_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `fathmm_xf_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `fathmm_xf_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `fathmm_xf_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `fathmm_mkl_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `fathmm_mkl_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `fathmm_mkl_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `fathmm_mkl_group` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `polyphen_hdiv_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `polyphen_hdiv_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `polyphen_hdiv_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `polyphen_hvar_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `polyphen_hvar_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `polyphen_hvar_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `provean_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `provean_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `provean_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `sift_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sift_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sift_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `sift_4g_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sift_4g_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sift_4g_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `mutation_assessor_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutation_assessor_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutation_assessor_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `mcap_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mcap_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mcap_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `lrt_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `lrt_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `lrt_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `lrt_omega` DOUBLE DEFAULT NULL,\n");
		fw.append(" `lists2_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `lists2_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `lists2_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `deogen_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `deogen_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `deogen_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `clinpred_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `clinpred_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `clinpred_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `bayesdel_noaf_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `bayesdel_noaf_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `bayesdel_noaf_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `bayesdel_addaf_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `bayesdel_addaf_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `bayesdel_addaf_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `primate_ai_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `primate_ai_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `primate_ai_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `aloft_fraction_transcripts_affected` VARCHAR(20) DEFAULT NULL,\n");
		fw.append(" `aloft_prob_tolerant` DOUBLE DEFAULT NULL,\n");
		fw.append(" `aloft_prob_recessive` DOUBLE DEFAULT NULL,\n");
		fw.append(" `aloft_prob_dominant` DOUBLE DEFAULT NULL,\n");
		fw.append(" `aloft_pred` ENUM('DOMINANT','RECESSIVE','TOLERANT') DEFAULT NULL,\n");
		fw.append(" `aloft_confidence` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `cadd_raw` DOUBLE DEFAULT NULL,\n");
		fw.append(" `cadd_raw_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `cadd_phred` DOUBLE DEFAULT NULL,\n");
		fw.append(" `vest_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `vest_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `dann_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `dann_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `eigen_raw` DOUBLE DEFAULT NULL,\n");
		fw.append(" `eigen_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `eigen_phred` DOUBLE DEFAULT NULL,\n");
		fw.append(" `eigen_pc_raw` DOUBLE DEFAULT NULL,\n");
		fw.append(" `eigen_pc_raw_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `eigen_pc_phred` DOUBLE DEFAULT NULL,\n");
		fw.append(" `revel_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `revel_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mpc_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mpc_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mvp_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mvp_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `genocanyon_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `genocanyon_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `linsight_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `linsight_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutpred_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutpred_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `mutpred_top5_features` TEXT DEFAULT NULL,\n");
		fw.append(" `metasvm_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `metasvm_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `metasvm_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `metalr_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `metalr_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `metalr_pred` ENUM('DAMAGING','TOLERATED') DEFAULT NULL,\n");
		fw.append(" `meta_reliability_index` TINYINT DEFAULT NULL,\n");
		fw.append(" `integrated_fitcons_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `integrated_fitcons_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `integrated_fitcons_pred` ENUM('HIGHLY_SIGNIFICANT','SIGNIFICANT','INFORMATIVE','OTHER') DEFAULT NULL,\n");
		fw.append(" `gm12878_fitcons_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gm12878_fitcons_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gm12878_fitcons_pred` ENUM('HIGHLY_SIGNIFICANT','SIGNIFICANT','INFORMATIVE','OTHER') DEFAULT NULL,\n");
		fw.append(" `h1_hesc_fitcons_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `h1_hesc_fitcons_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `h1_hesc_fitcons_pred` ENUM('HIGHLY_SIGNIFICANT','SIGNIFICANT','INFORMATIVE','OTHER') DEFAULT NULL,\n");
		fw.append(" `huvec_fitcons_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `huvec_fitcons_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `huvec_fitcons_pred` ENUM('HIGHLY_SIGNIFICANT','SIGNIFICANT','INFORMATIVE','OTHER') DEFAULT NULL,\n");
		fw.append(" `is_scSNV_RefSeq` BOOLEAN DEFAULT NULL,\n");
		fw.append(" `is_scSNV_Ensembl` BOOLEAN DEFAULT NULL,\n");
		fw.append(" `splicing_ada_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `splicing_ada_pred` ENUM('AFFECTING_SPLICING','SPLICING_UNAFFECTED') DEFAULT NULL,\n");
		fw.append(" `splicing_rf_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `splicing_rf_pred` ENUM('AFFECTING_SPLICING','SPLICING_UNAFFECTED') DEFAULT NULL,\n");
		fw.append(" `consensus_prediction` INT DEFAULT NULL,\n");
		fw.append(" `gerp_nr` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gerp_rs` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gerp_rs_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `siphy_29way_pi` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `siphy_29way_logOdds` DOUBLE DEFAULT NULL,\n");
		fw.append(" `siphy_29way_logOdds_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phylop_17way_primate` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phylop_17way_primate_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phylop_30way_mammalian` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phylop_30way_mammalian_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phylop_100way_vertebrate` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phylop_100way_vertebrate_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phastcons_17way_primate` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phastcons_17way_primate_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phastcons_30way_mammalian` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phastcons_30way_mammalian_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phastcons_100way_vertebrate` DOUBLE DEFAULT NULL,\n");
		fw.append(" `phastcons_100way_vertebrate_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `bstatistic` DOUBLE DEFAULT NULL,\n");
		fw.append(" `bstatistic_rankscore` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_adj_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_adj_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_fin_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_fin_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nfe_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nfe_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_adj_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_adj_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_fin_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_fin_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_nfe_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_nfe_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_adj_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_adj_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_fin_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_fin_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_nfe_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_nfe_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_flag` VARCHAR(20) DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_afr_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_afr_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_amr_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_amr_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_asj_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_asj_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_asj_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_asj_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_eas_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_eas_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_fin_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_fin_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_fin_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_fin_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_nfe_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_nfe_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_nfe_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_nfe_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_sas_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_sas_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_popmax_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_popmax_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_popmax_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_popmax_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_afr_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_afr_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_amr_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_amr_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_asj_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_asj_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_asj_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_asj_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_eas_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_eas_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_fin_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_fin_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_fin_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_fin_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_nfe_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_nfe_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_nfe_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_nfe_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_sas_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_sas_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_popmax_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_popmax_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_popmax_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wes_controls_popmax_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_flag` VARCHAR(20) DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_afr_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_afr_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_ami_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_ami_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_ami_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_ami_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_amr_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_amr_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_asj_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_asj_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_asj_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_asj_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_eas_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_eas_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_fin_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_fin_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_fin_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_fin_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_nfe_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_nfe_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_nfe_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_nfe_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_sas_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_sas_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_popmax_ac` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_popmax_an` INT DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_popmax_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_wgs_popmax_nhomalt` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_ac` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `p3_1000g_afr_ac` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_afr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `p3_1000g_amr_ac` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_amr_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `p3_1000g_eas_ac` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_eas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `p3_1000g_eur_ac` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_eur_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `p3_1000g_sas_ac` INT DEFAULT NULL,\n");
		fw.append(" `p3_1000g_sas_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `uk10k_ac` INT DEFAULT NULL,\n");
		fw.append(" `uk10k_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `uk10k_alspac_ac` INT DEFAULT NULL,\n");
		fw.append(" `uk10k_alspac_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `uk10k_twins_UK_ac` INT DEFAULT NULL,\n");
		fw.append(" `uk10k_twins_UK_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gonl_ac` INT DEFAULT NULL,\n");
		fw.append(" `gonl_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `esp6500_aa_ac` INT DEFAULT NULL,\n");
		fw.append(" `esp6500_aa_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `esp6500_ea_ac` INT DEFAULT NULL,\n");
		fw.append(" `esp6500_ea_af` DOUBLE DEFAULT NULL,\n");
		fw.append(" `ancestral_allele` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `ancestral_allele_altai_neandertal` VARCHAR(3) DEFAULT NULL,\n");
		fw.append(" `ancestral_allele_denisova` VARCHAR(3) DEFAULT NULL,\n");
		fw.append(" `ancestral_allele_vindijia_neandertal` VARCHAR(3) DEFAULT NULL,\n");
		fw.append("	`insert_date_static` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n");
		fw.append("	PRIMARY KEY (`variant_static_id`),\n");
		fw.append("	UNIQUE KEY `variant` (`pos`,`chr`),\n");
		fw.append("	INDEX `gene_symbol` (`gene_symbol`(25)),\n");
		fw.append("	INDEX `gnomad_wes_af` (`gnomad_wes_af`),\n");	
		fw.append("	INDEX `gnomad_wes_popmax_af` (`gnomad_wes_popmax_af`),\n");	
		fw.append("	INDEX `gnomad_wgs_af` (`gnomad_wgs_af`),\n");	
		fw.append("	INDEX `gnomad_wgs_popmax_af` (`gnomad_wgs_popmax_af`),\n");	
		fw.append("	INDEX `consensus_prediction` (`consensus_prediction`),\n");
		fw.append("	INDEX `snpeff_effect` (`snpeff_effect`),\n");
		fw.append("	INDEX `snpeff_all_effects` (`snpeff_all_effects`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createSampleAnnotations(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_sample_annotations`;\n");
		fw.append("CREATE TABLE `"+analysis+"_sample_annotations` (\n");
		fw.append("	`variant_sample_id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL,\n");
		fw.append("	`pos` INT NOT NULL,\n");
		fw.append("	`length` INT NOT NULL,\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL,\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL,\n");
		fw.append("	`gene_symbol` VARCHAR(50) NOT NULL DEFAULT '',\n");
		fw.append("	`project_id` INT(10) UNSIGNED NOT NULL,\n");
		fw.append("	`filters` VARCHAR(255) DEFAULT NULL,\n");
		fw.append("	`confidence` DOUBLE DEFAULT NULL,\n");
		fw.append("	`variant_confidence_by_depth` DOUBLE DEFAULT NULL,\n");
		fw.append("	`fisher_strand_bias` DOUBLE DEFAULT NULL,\n");
		fw.append("	`mapping_quality` DOUBLE DEFAULT NULL,\n");
		fw.append(" `symmetric_odds_ratio` DOUBLE DEFAULT NULL,\n");
		fw.append("	`haplotype_score` DOUBLE DEFAULT NULL,\n");
		fw.append("	`rank_sum_test_read_mapping_qual` DOUBLE DEFAULT NULL,\n");
		fw.append("	`rank_sum_test_read_pos_bias` DOUBLE DEFAULT NULL,\n");
		fw.append("	`rank_sum_test_base_qual` DOUBLE DEFAULT NULL,\n");
		fw.append("	`read_depth` SMALLINT DEFAULT NULL,\n");
		fw.append("	`mapping_quality_zero_reads` SMALLINT DEFAULT NULL,\n");
		fw.append("	`downsampled` BOOLEAN DEFAULT NULL,\n");
		fw.append("	`allele_num` TINYINT DEFAULT 2,\n");
		fw.append("	`allelic_depth_ref` SMALLINT DEFAULT NULL,\n");
		fw.append("	`allelic_depth_alt` SMALLINT DEFAULT NULL,\n");
		fw.append("	`allelic_depth_proportion_ref` DOUBLE DEFAULT NULL,\n");
		fw.append("	`allelic_depth_proportion_alt` DOUBLE DEFAULT NULL,\n");
		fw.append("	`mle_allele_count` SMALLINT DEFAULT NULL,\n");
		fw.append("	`mle_allele_frequency` DOUBLE DEFAULT NULL,\n");
		fw.append("	`zygosity` ENUM('Homozygous','Heterozygous') DEFAULT NULL,\n");
		fw.append("	`genotype_quality` DOUBLE DEFAULT NULL,\n");
		fw.append("	`genotype_likelihood_hom_ref` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`genotype_likelihood_het` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`genotype_likelihood_hom_alt` MEDIUMINT DEFAULT NULL,\n");
		fw.append("	`short_tandem_repeat` BOOLEAN DEFAULT NULL,\n");
		fw.append("	`repeat_unit` VARCHAR(255) DEFAULT NULL,\n");
		fw.append("	`repeat_number_ref` SMALLINT DEFAULT NULL,\n");
		fw.append("	`repeat_number_alt` SMALLINT DEFAULT NULL,\n");
		fw.append("	`insert_date_sample` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n");
		fw.append("	PRIMARY KEY (`variant_sample_id`),\n");
		fw.append("	UNIQUE KEY `private_variant` (`pos`,`gene_symbol`,`project_id`),\n");
		fw.append("	INDEX `variant` (`pos`,`chr`),\n");
		fw.append("	INDEX `project` (`project_id`),\n");
		fw.append("	INDEX `gene_symbol` (`gene_symbol`(25))\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createCustomAnnotations(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_custom_annotations`;\n");
		fw.append("CREATE TABLE `"+analysis+"_custom_annotations` (\n");
		fw.append("	`variant_custom_id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL,\n");
		fw.append("	`pos` INT NOT NULL,\n");
		fw.append("	`length` INT NOT NULL,\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL,\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL,\n");
		fw.append("	`gene_symbol` VARCHAR(50) NOT NULL DEFAULT '',\n");
		fw.append("	`project_id` INT(10) UNSIGNED NOT NULL,\n");
		fw.append("	`insert_date_custom` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n");
		fw.append("	PRIMARY KEY (`variant_custom_id`),\n");
		fw.append("	UNIQUE KEY `private_variant` (`pos`,`gene_symbol`,`project_id`),\n");
		fw.append("	INDEX `variant` (`pos`,`chr`),\n");
		fw.append("	INDEX `project` (`project_id`),\n");
		fw.append("	INDEX `gene_symbol` (`gene_symbol`(25))\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createGeneAnnotations(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_gene_annotations`;\n");
		fw.append("CREATE TABLE `"+analysis+"_gene_annotations` (\n");
		fw.append("	`gene_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`gene_symbol` VARCHAR(50) NOT NULL DEFAULT '',\n");
		fw.append(" `gene_old_names` TEXT DEFAULT NULL,\n");
		fw.append(" `gene_other_names` TEXT DEFAULT NULL,\n");
		fw.append("	`biotype` VARCHAR(40) DEFAULT NULL,\n");
		fw.append("	`gene_ensembl` VARCHAR(25) DEFAULT NULL,\n");
		fw.append("	`transcript_ensembl` VARCHAR(40) DEFAULT NULL,\n");
		fw.append("	`transcript_uniprot_id` VARCHAR(255) DEFAULT NULL,\n");
		fw.append("	`transcript_refseq_prot` VARCHAR(255) DEFAULT NULL,\n");
		fw.append("	`transcript_refseq_mrna` VARCHAR(255) DEFAULT NULL,\n");
		fw.append(" `entrez_gene_id` INT DEFAULT NULL,\n");
		fw.append(" `ccds_id` TEXT DEFAULT NULL,\n");
		fw.append(" `ucsc_id` VARCHAR(50) DEFAULT NULL,\n");
		fw.append(" `mim_id` INT DEFAULT NULL,\n");
		fw.append(" `omim_id` INT DEFAULT NULL,\n");
		fw.append(" `gene_full_name` TEXT DEFAULT NULL,\n");
		fw.append(" `pathway_uniprot` TEXT DEFAULT NULL,\n");
		fw.append(" `pathway_biocarta_short` TEXT DEFAULT NULL,\n");
		fw.append(" `pathway_biocarta_full` TEXT DEFAULT NULL,\n");
		fw.append(" `pathway_consensuspathdb` TEXT DEFAULT NULL,\n");
		fw.append(" `pathway_kegg_id` TEXT DEFAULT NULL,\n");
		fw.append(" `pathway_kegg_full` TEXT DEFAULT NULL,\n");
		fw.append(" `gene_function_description` TEXT DEFAULT NULL,\n");
		fw.append(" `disease_description` TEXT DEFAULT NULL,\n");
		fw.append(" `mim_phenotype_id` TEXT DEFAULT NULL,\n");
		fw.append(" `mim_disease` TEXT DEFAULT NULL,\n");
		fw.append(" `orphanet_disorder_id` TEXT DEFAULT NULL,\n");
		fw.append(" `orphanet_disorder` TEXT DEFAULT NULL,\n");
		fw.append(" `orphanet_association_type` TEXT DEFAULT NULL,\n");
		fw.append(" `trait_association_gwas` TEXT DEFAULT NULL,\n");
		fw.append(" `hpo_id` TEXT DEFAULT NULL,\n");
		fw.append(" `hpo_name` TEXT DEFAULT NULL,\n");
		fw.append(" `go_biological_process` TEXT DEFAULT NULL,\n");
		fw.append(" `go_cellular_component` TEXT DEFAULT NULL,\n");
		fw.append(" `go_molecular_function` TEXT DEFAULT NULL,\n");
		fw.append(" `tissue_specificity_uniprot` TEXT DEFAULT NULL,\n");
		fw.append(" `expression_egenetics` TEXT DEFAULT NULL,\n");
		fw.append(" `expression_gnf_atlas` TEXT DEFAULT NULL,\n");
		fw.append(" `interactions_intact` LONGTEXT DEFAULT NULL,\n");
		fw.append(" `interactions_biogrid` LONGTEXT DEFAULT NULL,\n");
		fw.append(" `interactions_consensuspathdb` LONGTEXT DEFAULT NULL,\n");
		fw.append(" `haploinsufficiency_probability` DOUBLE DEFAULT NULL,\n");
		fw.append(" `haploinsufficiency_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `haploinsufficiency` BOOLEAN DEFAULT NULL,\n");
		fw.append(" `haploinsufficiency_ghis` DOUBLE DEFAULT NULL,\n");
		fw.append(" `recessive_probability` DOUBLE DEFAULT NULL,\n");
		fw.append(" `recessive_know_info` VARCHAR(20) DEFAULT NULL,\n");
		fw.append(" `rvis_evs` DOUBLE DEFAULT NULL,\n");
		fw.append(" `rvis_percentile_evs` DOUBLE DEFAULT NULL,\n");
		fw.append(" `lof_fdr_exac` DOUBLE DEFAULT NULL,\n");
		fw.append(" `rvis_exac` DOUBLE DEFAULT NULL,\n");
		fw.append(" `rvis_percentile_exac` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_pli` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_prec` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_pnull` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_pli` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_prec` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nontcga_pnull` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_pli` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_prec` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_nonpsych_pnull` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_pli` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_prec` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gnomad_pnull` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_del_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_dup_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_cnv_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `exac_cnv_flag` BOOLEAN DEFAULT NULL,\n");
		fw.append(" `gdi_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gdi_phred` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_all` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_all_mendelian` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_mendelian_ad` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_mendelian_ar` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_all_pid` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_pid_ad` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_pid_ar` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_all_cancer` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_cancer_recessive` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `gene_damage_prediction_cancer_dominant` VARCHAR(10) DEFAULT NULL,\n");
		fw.append(" `loftool_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_lof_maf005_hetorhom` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_lof_maf005_homorcompoundhet` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_lof_maf001_hetorhom` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_lof_maf001_homorcompoundhet` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_loformissense_maf005_hetorhom` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_loformissense_maf005_homorcompoundhet` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_loformissense_maf001_hetorhom` DOUBLE DEFAULT NULL,\n");
		fw.append(" `sorva_loformissense_maf001_homorcompoundhet` DOUBLE DEFAULT NULL,\n");
		fw.append(" `essential_gene` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `essential_gene_crispr` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `essential_gene_crispr2` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `essential_gene_gene_trap` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `gene_indispensability_score` DOUBLE DEFAULT NULL,\n");
		fw.append(" `gene_indispensability_pred` VARCHAR(1) DEFAULT NULL,\n");
		fw.append(" `mgi_mouse_gene` VARCHAR(50) DEFAULT NULL,\n");
		fw.append(" `mgi_mouse_phenotype` TEXT DEFAULT NULL,\n");
		fw.append(" `zfin_zebrafish_gene` VARCHAR(50) DEFAULT NULL,\n");
		fw.append(" `zfin_zebrafish_structure` TEXT DEFAULT NULL,\n");
		fw.append(" `zfin_zebrafish_phenotype_quality` TEXT DEFAULT NULL,\n");
		fw.append(" `zfin_zebrafish_phenotype_tag` TEXT DEFAULT NULL,\n");
		fw.append("	`insert_date_gene` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP,\n");
		fw.append("	PRIMARY KEY (`gene_id`),\n");
		fw.append("	UNIQUE KEY `gene_symbol` (`gene_symbol`),\n");
		fw.append("	INDEX `gene_ensembl` (`gene_ensembl`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder modifyColumnsFromCustomAnnotations(Analysis analysis, List<Field> fields){
		StringBuilder fw = new StringBuilder();
		fw.append("ALTER TABLE `"+analysis+"_custom_annotations` ");
		for (Field field : fields) {
			fw.append("MODIFY `"+field.getName()+"` "+field.getSqlDatatype()+" DEFAULT NULL, ");
		}		
		fw.deleteCharAt(fw.length()-1);
		fw.deleteCharAt(fw.length()-1);
		fw.append(";\n");
		return fw;
	}
	
	public static StringBuilder removeColumnsFromCustomAnnotations(Analysis analysis, List<Field> fields){
		StringBuilder fw = new StringBuilder();
		fw.append("ALTER TABLE `"+analysis+"_custom_annotations` ");
		for (Field field : fields) {
			fw.append("DROP COLUMN `"+field.getName()+"`, ");
		}		
		fw.deleteCharAt(fw.length()-1);
		fw.deleteCharAt(fw.length()-1);
		fw.append(";\n");
		return fw;
	}
	
	public static StringBuilder addColumnsToCustomAnnotations(Analysis analysis, List<Field> fields){
		StringBuilder fw = new StringBuilder();
		if (!fields.isEmpty()) {
			fw.append("ALTER TABLE `"+analysis+"_custom_annotations` ");
			for (Field field : fields) {
				fw.append("ADD COLUMN `"+field.getName()+"` "+field.getSqlDatatype()+" DEFAULT NULL, ");
			}		
			fw.deleteCharAt(fw.length()-1);
			fw.deleteCharAt(fw.length()-1);
			fw.append(";\n");
		}
		return fw;
		
		//TODO BURDEN - fields specific to ExAC, GoNL. A voir après que j'ai revu leur création
		/*
		//Exac
		fw.append("	`AC` INT DEFAULT NULL COMMENT 'Allele count in genotypes, for each ALT allele, in the same order as listed',\n");
		fw.append("	`AC_Adj` INT DEFAULT NULL COMMENT 'Adjusted Allele Counts',\n");
		fw.append("	`AC_AFR` INT DEFAULT NULL COMMENT 'African/African American Allele Counts',\n");
		fw.append("	`AC_AMR` INT DEFAULT NULL COMMENT 'American Allele Counts',\n");
		fw.append("	`AC_EAS` INT DEFAULT NULL COMMENT 'East Asian Allele Counts',\n");
		fw.append("	`AC_FIN` INT DEFAULT NULL COMMENT 'Finnish Allele Counts',\n");
		fw.append("	`AC_NFE` INT DEFAULT NULL COMMENT 'Non-Finnish European Allele Counts',\n");
		fw.append("	`AC_SAS` INT DEFAULT NULL COMMENT 'South Asian Allele Counts',\n");
		fw.append("	`AC_OTH` INT DEFAULT NULL COMMENT 'Other Allele Counts',\n");
		fw.append("	`AC_Het` INT DEFAULT NULL COMMENT 'Adjusted Heterozygous Counts',\n");
		fw.append("	`AC_Hom` INT DEFAULT NULL COMMENT 'Adjusted Homozygous Counts',\n");
		fw.append("	`AC_Hemi` INT DEFAULT NULL COMMENT 'Adjusted Hemizygous Counts',\n");
		fw.append("	`AF` DOUBLE DEFAULT NULL COMMENT 'Allele Frequency, for each ALT allele, in the same order as listed',\n");
		fw.append("	`AF_Adj` DOUBLE DEFAULT NULL COMMENT 'Adjusted Allele Frequency, for each ALT allele, in the same order as listed (AC_Adj / AN_Adj)',\n");
		fw.append("	`AN` INT DEFAULT NULL COMMENT 'Total number of alleles in called genotypes',\n");
		fw.append("	`AN_Adj` INT DEFAULT NULL COMMENT 'Adjusted Chromosome Count',\n");
		fw.append("	`AN_AFR` INT DEFAULT NULL COMMENT 'African/African American Chromosome Count',\n");
		fw.append("	`AN_AMR` INT DEFAULT NULL COMMENT 'American Chromosome Count',\n");
		fw.append("	`AN_EAS` INT DEFAULT NULL COMMENT 'East Asian Chromosome Count',\n");
		fw.append("	`AN_FIN` INT DEFAULT NULL COMMENT 'Finnish Chromosome Count',\n");
		fw.append("	`AN_NFE` INT DEFAULT NULL COMMENT 'Non-Finnish European Chromosome Count',\n");
		fw.append("	`AN_SAS` INT DEFAULT NULL COMMENT 'South Asian Chromosome Count',\n");
		fw.append("	`AN_OTH` INT DEFAULT NULL COMMENT 'Other Chromosome Count',\n");
		fw.append("	`Het_AFR` INT DEFAULT NULL COMMENT 'African/African American Heterozygous Counts',\n");
		fw.append("	`Het_AMR` INT DEFAULT NULL COMMENT 'American Heterozygous Counts',\n");
		fw.append("	`Het_EAS` INT DEFAULT NULL COMMENT 'East Asian Heterozygous Counts',\n");
		fw.append("	`Het_FIN` INT DEFAULT NULL COMMENT 'Finnish Heterozygous Counts',\n");
		fw.append("	`Het_NFE` INT DEFAULT NULL COMMENT 'Non-Finnish European Heterozygous Counts',\n");
		fw.append("	`Het_SAS` INT DEFAULT NULL COMMENT 'South Asian Heterozygous Counts',\n");
		fw.append("	`Het_OTH` INT DEFAULT NULL COMMENT 'Other Heterozygous Counts',\n");
		fw.append("	`Hom_AFR` INT DEFAULT NULL COMMENT 'African/African American Homozygous Counts',\n");
		fw.append("	`Hom_AMR` INT DEFAULT NULL COMMENT 'American Homozygous Counts',\n");
		fw.append("	`Hom_EAS` INT DEFAULT NULL COMMENT 'East Asian Homozygous Counts',\n");
		fw.append("	`Hom_FIN` INT DEFAULT NULL COMMENT 'Finnish Homozygous Counts',\n");
		fw.append("	`Hom_NFE` INT DEFAULT NULL COMMENT 'Non-Finnish European Homozygous Counts',\n");
		fw.append("	`Hom_SAS` INT DEFAULT NULL COMMENT 'South Asian Homozygous Counts',\n");
		fw.append("	`Hom_OTH` INT DEFAULT NULL COMMENT 'Other Homozygous Counts',\n");
		fw.append("	`Hemi_AFR` INT DEFAULT NULL COMMENT 'African/African American Hemizygous Counts',\n");
		fw.append("	`Hemi_AMR` INT DEFAULT NULL COMMENT 'American Hemizygous Counts',\n");
		fw.append("	`Hemi_EAS` INT DEFAULT NULL COMMENT 'East Asian Hemizygous Counts',\n");
		fw.append("	`Hemi_FIN` INT DEFAULT NULL COMMENT 'Finnish Hemizygous Counts',\n");
		fw.append("	`Hemi_NFE` INT DEFAULT NULL COMMENT 'Non-Finnish European Hemizygous Counts',\n");
		fw.append("	`Hemi_SAS` INT DEFAULT NULL COMMENT 'South Asian Hemizygous Counts',\n");
		fw.append("	`Hemi_OTH` INT DEFAULT NULL COMMENT 'Other Hemizygous Counts',\n");
		fw.append("	`CCC` INT DEFAULT NULL COMMENT 'Number of called chromosomes',\n");
		fw.append("	`NCC` INT DEFAULT NULL COMMENT 'Number of no-called samples',\n");
		fw.append("	`ClippingRankSum` DOUBLE DEFAULT NULL COMMENT 'Z-score From Wilcoxon rank sum test of Alt vs. Ref number of hard clipped bases',\n");
		fw.append("	`END` INT DEFAULT NULL COMMENT 'Stop position of the interval',\n");
		fw.append("	`GQ_MEAN` DOUBLE DEFAULT NULL COMMENT 'Mean of all GQ values',\n");
		fw.append("	`GQ_STDDEV` DOUBLE DEFAULT NULL COMMENT 'Standard deviation of all GQ values',\n");
		fw.append("	`HWP` DOUBLE DEFAULT NULL COMMENT 'P value from test of Hardy Weinberg Equilibrium',\n");
		fw.append("	`NEGATIVE_TRAIN_SITE` BOOLEAN DEFAULT NULL COMMENT 'This variant was used to build the negative training set of bad variants',\n");
		fw.append("	`POSITIVE_TRAIN_SITE` BOOLEAN DEFAULT NULL COMMENT 'This variant was used to build the positive training set of good variants',\n");
		fw.append("	`VQSLOD` DOUBLE DEFAULT NULL COMMENT 'Log odds ratio of being a true variant versus being false under the trained gaussian mixture model',\n");
		fw.append("	`culprit` TEXT NOT NULL COMMENT 'The annotation which was the worst performing in the Gaussian mixture model, likely the reason why the variant was filtered out',\n");
		fw.append("	`DP_HIST` TEXT NOT NULL COMMENT 'Histogram for DP; Mids: 2.5|7.5|12.5|17.5|22.5|27.5|32.5|37.5|42.5|47.5|52.5|57.5|62.5|67.5|72.5|77.5|82.5|87.5|92.5|97.5',\n");
		fw.append("	`GQ_HIST` TEXT NOT NULL COMMENT 'Histogram for GQ; Mids: 2.5|7.5|12.5|17.5|22.5|27.5|32.5|37.5|42.5|47.5|52.5|57.5|62.5|67.5|72.5|77.5|82.5|87.5|92.5|97.5',\n");
		//GONL
		fw.append("	`ac` INT(5) DEFAULT NULL COMMENT 'AC: Allele count in genotypes',\n");
		fw.append("	`an` INT(5) DEFAULT NULL COMMENT 'AN: Total number of alleles in called genotypes',\n");
		fw.append("	`af` DOUBLE DEFAULT NULL COMMENT 'AF: Allele Frequency',\n");
		fw.append("	`set` VARCHAR(160) DEFAULT NULL COMMENT 'set: Source VCF for the merged record in CombineVariants',\n");
		fw.append("	`inaccessible` BOOLEAN DEFAULT NULL COMMENT 'inaccessible: Overlaps a user-input mask.',\n");
		*/
	}
	
	public static StringBuilder createAlleleFrequencies(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_allele_frequencies`;\n");
		fw.append("CREATE TABLE `"+analysis+"_allele_frequencies` (\n");
		fw.append("	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL COMMENT 'Chromosome : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`pos` INT NOT NULL COMMENT 'Position : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`length` INT NOT NULL COMMENT 'Length of the variant',\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL COMMENT 'The reference base that vary in the samples, or in the population in general. Note that reference is always given on the forward strand. For indels the reference bases always include at least one base each (the base before the event).',\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL COMMENT 'The alternative base that vary in the samples, or in the population in general. Note that alternative is always given on the forward strand. For indels the alternative bases always include at least one base each (the base before the event).',\n");
		fw.append("	`local_af` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Alternative allele frequency in this analysis (all samples) at this position.',\n");
		fw.append("	`local_ac` INT NOT NULL DEFAULT 0 COMMENT 'Alternative allele count in this analysis (all samples) at this position.',\n");
		fw.append("	`local_an` INT NOT NULL DEFAULT 0 COMMENT 'Total number of alleles in this analysis (all samples) at this position.',\n");
		fw.append("	`local_het` INT NOT NULL DEFAULT 0 COMMENT 'Count of heterozygous individuals in this analysis (all samples) at this position.',\n");
		fw.append("	`local_hom` INT NOT NULL DEFAULT 0 COMMENT 'Count of homozygous individuals in this analysis (all samples) at this position.',\n");
		fw.append("	`local_pathologies` SMALLINT NOT NULL DEFAULT 0 COMMENT 'Number of pathologies in this analysis having at least one individual with the SAME variation at same position in any sample.',\n");
		fw.append("	`germline_af` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Alternative allele frequency in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_ac` INT NOT NULL DEFAULT 0 COMMENT 'Alternative allele count in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_an` INT NOT NULL DEFAULT 0 COMMENT 'Total number of alleles in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_het` INT NOT NULL DEFAULT 0 COMMENT 'Count of heterozygous individuals in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_hom` INT NOT NULL DEFAULT 0 COMMENT 'Count of homozygous individuals in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_pathologies` SMALLINT NOT NULL DEFAULT 0 COMMENT 'Number of pathologies in this analysis having at least one individual with the SAME variation at same position in germline samples.',\n");
		fw.append("	`somatic_af` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Alternative allele frequency in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_ac` INT NOT NULL DEFAULT 0 COMMENT 'Alternative allele count in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_an` INT NOT NULL DEFAULT 0 COMMENT 'Total number of alleles in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_het` INT NOT NULL DEFAULT 0 COMMENT 'Count of heterozygous individuals in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_hom` INT NOT NULL DEFAULT 0 COMMENT 'Count of homozygous individuals in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_pathologies` SMALLINT NOT NULL DEFAULT 0 COMMENT 'Number of pathologies in this analysis having at least one individual with the SAME variation at same position in somatic samples.',\n");
		fw.append("	PRIMARY KEY (`id`),\n");
		fw.append("	UNIQUE KEY `variant` (`pos`,`chr`),\n");
		fw.append("	INDEX `local_af` (`local_af`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createAlleleFrequenciesPerPathology(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_allele_frequencies_per_pathology`;\n");
		fw.append("CREATE TABLE `"+analysis+"_allele_frequencies_per_pathology` (\n");
		fw.append("	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL COMMENT 'Chromosome : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`pos` INT NOT NULL COMMENT 'Position : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`length` INT NOT NULL COMMENT 'Length of the variant',\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL COMMENT 'The reference base that vary in the samples, or in the population in general. Note that reference is always given on the forward strand. For indels the reference bases always include at least one base each (the base before the event).',\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL COMMENT 'The alternative base that vary in the samples, or in the population in general. Note that alternative is always given on the forward strand. For indels the alternative bases always include at least one base each (the base before the event).',\n");
		fw.append(" `pathology_id` INT(10) UNSIGNED NOT NULL,\n");
		
		fw.append("	`local_af` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Alternative allele frequency in this analysis (all samples) at this position.',\n");
		fw.append("	`local_ac` INT NOT NULL DEFAULT 0 COMMENT 'Alternative allele count in this analysis (all samples) at this position.',\n");
		fw.append("	`local_an` INT NOT NULL DEFAULT 0 COMMENT 'Total number of alleles in this analysis (all samples) at this position.',\n");
		fw.append("	`local_het` INT NOT NULL DEFAULT 0 COMMENT 'Count of heterozygous individuals in this analysis (all samples) at this position.',\n");
		fw.append("	`local_hom` INT NOT NULL DEFAULT 0 COMMENT 'Count of homozygous individuals in this analysis (all samples) at this position.',\n");
		
		fw.append("	`germline_af` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Alternative allele frequency in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_ac` INT NOT NULL DEFAULT 0 COMMENT 'Alternative allele count in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_an` INT NOT NULL DEFAULT 0 COMMENT 'Total number of alleles in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_het` INT NOT NULL DEFAULT 0 COMMENT 'Count of heterozygous individuals in this analysis (germline samples) at this position.',\n");
		fw.append("	`germline_hom` INT NOT NULL DEFAULT 0 COMMENT 'Count of homozygous individuals in this analysis (germline samples) at this position.',\n");
		
		fw.append("	`somatic_af` DOUBLE NOT NULL DEFAULT 0 COMMENT 'Alternative allele frequency in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_ac` INT NOT NULL DEFAULT 0 COMMENT 'Alternative allele count in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_an` INT NOT NULL DEFAULT 0 COMMENT 'Total number of alleles in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_het` INT NOT NULL DEFAULT 0 COMMENT 'Count of heterozygous individuals in this analysis (somatic samples) at this position.',\n");
		fw.append("	`somatic_hom` INT NOT NULL DEFAULT 0 COMMENT 'Count of homozygous individuals in this analysis (somatic samples) at this position.',\n");
		
		fw.append("	PRIMARY KEY (`id`),\n");
		fw.append("	INDEX `variant` (`pos`,`chr`),\n");
		fw.append("	INDEX `pathology_id` (`pathology_id`),\n");
		fw.append("	INDEX `local_af` (`local_af`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createUserAnnotationsVariants(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_user_annotations_variants`;\n");
		fw.append("CREATE TABLE `"+analysis+"_user_annotations_variants` (\n");
		fw.append("	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL COMMENT 'Chromosome : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`pos` INT NOT NULL COMMENT 'Position : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`length` INT NOT NULL COMMENT 'Length of the variant',\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL COMMENT 'The reference base that vary in the samples, or in the population in general. Note that reference is always given on the forward strand. For indels the reference bases always include at least one base each (the base before the event).',\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL COMMENT 'The alternative base that vary in the samples, or in the population in general. Note that alternative is always given on the forward strand. For indels the alternative bases always include at least one base each (the base before the event).',\n");
		fw.append(" `gene_symbol` VARCHAR(50) NOT NULL DEFAULT '' COMMENT 'Gene symbol.',\n");
		fw.append("	`username` VARCHAR(16) NOT NULL COMMENT 'Must be set to PUBLIC for public annotations, else annotations are private',\n");
		fw.append("	`variant_of_interest` BOOLEAN DEFAULT NULL COMMENT 'Comments about the variant (whatever the sample), either visible only by username, or visible and modifiable by all users if username is set to PUBLIC.',\n");
		fw.append("	`variant_comments` LONGTEXT NOT NULL COMMENT 'Comments about the variant (whatever the sample), either visible only by username, or visible and modifiable by all users if username is set to PUBLIC.',\n");
		fw.append("	PRIMARY KEY  (`id`),\n");
		fw.append("	UNIQUE KEY `variant_username` (`pos`,`chr`,`username`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createUserAnnotationsGenes(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_user_annotations_genes`;\n");
		fw.append("CREATE TABLE `"+analysis+"_user_annotations_genes` (\n");
		fw.append(" `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append(" `gene_symbol` VARCHAR(50) NOT NULL COMMENT 'Gene symbol.',\n");
		fw.append("	`username` VARCHAR(16) NOT NULL COMMENT 'Must be set to PUBLIC for public annotations, else annotations are private',\n");
		fw.append("	`gene_of_interest` BOOLEAN DEFAULT NULL COMMENT 'You can set this flag to true if the gene is of interest for you, or to false otherwise.',\n");
		fw.append("	`gene_comments` LONGTEXT NOT NULL COMMENT 'Comments about the gene, if any, either visible only by username, or visible and modifiable by all users if username is set to PUBLIC.',\n");
		fw.append("	PRIMARY KEY  (`id`),\n");
		fw.append("	UNIQUE KEY `gene_username` (`gene_symbol`,`username`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createUserAnnotationsSamples(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_user_annotations_samples`;\n");
		fw.append("CREATE TABLE `"+analysis+"_user_annotations_samples` (\n");
		fw.append(" `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append(" `project_id` INT(10) UNSIGNED NOT NULL COMMENT 'Id of the sample in the project table',\n");
		fw.append("	`username` VARCHAR(16) NOT NULL COMMENT 'Must be set to PUBLIC for public annotations, else annotations are private',\n");
		fw.append("	`sample_of_interest` BOOLEAN DEFAULT NULL COMMENT 'You can set this flag to true if the gene is of interest for you, or to false otherwise.',\n");
		fw.append("	`sample_comments` LONGTEXT NOT NULL COMMENT 'Comments about the sample, if any, either visible only by username, or visible and modifiable by all users if username is set to PUBLIC.',\n");
		fw.append("	PRIMARY KEY  (`id`),\n");
		fw.append("	UNIQUE KEY `project_username` (`project_id`,`username`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createUserAnnotationsEvaluations(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_user_annotations_evaluations`;\n");
		fw.append("CREATE TABLE `"+analysis+"_user_annotations_evaluations` (\n");
		fw.append("	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL COMMENT 'Chromosome : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`pos` INT NOT NULL COMMENT 'Position : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`length` INT NOT NULL COMMENT 'Length of the variant',\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL COMMENT 'The reference base that vary in the samples, or in the population in general. Note that reference is always given on the forward strand. For indels the reference bases always include at least one base each (the base before the event).',\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL COMMENT 'The alternative base that vary in the samples, or in the population in general. Note that alternative is always given on the forward strand. For indels the alternative bases always include at least one base each (the base before the event).',\n");
		fw.append(" `gene_symbol` VARCHAR(50) NOT NULL DEFAULT '' COMMENT 'Gene symbol.',\n");
		fw.append("	`project_id` INT(10) UNSIGNED NOT NULL COMMENT 'Id of the sample in the project table',\n");
		fw.append("	`evaluation` TINYINT DEFAULT 0 COMMENT 'This field can be used to assign an evaluation class to a variant: I - Benign - Polymorphism. II - Variant Likely Benign. III - Variant of Unknown Significance. IV - Variant Likely Pathogenic. V - Pathogenic Mutation. A value of zero means that this variant has not been evaluated. Only users associated with the given sample can change this flag, but any user can see the assigned value.',\n");
		fw.append("	`evaluation_username` VARCHAR(16) DEFAULT NULL COMMENT 'User who has set the evaluation field.',\n");
		fw.append("	`evaluation_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the evaluation field.',\n");
		fw.append("	`check_insilico` ENUM('NOT_CHECKED','OK','SUSPECT','NOT_OK') NOT NULL DEFAULT 'NOT_CHECKED' COMMENT 'This field can be used if this variant has been evaluated insilico (e.g. by looking at the alignment): OK (it\\'s likely a real variant), NOT_OK (it\\'s likely a sequencing error, e.g. alternative allele not specific to pathology), SUSPECT (checked insilico but not sure if it\\'s real or not) or NOT_CHECKED (Not checked insilico, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.',\n");
		fw.append("	`check_insilico_username` VARCHAR(16) DEFAULT NULL COMMENT 'User who has set the check_insilico field.',\n");
		fw.append("	`check_insilico_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the check_insilico field.',\n");
		fw.append("	`reporting` ENUM('NOT_CHECKED','YES','NO') NOT NULL DEFAULT 'NOT_CHECKED' COMMENT 'This field can be used to record reporting to the patient: NOT_CHECKED (variant has not been checked), YES (variant has been checked and needs to be reported to the patient), NO (variant has been checked and doesnt need to be reported to the patient). Only users associated with the given sample can change this field, but any user can see the assigned value.',\n");
		fw.append("	`reporting_username` VARCHAR(16) DEFAULT NULL COMMENT 'User who has set the reporting field.',\n");
		fw.append("	`reporting_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the reporting field.',\n");
		fw.append("	`check_validated_variant` ENUM('NOT_CHECKED','VALIDATED','SUSPECT','INVALIDATED') NOT NULL DEFAULT 'NOT_CHECKED' COMMENT 'This field can be used if this variant has been tested in the lab: VALIDATED (the variant has been confirmed with another lab technique, e.g. by Sanger sequencing), INVALIDATED (the variant has been invalidated and is not real), SUSPECT (the variant has been checked with another technique, but cannot be confirmed or invalidate) or NOT_CHECKED (Not checked with another lab technique, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.',\n");
		fw.append("	`check_validated_variant_username` VARCHAR(16) DEFAULT NULL COMMENT 'User who has set the check_validated_variant field.',\n");
		fw.append("	`check_validated_variant_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the check_validated_variant field.',\n");
		fw.append("	`check_somatic_variant` ENUM('NOT_CHECKED','SOMATIC','DUBIOUS','GERMLINE') NOT NULL DEFAULT 'NOT_CHECKED' COMMENT 'This field can be used if this variant has been evaluated for mosaicism: SOMATIC (it\\'s likely a somatic variant), GERMLINE (it\\'s likely a germline variant), DUBIOUS (checked for mosaicism, but impossible to differenciate between somatic or germline) or NOT_CHECKED (Not checked for mosaicism, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.',\n");
		fw.append("	`check_somatic_variant_username` VARCHAR(16) DEFAULT NULL COMMENT 'User who has set the check_somatic_variant field.',\n");
		fw.append("	`check_somatic_variant_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the check_somatic field.',\n");
		fw.append("	`check_segregation` ENUM('NOT_CHECKED','SINGLE','COSEG','CARRIERS','NO_COSEG','NO_COSEG_OTHER') NOT NULL DEFAULT 'NOT_CHECKED' COMMENT 'This field can be used if this variant has been evaluated for segregation: SINGLE (No other sample in family), COSEG (Variant cosegregates), CARRIERS (Some unaffected carrier(s)), NO_COSEG (Not in other affected(s)), NO_COSEG_OTHER (Does not cosegregate in other families) or NOT_CHECKED (Not checked for segregation, default value). Only users associated with the given sample can change this field, but any user can see the assigned value.',\n");
		fw.append("	`check_segregation_username` VARCHAR(16) DEFAULT NULL COMMENT 'User who has set the check_segregation field.',\n");
		fw.append("	`check_segregation_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the check_segregation field.',\n");
		fw.append("	`evaluation_comments` LONGTEXT NOT NULL COMMENT 'Comments visible to all users but modifiable only by users associated with the sample.',\n");
		fw.append("	`evaluation_comments_username` VARCHAR(16) DEFAULT NULL COMMENT 'Last user who has modified the evaluation_comments field.',\n");
		fw.append("	`evaluation_comments_date` DATETIME DEFAULT CURRENT_TIMESTAMP COMMENT 'Date and time of the last change to the evaluation_comments field.',\n");
		fw.append("	`history` LONGTEXT NOT NULL COMMENT 'History of evaluation modifications, including username and date.',\n");
		fw.append("	PRIMARY KEY (`id`),\n");
		fw.append("	UNIQUE KEY `variant_project` (`pos`,`chr`,`project_id`),\n");
		fw.append("	INDEX `project` (`project_id`)\n");
		fw.append(") ENGINE = InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createUserAnnotationsNumEvaluations(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_user_annotations_num_evaluations`;\n");
		fw.append("CREATE TABLE `"+analysis+"_user_annotations_num_evaluations` (\n");
		fw.append("	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL COMMENT 'Chromosome : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`pos` INT NOT NULL COMMENT 'Position : chromosome and position gives the contig on which the variant occurs. For indels this is actually the base preceding the event.',\n");
		fw.append("	`length` INT NOT NULL COMMENT 'Length of the variant',\n");
		fw.append("	`reference` VARCHAR(300) NOT NULL COMMENT 'The reference base that vary in the samples, or in the population in general. Note that reference is always given on the forward strand. For indels the reference bases always include at least one base each (the base before the event).',\n");
		fw.append("	`alternative` VARCHAR(500) NOT NULL COMMENT 'The alternative base that vary in the samples, or in the population in general. Note that alternative is always given on the forward strand. For indels the alternative bases always include at least one base each (the base before the event).',\n");
		fw.append(" `gene_symbol` VARCHAR(50) NOT NULL DEFAULT '' COMMENT 'Gene symbol.',\n");
		fw.append("	`num_evaluated_as_type_1` INT DEFAULT 0 COMMENT 'Number of samples in which this variant has been evaluated as \\'I - Benign\\'',\n");
		fw.append("	`num_evaluated_as_type_2` INT DEFAULT 0 COMMENT 'Number of samples in which this variant has been evaluated as \\'II - Variant Likely Benign\\'',\n");
		fw.append("	`num_evaluated_as_type_3` INT DEFAULT 0 COMMENT 'Number of samples in which this variant has been evaluated as \\'III - Variant of Unknown Significance\\'',\n");
		fw.append("	`num_evaluated_as_type_4` INT DEFAULT 0 COMMENT 'Number of samples in which this variant has been evaluated as \\'IV - Variant Likely Pathogenic\\'',\n");
		fw.append("	`num_evaluated_as_type_5` INT DEFAULT 0 COMMENT 'Number of samples in which this variant has been evaluated as \\'V - Pathogenic Mutation\\'',\n");
		fw.append("	PRIMARY KEY (`id`),\n");
		fw.append("	UNIQUE KEY `variant` (`pos`,`chr`)\n");
		fw.append(") ENGINE = InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createPossibleValues(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_possible_values`;\n");
		fw.append("CREATE TABLE `"+analysis+"_possible_values` (\n");
		fw.append("	`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`field` VARCHAR(255) NOT NULL,\n");
		fw.append("	`value` TEXT NOT NULL,\n");
		fw.append("	PRIMARY KEY  (`id`),\n");
		fw.append("	INDEX `field` (`field`(10))\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}

	public static StringBuilder createCoverageRegions(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_coverage_regions`;\n");
		fw.append("CREATE TABLE `"+analysis+"_coverage_regions` (\n");
		fw.append(" `region_id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,\n");
		fw.append("	`region_name` VARCHAR(50) NOT NULL DEFAULT '',\n");
		fw.append("	`chr` VARCHAR(50) NOT NULL,\n");
		fw.append("	`start` INT NOT NULL COMMENT 'Zero-based position, like in bed (Ensembl uses 1-based).',\n");
		fw.append("	`end` INT NOT NULL COMMENT 'Zero-based position, like in bed (Ensembl uses 1-based).',\n");
		fw.append("	`gene_symbol` VARCHAR(50) NOT NULL DEFAULT '',\n");
		fw.append("	`exon` SMALLINT DEFAULT NULL,\n");
		fw.append("	`intron` SMALLINT DEFAULT NULL,\n");
		fw.append("	`utr` BOOLEAN DEFAULT NULL,\n");
		fw.append("	`coding` BOOLEAN DEFAULT NULL,\n");
		fw.append("  PRIMARY KEY  (`region_id`),\n");
		fw.append("  INDEX `chr` (`chr`),\n");
		fw.append("  INDEX `gene_symbol` (`gene_symbol`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createCoverage(Analysis analysis){
		StringBuilder fw = new StringBuilder();
		fw.append("DROP TABLE IF EXISTS `"+analysis+"_coverage`;\n");
		fw.append("CREATE TABLE `"+analysis+"_coverage` (\n");
		fw.append("  `region_id` INT(10) UNSIGNED NOT NULL,\n");
		fw.append("  `project_id` INT(10) UNSIGNED NOT NULL,\n");
		fw.append("  `mean_depth` DOUBLE DEFAULT NULL,\n");
		fw.append("  `num_pos_1x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_20x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_30x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_100x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_200x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_500x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_1000x` INT DEFAULT NULL,\n");
		fw.append("  `num_pos_5000x` INT DEFAULT NULL,\n");
		fw.append("  PRIMARY KEY  (`region_id`,`project_id`)\n");
		fw.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8;\n");
		return fw;
	}
	
	public static StringBuilder createFunctions(){
		StringBuilder fw = new StringBuilder();
		fw.append("DELIMITER $$\n");
		fw.append("DROP FUNCTION IF EXISTS `Highlander.levenshtein`$$\n");
		fw.append("CREATE FUNCTION Highlander.levenshtein( s1 VARCHAR(255), s2 VARCHAR(255) )\n"
				+"    RETURNS INT\n"
				+"    DETERMINISTIC\n"
				+"    BEGIN\n"
				+"        DECLARE s1_len, s2_len, i, j, c, c_temp, cost INT;\n"
				+"        DECLARE s1_char CHAR;\n"
				+"        DECLARE cv0, cv1 VARBINARY(256);\n"
				+"        SET s1_len = CHAR_LENGTH(s1), s2_len = CHAR_LENGTH(s2), cv1 = 0x00, j = 1, i = 1, c = 0;\n"
				+"        IF s1 = s2 THEN\n"
				+"            RETURN 0;\n"
				+"        ELSEIF s1_len = 0 THEN\n"
				+"            RETURN s2_len;\n"
				+"        ELSEIF s2_len = 0 THEN\n"
				+"            RETURN s1_len;\n"
				+"        ELSE\n"
				+"            WHILE j <= s2_len DO\n"
				+"                SET cv1 = CONCAT(cv1, UNHEX(HEX(j))), j = j + 1;\n"
				+"            END WHILE;\n"
				+"            WHILE i <= s1_len DO\n"
				+"                SET s1_char = SUBSTRING(s1, i, 1), c = i, cv0 = UNHEX(HEX(i)), j = 1;\n"
				+"                WHILE j <= s2_len DO\n"
				+"                    SET c = c + 1;\n"
				+"                    IF s1_char = SUBSTRING(s2, j, 1) THEN\n"
				+"                        SET cost = 0; ELSE SET cost = 1;\n"
				+"                    END IF;\n"
				+"                    SET c_temp = CONV(HEX(SUBSTRING(cv1, j, 1)), 16, 10) + cost;\n"
				+"                    IF c > c_temp THEN SET c = c_temp; END IF;\n"
				+"                    SET c_temp = CONV(HEX(SUBSTRING(cv1, j+1, 1)), 16, 10) + 1;\n"
				+"                    IF c > c_temp THEN\n"
				+"                        SET c = c_temp;\n"
				+"                    END IF;\n"
				+"                    SET cv0 = CONCAT(cv0, UNHEX(HEX(c))), j = j + 1;\n"
				+"                END WHILE;\n"
				+"                SET cv1 = cv0, i = i + 1;\n"
				+"            END WHILE;\n"
				+"        END IF;\n"
				+"        RETURN c;\n"
				+"    END$$\n"
				);
		fw.append("DELIMITER ;\n");
		return fw;
	}
	
	public static StringBuilder getCreateStatement(String table) throws Exception {
		switch(table){
		case "main":
			return createMain();
		case "settings":
			return createSettings();
		case "references":
			return createReferences();
		case "reports":
			return createReports();
		case "external_links":
			return createExternalLinks();
		case "pathologies":
			return createPathologies();
		case "populations":
			return createPopulations();
		case "fields":
			return createFields();
		case "fields_analyses":
			return createFieldAnalyses();
		case "fields_tags":
			return createFieldTags();
		case "field_categories":
			return createFieldCategories();
		case "field_sizes":
			return createFieldSizes();
		case "projects":
			return createProjects();
		case "projects_analyses":
			return createProjectsAnalyses();
		case "projects_users":
			return createProjectsUsers();
		case "users":
			return createUsers();
		case "users_data":
			return createUsersData();
		case "analyses":
			return createAnalyses();
		default:
			if (table.endsWith("_static_annotations")){
				return createStaticAnnotations(new Analysis(table.substring(0, table.indexOf("_static_annotations"))));
			}else if (table.endsWith("_sample_annotations")){
				return createSampleAnnotations(new Analysis(table.substring(0, table.indexOf("_sample_annotations"))));
			}else if (table.endsWith("_custom_annotations")){
				return createCustomAnnotations(new Analysis(table.substring(0, table.indexOf("_custom_annotations"))));
			}else if (table.endsWith("_gene_annotations")){
				return createGeneAnnotations(new Analysis(table.substring(0, table.indexOf("_gene_annotations"))));
			}else if (table.endsWith("_allele_frequencies")){
				return createAlleleFrequencies(new Analysis(table.substring(0, table.indexOf("_allele_frequencies"))));
			}else if (table.endsWith("_allele_frequencies_per_pathology")){
				return createAlleleFrequenciesPerPathology(new Analysis(table.substring(0, table.indexOf("_allele_frequencies_per_pathology"))));
			}else if (table.endsWith("_user_annotations_variants")){
				return createUserAnnotationsVariants(new Analysis(table.substring(0, table.indexOf("_user_annotations_variants"))));
			}else if (table.endsWith("_user_annotations_genes")){
				return createUserAnnotationsGenes(new Analysis(table.substring(0, table.indexOf("_user_annotations_genes"))));
			}else if (table.endsWith("_user_annotations_samples")){
				return createUserAnnotationsSamples(new Analysis(table.substring(0, table.indexOf("_user_annotations_samples"))));
			}else if (table.endsWith("_user_annotations_evaluations")){
				return createUserAnnotationsEvaluations(new Analysis(table.substring(0, table.indexOf("_user_annotations_evaluations"))));
			}else if (table.endsWith("_user_annotations_num_evaluations")){
				return createUserAnnotationsEvaluations(new Analysis(table.substring(0, table.indexOf("_user_annotations_num_evaluations"))));
			}else if (table.endsWith("_possible_values")){
				return createPossibleValues(new Analysis(table.substring(0, table.indexOf("_possible_values"))));
			}else if (table.endsWith("_coverage_regions")){
				return createCoverageRegions(new Analysis(table.substring(0, table.indexOf("_coverage_regions"))));
			}else if (table.endsWith("_coverage")){
				return createCoverage(new Analysis(table.substring(0, table.indexOf("_coverage"))));
			}else{
				throw new Exception("Unsupported table : " + table + " (don't have CREATE statement)");			
			}
		}
	}

	public static List<String> split(StringBuilder sql){
		List<String> split = new ArrayList<String>();
		for (String s : sql.toString().split(";\n")) {
			split.add(s);
		}
		return split;
	}
	
	public static List<String> convert(StringBuilder sql, DBMS dbms){
		List<String> conversion = new ArrayList<String>(); 
		String s = sql.toString();
		if (dbms == DBMS.hsqldb){
			s = s.replaceAll("\\) ?ENGINE.+;", ");");
			s = s.replaceAll(" COMMENT '.+' ?(,*)\n", "$1\n");
			s = s.replaceAll("ENUM\\([^)]+\\)", "VARCHAR(255)");
			s = s.replaceAll("INT\\([^)]+\\)", "INT");
			s = s.replaceAll("LONGINT", "INT");
			s = s.replaceAll("MEDIUMINT", "INT");
			s = s.replaceAll("LONGTEXT", "LONGVARCHAR");
			s = s.replaceAll("MEDIUMTEXT", "LONGVARCHAR");
			s = s.replaceAll("TEXT", "LONGVARCHAR");
			s = s.replaceAll("LONGBLOB", "BLOB");
			s = s.replaceAll(" UNSIGNED", "");
			s = s.replaceAll(",\n\t* *PRIMARY (KEY|INDEX)\t* *\\(`[^)]+`\\)\t* *(,*)\n", "$2\n");
			s = s.replaceAll("\t* *(`[^)]+`) .+ AUTO_INCREMENT(,*)\n", "\t$1 INTEGER IDENTITY PRIMARY KEY$2\n");
			s = s.replaceAll("CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP", "CURRENT_TIMESTAMP");
			s = s.replaceAll("NOT NULL (DEFAULT [^,)]*)(,*)", "$1 NOT NULL$2");
			s = s.replaceAll("DATETIME DEFAULT '0000-00-00 00:00:00'", "TIMESTAMP DEFAULT NULL");
			s = s.replaceAll("KEY ", "INDEX ");			
			s = s.replaceAll("\\\\'", "''");			
			s = s.replaceAll("\\\"", "'\"");			
			while (s.contains("INDEX ")){
				int start = s.indexOf("`");
				int end = s.indexOf("`", start+1);
				String table = s.substring(start, end+1);
				start = s.indexOf("UNIQUE INDEX "); //add unique constraint to the table -- not really usefull for this purpose ?
				if (start < 0) start = s.indexOf("INDEX ");
				end = s.indexOf("\n", start);
				String index = s.substring(start, end);
				index = index.replaceFirst("UNIQUE INDEX", "INDEX");
				index = index.replaceFirst("INDEX", "CREATE INDEX");
				index = index.replaceFirst("`", table.substring(0, table.length()-1)+"_");
				index = index.replaceFirst("\\(", "ON "+table+" (");
				index = index.replaceAll("\\(\\d+\\)", "");
				index = index.trim();
				if (index.charAt(index.length()-1) == ',') index = index.substring(0,index.length()-1);
				conversion.add(HighlanderDatabase.formatHsqldbEscape(index)+";");
				s = s.substring(0, start) + s.substring(end+1);
			}
			while(s.contains("INSERT ")){
				int start = s.indexOf("INSERT");
				int end = s.indexOf("\n", start);
				String insert = s.substring(start, end);
				conversion.add(HighlanderDatabase.formatHsqldbEscape(insert));			
				s = s.substring(0, start) + s.substring(end+1);
			}
			s = HighlanderDatabase.formatHsqldbEscape(s);					
			s = s.replaceAll(", *\n *\t* *\\);", "\n);");
		}
		if (s.length() > 0) conversion.add(0, s);
		return conversion;
	}

	public static void localDbGenerator(DBMS dbms, HighlanderDatabase local) throws Exception {
		System.out.println("Creating `main`");
		for (String st : convert(createMain(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillMain(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `settings`");
		for (String st : convert(createSettings(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillSettings(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `references`");
		for (String st : convert(createReferences(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillReferences(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `reports`");
		for (String st : convert(createReports(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillReports(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `external_links`");
		for (String st : convert(createExternalLinks(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `pathologies`");
		for (String st : convert(createPathologies(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `populations`");
		for (String st : convert(createPopulations(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillPopulations(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `fields`");
		for (String st : convert(createFields(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillFields(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `fields_analyses`");
		for (String st : convert(createFieldAnalyses(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `fields_tags`");
		for (String st : convert(createFieldTags(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `field_categories`");
		for (String st : convert(createFieldCategories(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillFieldCategories(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `field_sizes`");
		for (String st : convert(createFieldSizes(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillFieldSizes(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `projects`");
		for (String st : convert(createProjects(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `projects_users`");
		for (String st : convert(createProjectsUsers(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `projects_analyses`");
		for (String st : convert(createProjectsAnalyses(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `users`");
		for (String st : convert(createUsers(), dbms)) local.update(Schema.HIGHLANDER,st);
		for (String st : convert(fillUsers(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `users_data`");
		for (String st : convert(createUsersData(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating `analyses`");
		for (String st : convert(createAnalyses(), dbms)) local.update(Schema.HIGHLANDER,st);
		System.out.println("Creating SQL functions");
		for (String st : convert(createFunctions(), dbms)) local.update(Schema.HIGHLANDER,st);
		local.disconnectAll();
	}

	public static void main(String[] args) {
		try {
			Highlander.initialize(new Parameters(false, new File("config\\GEHU admin\\settings.xml")), 5);
			/*
			for (AnalysisFull analysis : AnalysisFull.getAvailableAnalyses()){
				try( Results res = Highlander.getDB().select(Schema.HIGHLANDER, "DESCRIBE " + analysis.getFromStaticAnnotations())){
					while (res.next()) {
						if (res.getString("Field").equals("mutation_taster_aa")) {
							System.out.println(analysis + "\t\t" + res.getString("Type"));
							if (res.getString("Type").equals("longtext")) {
								Highlander.getDB().update(Schema.HIGHLANDER, "ALTER TABLE " + analysis.getFromGeneAnnotations() + " MODIFY `expression_gnf_atlas` TEXT DEFAULT NULL");
							}
						}
					}
				}
			}
			*/
		}catch(Exception ex) {
			ex.printStackTrace();
		}
	}
}
